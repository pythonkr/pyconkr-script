1
00:00:00,000 --> 00:00:02,650
안녕하세요 저는 이제 샐러리

2
00:00:02,650 --> 00:00:06,700
핵심과 커스터마이제이션 발표를 하게 된 피알앤디컴퍼니

3
00:00:06,700 --> 00:00:10,110
이지은 이라고 합니다

4
00:00:10,110 --> 00:00:15,780
제 차에 피알앤디컴퍼니 는 헤이즐

5
00:00:15,780 --> 00:00:17,500
원하는 서비스를 운영 하고 있고요

6
00:00:17,500 --> 00:00:25,200
페이지로는 고객이 차량을 등록하면 경매를 진행을 해서 질러라

7
00:00:25,200 --> 00:00:30,420
질러 를 선택하고 거래까지 할 수 있는 모바일 어플리케이션

8
00:00:30,420 --> 00:00:32,260
웹 투어 있습니다

9
00:00:32,260 --> 00:00:35,870
저희는 일단 스타트업이 고

10
00:00:35,870 --> 00:00:39,710
제가 2017년도 당시에 이제 팀에 합류 를 했는데

11
00:00:39,710 --> 00:00:41,700
그 때 비해서 외장 기준으로

12
00:00:41,700 --> 00:00:44,280
한 여덟 개 정도 성장하고 있고

13
00:00:44,280 --> 00:00:48,130
이제 성장하는 속도도 빨라지고 있습니다

14
00:00:48,130 --> 00:00:54,240
저희 백엔드 팀은 주로 파이썬을 주 언어로 사용하고요

15
00:00:54,240 --> 00:00:57,530
그중에서도 뭐 잔고를 하든 프레임워크

16
00:00:57,530 --> 00:01:03,630
셀러리 같은 라이브러리를 사용하고 있고요

17
00:01:03,630 --> 00:01:07,730
그중에서도 오늘 말씀드릴 내용은 샐러리 인데

18
00:01:07,730 --> 00:01:10,860
이제 왜 샐러리를 하게 됐냐면

19
00:01:10,860 --> 00:01:13,680
샐러리가 접근성은 이제 좋은데

20
00:01:13,680 --> 00:01:17,480
쓰다 보면 예상치 못한 작동 들이 있더라고요

21
00:01:17,480 --> 00:01:21,670
그래 가지고 저희가 했던 삭제 들을 좀 공유 하면은 이삭

22
00:01:21,670 --> 00:01:23,440
제대로 안 해 보신 분들은

23
00:01:23,440 --> 00:01:26,820
조금 더 빠르게 개발하실 수 있을 것 같아서

24
00:01:26,820 --> 00:01:30,730
공유를 드리려고 합니다

25
00:01:30,730 --> 00:01:34,800
일단 내용은 샐러리 에 대한 간단한 소개 내용이고요

26
00:01:34,800 --> 00:01:38,590
그리고 안정적으로 완료하기 효율적으로 처리하기

27
00:01:38,590 --> 00:01:44,550
그리고 커스터마이제이션 에 대한 내용입니다

28
00:01:44,550 --> 00:01:46,120
일단 샐러리는 메시지

29
00:01:46,120 --> 00:01:50,240
전달을 기반으로 한 비동기 테스트 있고요

30
00:01:50,240 --> 00:01:54,780
여기서 작업은 메시지로 표현이 돼 클라이언트는 작업을 요청하고

31
00:01:54,780 --> 00:01:56,900
워커는 작업을 수행합니다

32
00:01:56,900 --> 00:01:58,570
그리고 프로 칸은 클라이언트와

33
00:01:58,570 --> 00:02:03,210
워커 사이의 메시지를 전달하는 매개체 역할을 하고요

34
00:02:03,210 --> 00:02:04,360
클라이언트와 워커가

35
00:02:04,360 --> 00:02:08,040
이런 구조에서는 각각 스케일이 가능하기 때문에

36
00:02:08,040 --> 00:02:09,120
클라이언트는 불필요하게

37
00:02:09,120 --> 00:02:11,710
무거운 작업을 하지 않아도 되고

38
00:02:11,710 --> 00:02:16,860
요거는 이제 필요에 따라 확장이 가능하게 됩니다

39
00:02:16,860 --> 00:02:23,410
샐러리는 amqp 이라는 프로토콜을 기반으로 연결해 줘 만들어졌는데

40
00:02:23,410 --> 00:02:28,480
핵심 아이디어 중에 하나는 최소한 한 번은 전달된다

41
00:02:28,480 --> 00:02:29,380
메시지를 보낼 때

42
00:02:29,380 --> 00:02:33,090
최선 한 번은 전달된다는 게 핵심 아이디어 중에 하나 하고요

43
00:02:33,090 --> 00:02:33,730
간다

44
00:02:33,730 --> 00:02:36,290
프로토콜에 대해서 간략하게 설명을 하자면

45
00:02:36,290 --> 00:02:39,670
프로듀서는 메시지를 이제 생산을 하고요

46
00:02:39,670 --> 00:02:43,710
그룹으로 코에 보내고 브로커는 컨펌 확인을 합니다

47
00:02:43,710 --> 00:02:46,720
그리고 브로커는 다시 cosmol

48
00:02:46,720 --> 00:02:48,690
메시지를 전달 하게 되는데

49
00:02:48,690 --> 00:02:52,700
이때 컨슈머 다시 브로커의 테크놀로지를 하게 되고요

50
00:02:52,700 --> 00:02:56,530
예 놀러 지는 직역을 하자면서 인정하다

51
00:02:56,530 --> 00:02:59,840
응가를 알려 주다 이런 내용인데

52
00:02:59,840 --> 00:03:02,750
내일 한식으로 해서

53
00:03:02,750 --> 00:03:09,880
좀 안정적으로 메시지를 전달할 수 있게 합니다

54
00:03:09,880 --> 00:03:13,440
그러고 실패 하는 케이스에 대해서

55
00:03:13,440 --> 00:03:15,410
어떤 식으로 처리되는지

56
00:03:15,410 --> 00:03:20,340
예를 들자면 메시지를 브로커에서 커스텀으로 보냈는데

57
00:03:20,340 --> 00:03:22,820
컨슈머가 메시지에 대한 처리를 완료하고

58
00:03:22,820 --> 00:03:26,080
테크놀로지를 완료하지 못 하면은

59
00:03:26,080 --> 00:03:29,590
브로커 같은 경우에는 이 메시지가 제대로 처리되었는지

60
00:03:29,590 --> 00:03:30,830
알 수 없기 때문에

61
00:03:30,830 --> 00:03:33,340
메세지를 컨슈머의 다시 보내게 됩니다

62
00:03:33,340 --> 00:03:36,420
그렇기 때문에 2M

63
00:03:36,420 --> 00:03:39,960
쵸피 상에서는 메시지에 대한 처리를 아이템

64
00:03:39,960 --> 00:03:42,300
포텐트 하게 해야 되고요

65
00:03:42,300 --> 00:03:47,100
아이템플 텐트 가 뭔지 아시는 분들도 있겠지

66
00:03:47,100 --> 00:03:48,330
간단하게 설명을 하고

67
00:03:48,330 --> 00:03:50,790
가지 가자면 여러번 실행해 줘

68
00:03:50,790 --> 00:03:53,070
같은 결과가 나올 때 보니까

69
00:03:53,070 --> 00:03:56,710
오퍼레이션이 레포트 하다고 볼 수 있고요

70
00:03:56,710 --> 00:04:00,720
이제 수학에서는 함수를 여러번호출 한 것과 1번 호출

71
00:04:00,720 --> 00:04:03,740
한 개 같은 리턴을 한다

72
00:04:03,740 --> 00:04:07,800
이제 그때 에프가 아이들 포탄 한수라고 할 수 있는데

73
00:04:07,800 --> 00:04:12,980
프로그램에 프로그램에서는 어떤 시스템 상처에서

74
00:04:12,980 --> 00:04:15,230
오퍼레이션을 여러번 적용해도

75
00:04:15,230 --> 00:04:17,620
그 시스템은 같은 상태가 된다

76
00:04:17,620 --> 00:04:21,230
한 번 적용한 것과

77
00:04:21,230 --> 00:04:23,520
그게 그 오퍼레이션이 화장품

78
00:04:23,520 --> 00:04:26,400
사 왔다고 할 수 있습니다

79
00:04:26,400 --> 00:04:29,530
실생활 예시 로 간단하게 는 엘리베이터 잡을 때

80
00:04:29,530 --> 00:04:32,930
저희가 엘리베이터 내려가기 버튼을 누르면

81
00:04:32,930 --> 00:04:36,010
한번 누르나 여러 번 누르면 불이 켜져 있잖아요

82
00:04:36,010 --> 00:04:38,130
그런 것과 같은 거

83
00:04:38,130 --> 00:04:41,710
그래서 아이덴티티 스를 지켜

84
00:04:41,710 --> 00:04:46,340
줘야 기반을 메시지를 처리할 때

85
00:04:46,340 --> 00:04:50,680
안정적으로 처리할 수 있게 됩니다

86
00:04:50,680 --> 00:04:52,030
그리고 셀러리를 저희가 뭐

87
00:04:52,030 --> 00:04:55,080
이용하는 이유에 대해서 간단하게 말씀을 드리자면

88
00:04:55,080 --> 00:04:59,060
저희는 저희 팀에서는 일단 파이썬을 주 언어로 하기 때문에

89
00:04:59,060 --> 00:05:00,580
셀러리 사용하고요

90
00:05:00,580 --> 00:05:03,000
풍부한 기능을 제공합니다

91
00:05:03,000 --> 00:05:04,710
타임에 미팅이나 스케줄링 있나

92
00:05:04,710 --> 00:05:07,710
모니터링이나 오토스케일링

93
00:05:07,710 --> 00:05:11,700
이거 왜 해도 좀 있나 10분 기능은 거의 다 있고요

94
00:05:11,700 --> 00:05:13,250
찾아보면 있더라고요

95
00:05:13,250 --> 00:05:16,710
그리고 좋은 인터페이스를 제공하고요

96
00:05:16,710 --> 00:05:21,730
어 샐러리의 컨트리뷰션 가이드라인 보게 되면은

97
00:05:21,730 --> 00:05:24,010
api 형태가 리더빌리티

98
00:05:24,010 --> 00:05:25,220
나 컨벤션이 나

99
00:05:25,220 --> 00:05:28,010
퍼포먼스 보다 중요하다고 말을 하거든요

100
00:05:28,010 --> 00:05:30,320
그래서 일단 주간

101
00:05:30,320 --> 00:05:31,880
좋은 인터페이스라는 게

102
00:05:31,880 --> 00:05:34,210
명확한 기준이 있는 건 아니지만

103
00:05:34,210 --> 00:05:36,930
좋은 인터페이스를 제공하고 오려고 노력하고 있고요

104
00:05:36,930 --> 00:05:41,380
그리고 쉬운 인테그레이션 장보영 라이브러리로 시작

105
00:05:41,380 --> 00:05:43,980
잔고 와도 인테그레이션 29 목회

106
00:05:43,980 --> 00:05:50,780
다른 플라스크 라든지 와도 저는 할 수가 있습니다

107
00:05:50,780 --> 00:05:54,200
사용 기본 예술인데요

108
00:05:54,200 --> 00:05:58,270
이런 샐러리 앱을 임포트해서 맵을 생성한 후에

109
00:05:58,270 --> 00:06:01,680
데코레이터 처럼 데코레이터 를 사용해서

110
00:06:01,680 --> 00:06:04,980
기본적인 활성함수를 테스크로 반주 추가 있습니다

111
00:06:04,980 --> 00:06:10,530
거미 파이썬 함수 카페 스크가 됐을 때

112
00:06:10,530 --> 00:06:13,820
그냥 활성 삶처럼 사용을 할 수도 있지만

113
00:06:13,820 --> 00:06:17,310
애들 좀 딜레이 이런 식으로 하면은

114
00:06:17,310 --> 00:06:20,040
비동기적으로 처리도 가능하고요

115
00:06:20,040 --> 00:06:21,730
그리고 플라이어 싱크

116
00:06:21,730 --> 00:06:24,330
일어나 호출을 메소드

117
00:06:24,330 --> 00:06:26,950
호출 하게 되면은 실행이 언제

118
00:06:26,950 --> 00:06:31,050
될지에 대해서 명시적으로 설정을 해서 실행도 가능하고

119
00:06:31,050 --> 00:06:43,100
그리고 콜백 처럼 다른 테스트를 실행도 가능하니

120
00:06:43,100 --> 00:06:46,440
일단 샐러리 기본적인 api 는 아까

121
00:06:46,440 --> 00:06:48,930
말씀드렸다시피 간단한데요

122
00:06:48,930 --> 00:06:53,040
이제 잘 이용하려면 이해할때 부분들이 있거든요

123
00:06:53,040 --> 00:06:56,580
그 부분에 대해서 말씀을 드리겠습니다

124
00:06:56,580 --> 00:06:59,530
일단 레이텍 별로지 인데요

125
00:06:59,530 --> 00:07:02,690
어떤 중요한 테스트를 실행을 해야 할 때

126
00:07:02,690 --> 00:07:04,310
그 태스크가 실행이 되지

127
00:07:04,310 --> 00:07:06,910
않는 경우가 있을 수 있습니다

128
00:07:06,910 --> 00:07:10,140
어떤 거냐면 이제 셀러리 워커

129
00:07:10,140 --> 00:07:12,860
테크놀로지 라는 시청 관련이 되어 있는데

130
00:07:12,860 --> 00:07:14,640
에너지는 기본적으로 워커가

131
00:07:14,640 --> 00:07:17,510
테스트를 실행하기 직전에 실행이 됩니다

132
00:07:17,510 --> 00:07:20,630
그래서 실패되는 케이스를 생각을 해보면

133
00:07:20,630 --> 00:07:23,440
테크놀로지를 실행을 하기 위해서

134
00:07:23,440 --> 00:07:26,270
에너지를 하면은 큐에서 제거가 되고

135
00:07:26,270 --> 00:07:30,460
왜 실제로 실행을 하다가 뭐 클래시로얄 발생을 하면은

136
00:07:30,460 --> 00:07:34,110
이제 이미테이션 최고가 되기 때문에

137
00:07:34,110 --> 00:07:37,950
이거를 다시 실행할 방법이 없는 거죠

138
00:07:37,950 --> 00:07:43,970
그리고 rather 일을 하게 되면은 테스크 실행이 완료되었을때

139
00:07:43,970 --> 00:07:45,370
에너지를 하게 됩니다

140
00:07:45,370 --> 00:07:50,300
실패를 하더라도 실행시 실패로 하더라도 아직은 큐에 있는

141
00:07:50,300 --> 00:07:53,890
그래서 실행 할 수가 있는 안정성이 확보가 되고요

142
00:07:53,890 --> 00:07:55,930
이따 중복으로 실행 될 수도 있기 때문에

143
00:07:55,930 --> 00:08:03,230
테스트가 아이덴트 하게 작성 되어야 합니다

144
00:08:03,230 --> 00:08:07,300
그리고 본인인증 문자가 오지 않아요

145
00:08:07,300 --> 00:08:09,020
뭐 이런 오류가 있었는데

146
00:08:09,020 --> 00:08:10,780
원인을 살펴봤을 때

147
00:08:10,780 --> 00:08:14,150
제가 외부에 sms api 를 사용을 하는데

148
00:08:14,150 --> 00:08:16,530
이게 간헐적으로 실패를 했습니다

149
00:08:16,530 --> 00:08:19,550
그래서 어떤 에러가 나오는지는 알지만

150
00:08:19,550 --> 00:08:21,460
저희가 통제할 수 없을 때

151
00:08:21,460 --> 00:08:24,320
저녁 리트라이 를 사용하고 있구요

152
00:08:24,320 --> 00:08:28,350
이런 식으로 테스트를 정리해서

153
00:08:28,350 --> 00:08:32,900
파인드트리오 셀프가 밝기 멘트로 들어오는데

154
00:08:32,900 --> 00:08:37,910
좀비 차이로 풀게되면 리트라이 를 실행을 하게 됩니다

155
00:08:37,910 --> 00:08:42,790
최근 버전에서는 이 인터페이스도 되게 간단 해져서

156
00:08:42,790 --> 00:08:46,120
이런 식으로 테스트를 할 당시에

157
00:08:46,120 --> 00:08:50,820
박 이마트로 넘겨주면 깔끔하게 정리가 되고요

158
00:08:50,820 --> 00:08:51,870
어 이따 주의할 점은

159
00:08:51,870 --> 00:08:54,590
이제 아토미 시티를 지켜주셔야 한다는 거고

160
00:08:54,590 --> 00:08:58,390
아까 말씀드렸듯이 저희는 이제 상 가능한 익셉션

161
00:08:58,390 --> 00:09:03,650
에 대해서 적용을 하고 있음

162
00:09:03,650 --> 00:09:07,910
브로커 백핸드를 새벽에 표시가

163
00:09:07,910 --> 00:09:13,520
계속 오늘 오류가 한번 있었는데요 이 경우에는 저희가

164
00:09:13,520 --> 00:09:16,030
레지스의 도 브로커로 사용을 했었는데

165
00:09:16,030 --> 00:09:18,900
피지빌리티 타이머 시간 옵션이 있는 걸 모르고

166
00:09:18,900 --> 00:09:20,510
사용을 했었습니다

167
00:09:20,510 --> 00:09:23,270
전달 후 타이머 구시 뭐냐면

168
00:09:23,270 --> 00:09:24,940
전달 후 1시간 내로

169
00:09:24,940 --> 00:09:26,470
에너지 되지 않으면

170
00:09:26,470 --> 00:09:30,250
다른 워커의 테스트를 다시 전달하는 기능인데요

171
00:09:30,250 --> 00:09:35,510
예를 들면 어떤 태스크를 뭐 빌리지

172
00:09:35,510 --> 00:09:36,950
타이머 보다 더 나중에

173
00:09:36,950 --> 00:09:41,830
실행을 하게 되면은 워커는 이거를 계속 갖고 있지만

174
00:09:41,830 --> 00:09:46,110
브로커 같은 경우에는 없어졌다고 부르고 보고

175
00:09:46,110 --> 00:09:46,920
다시 실행을 하게 되는

176
00:09:46,920 --> 00:09:49,650
그런 오지게 실행을 이 되는 거죠

177
00:09:49,650 --> 00:09:51,590
해결책으로는 비즈밸리

178
00:09:51,590 --> 00:09:53,230
타임아웃을 들리는 게

179
00:09:53,230 --> 00:09:58,580
일단 뭐 가장 간단한 테스트 작성시에 고려하기

180
00:09:58,580 --> 00:10:00,320
이런 것도 해결책이 되겠어

181
00:10:00,320 --> 00:10:09,540
그리고 아니면은 그냥 외부장치를 이용하셔도 됩니다

182
00:10:09,540 --> 00:10:13,660
효율적으로 처리하는 방법에 대한 얘기를 할 건데요

183
00:10:13,660 --> 00:10:17,020
워커가 기본적으로 자신이 처리할 수 있는 만큼

184
00:10:17,020 --> 00:10:18,780
처리하는 구조이기 때문에

185
00:10:18,780 --> 00:10:22,790
처리하는 속도가 쌓이는 속도보다 큰 조금

186
00:10:22,790 --> 00:10:25,410
작더라도 큰 문제는 되지 않습니다

187
00:10:25,410 --> 00:10:29,600
근데 이게 지속이 되면은 브로커의 불필요한 로드 가게

188
00:10:29,600 --> 00:10:36,130
실제로 필요한 작업이 진행이 되지 않을 수도 있죠

189
00:10:36,130 --> 00:10:39,110
이런 일을 좀 막기 위해서

190
00:10:39,110 --> 00:10:42,890
가장 쉽게 할 수 있는 일은 테스크 타임 있을 겁니다

191
00:10:42,890 --> 00:10:45,010
그래서 테스트가 일정 시간이 상황

192
00:10:45,010 --> 00:10:48,870
종료 되면은 이상 실행되면 종료시키는 보시고요

193
00:10:48,870 --> 00:10:51,050
글로벌하게 하나를 설정

194
00:10:51,050 --> 00:10:54,500
해 놓으면은 이제 실수로 빼먹어도

195
00:10:54,500 --> 00:10:57,340
안정적으로 실행 할 수가 있음

196
00:10:57,340 --> 00:10:58,830
그리고 레이더 및 있는데

197
00:10:58,830 --> 00:11:01,780
태스크가 2일 정도 이상 실행되지 못하도록

198
00:11:01,780 --> 00:11:02,710
설정할 수가 있고요

199
00:11:02,710 --> 00:11:07,870
아 그래서 어 이거 이 얘기는

200
00:11:07,870 --> 00:11:11,090
조금 더 나중에 진행을 할 건데요

201
00:11:11,090 --> 00:11:13,630
간단하게 이렇게 실행할 수가 있습니다

202
00:11:13,630 --> 00:11:17,420
기본적으로 큰 거는 씨를 이용을 해야 하고요

203
00:11:17,420 --> 00:11:22,620
샐러리는 이런 식으로 서류를 실행을 할 때

204
00:11:22,620 --> 00:11:24,400
어 P 옵션을 주면은

205
00:11:24,400 --> 00:11:28,720
어떤 워커 프로에서 실행을 할지 를

206
00:11:28,720 --> 00:11:29,660
설정할 수가 있습니다

207
00:11:29,660 --> 00:11:32,820
그리고 씨 옥션 컴앤씨 를 설정할 수가 있죠

208
00:11:32,820 --> 00:11:37,080
재워 커플은 결국에 컨퍼런스를 어떻게 구현하는 야

209
00:11:37,080 --> 00:11:38,760
에 대한 옵션이고

210
00:11:38,760 --> 00:11:41,110
여기에 뭐 프리포크 집은 직원들

211
00:11:41,110 --> 00:11:43,860
solo 이런 옵션들을 줄 수가 있습니다

212
00:11:43,860 --> 00:11:48,510
좀 더 자세히 나중에 설명을 할 거고요

213
00:11:48,510 --> 00:11:54,220
아 그리고 이 워커와 일단 무관하게 커플과 무관하게 프리패치

214
00:11:54,220 --> 00:12:00,500
일하는 기능을 이게 헷갈리는데 이 부분을 이해를 하고

215
00:12:00,500 --> 00:12:02,390
넘어 가려고 합니다

216
00:12:02,390 --> 00:12:06,740
필터 7일 메이슨 샐러리 문서에서는

217
00:12:06,740 --> 00:12:09,440
이런 식으로 나와 있긴 한데

218
00:12:09,440 --> 00:12:12,630
놀러지 되지 않은 메시지에 개수를

219
00:12:12,630 --> 00:12:17,060
워커가 얼마나 갖고 있을 수 있냐 에 대한 개념입니다

220
00:12:17,060 --> 00:12:19,430
그래서 워커 pretty

221
00:12:19,430 --> 00:12:22,670
많은 거를 설정을 할 수가 있는데

222
00:12:22,670 --> 00:12:24,800
이게 그러면 이게 멀티플라이어

223
00:12:24,800 --> 00:12:27,060
곱하기 컨퍼런스가 프리파라

224
00:12:27,060 --> 00:12:30,420
치리 및 새로 설정이 되게 됩니다

225
00:12:30,420 --> 00:12:33,460
그리고 약간 직관적이지 않을 수도 있는데

226
00:12:33,460 --> 00:12:37,960
뭐 프리패치 멀티플라이어 영어로 설정 하게 되면은 2워커

227
00:12:37,960 --> 00:12:44,100
프리패치 멀티플라이어 에 대해서 명확히 설정 하지 않아서

228
00:12:44,100 --> 00:12:47,260
리밋을 걸지 않고

229
00:12:47,260 --> 00:12:50,280
메모리 휘성 고려하지 않고

230
00:12:50,280 --> 00:12:55,650
작업을 실행하게 갖게 된다는 안 되는 결과가 있습니다

231
00:12:55,650 --> 00:12:59,970
그래서 이 부분에 대해서 조금 더 예시를 들어 설명하자면

232
00:12:59,970 --> 00:13:01,670
컨커런시 가이힌 워커가 하나 있고

233
00:13:01,670 --> 00:13:04,300
컨퍼런스가 1인 뭐가 있고

234
00:13:04,300 --> 00:13:07,600
메세지가 싸우고 있다고 생각을 해 봅시다

235
00:13:07,600 --> 00:13:13,130
이때 워컵 프리터치 멀티플레이어를 1로 설정하고

236
00:13:13,130 --> 00:13:16,290
엑스레이 쓸 펄스로 하게 되면은

237
00:13:16,290 --> 00:13:23,710
이제 테스크 워커에서 받으면은 테스트를 실행하기 직전에

238
00:13:23,710 --> 00:13:26,170
처음 테스트들은 테크놀로지를 하겠죠

239
00:13:26,170 --> 00:13:29,350
그러면은 그리고 프리패치 리밋이

240
00:13:29,350 --> 00:13:34,930
그때 적용이 됩니다 이 놀러지 땐 메세지를 대회 하고

241
00:13:34,930 --> 00:13:41,000
그래서 왼쪽 워커 같은 경우에는 두 개의 컨커런시

242
00:13:41,000 --> 00:13:42,560
멀티플레이어가 일이니까

243
00:13:42,560 --> 00:13:45,870
두 개의 프리패치 메시지를 갖고 있고요

244
00:13:45,870 --> 00:13:47,200
프리패치 하고 있고

245
00:13:47,200 --> 00:13:50,440
그리고 오른쪽 워커힐 같은 경우

246
00:13:50,440 --> 00:14:03,710
하나의 메시지를 프리패치 자게 됩니다

247
00:14:03,710 --> 00:14:12,670
네 그렇고요

248
00:14:12,670 --> 00:14:14,660
아 네 그래서 이 테스트를

249
00:14:14,660 --> 00:14:18,370
어떻게 쓸 수 있냐면 이 옵션을 어떻게 쓸 수 있냐면

250
00:14:18,370 --> 00:14:20,710
진 태스크에 대해서는

251
00:14:20,710 --> 00:14:23,090
이런 식으로 실행을 할 수가 있고요

252
00:14:23,090 --> 00:14:25,280
워터페스티벌 2일로

253
00:14:25,280 --> 00:14:30,650
설정을 하면은 긴 테스트가 긴 태스크

254
00:14:30,650 --> 00:14:33,170
위에 짧은 테스트들이 쌓여서

255
00:14:33,170 --> 00:14:35,880
그 짧은 테스트들이 불필요하게 실행되지 않는

256
00:14:35,880 --> 00:14:37,550
일을 막을 수가 있습니다

257
00:14:37,550 --> 00:14:39,280
그래서 워커 프리패치

258
00:14:39,280 --> 00:14:43,660
멀티플레이어를 1로 설정하실 수 있고요

259
00:14:43,660 --> 00:14:48,310
그리고 엑스레이 트롤을 설정 하게 되면

260
00:14:48,310 --> 00:14:58,410
이런 식으로 실행 중인 테스트만 같이 하게 됩니다

261
00:14:58,410 --> 00:15:02,480
그리고 그 짧은 테스트들을 경우 먹고

262
00:15:02,480 --> 00:15:06,470
프리패치 멀티플라이어 따라 프리패치란 하는데도

263
00:15:06,470 --> 00:15:09,710
결국 네트워크를 타기 때문에

264
00:15:09,710 --> 00:15:12,460
그 마크 패치 멀티플레이어를 높여

265
00:15:12,460 --> 00:15:16,050
주면은 더 테스트를 빠르게 실행 할 수가 있습니다

266
00:15:16,050 --> 00:15:21,060
그래서 이 옵션을 적극적으로 활용할 시려면 롱 길고

267
00:15:21,060 --> 00:15:26,670
짧은 테스트를 9분하여 샤워를 지정하실 수가 있고요

268
00:15:26,670 --> 00:15:29,000
그리고 아까 말씀드렸던 프리포크

269
00:15:29,000 --> 00:15:31,820
커피에 대해서 자세히 설명을 드리자면

270
00:15:31,820 --> 00:15:35,290
멀티프로세싱 으로 구현이 되어 있고

271
00:15:35,290 --> 00:15:37,510
컨커런시 NO 실행한다면

272
00:15:37,510 --> 00:15:42,700
한 개 마스터프로 엔젤사이트 프로세스 실행해 됩니다

273
00:15:42,700 --> 00:15:45,640
마스터에서 이제 테스트를 분배하고

274
00:15:45,640 --> 00:15:50,850
실제 테스트는 차에 대해서 처리하는 형태가 되고요

275
00:15:50,850 --> 00:15:57,140
여기서 오피옵션 일하고 있는데 이 마스터에서 차일드 차일드

276
00:15:57,140 --> 00:15:59,280
프로세스로 테스트를 전달할때

277
00:15:59,280 --> 00:16:00,590
기본적으로는 파이버가

278
00:16:00,590 --> 00:16:03,390
허용하는 만큼의 메시지를 전달할 되는데

279
00:16:03,390 --> 00:16:05,580
여기 오페라 옵션을 주게 되면

280
00:16:05,580 --> 00:16:09,880
실행 가능한 경우에만 메시지를 전달 하게 됩니다

281
00:16:09,880 --> 00:16:13,060
긴 작업과 아

282
00:16:13,060 --> 00:16:16,260
그리고 프리파라 치리 밑과 오피옵션

283
00:16:16,260 --> 00:16:17,560
헷갈릴 수가 있는데

284
00:16:17,560 --> 00:16:18,910
프리파라 치리 미선

285
00:16:18,910 --> 00:16:22,030
브로커에서 워커로 가는

286
00:16:22,030 --> 00:16:24,260
분배하는 보직을 통제하는 거고요

287
00:16:24,260 --> 00:16:27,540
오페라 같은 경우는 마스터에서

288
00:16:27,540 --> 00:16:34,280
그 차일드 프로세스로 메세지를 분비하는 로직을 컨트롤합니다

289
00:16:34,280 --> 00:16:37,190
진 작업과 짧은 작업이 섞여 있을 때는 이 업체

290
00:16:37,190 --> 00:16:39,080
옵션을 주게 되면은

291
00:16:39,080 --> 00:16:47,740
성능향상과 예상 가능한 동작을 기대할 수가 있고요

292
00:16:47,740 --> 00:16:51,750
실생활 예시로 한줄서기 일을 하게 되면 내일 좀 화장실 있나

293
00:16:51,750 --> 00:16:53,090
한번 표를 살 때

294
00:16:53,090 --> 00:16:54,350
한줄소개 하게 되면은

295
00:16:54,350 --> 00:16:59,410
줄이 더 빨리 줄어들게 되는 것과 같은 원리다

296
00:16:59,410 --> 00:17:01,740
그리고 gently 벤틸레이티드

297
00:17:01,740 --> 00:17:04,360
뭐 커플 같은 경우에는 아유 바운드 테스트

298
00:17:04,360 --> 00:17:07,840
스 를 실행하면 더 빠르게 실행 하실 수 있고요

299
00:17:07,840 --> 00:17:13,010
그리고 스레드 기반으로 구현이 되어 있고

300
00:17:13,010 --> 00:17:17,310
그래서 기반으로 그리고 컨퍼런스에는 이제 몇 100개

301
00:17:17,310 --> 00:17:19,530
1,000개 이런식으로도 설정이 가능합니다

302
00:17:19,530 --> 00:17:21,200
뭐 포크는 cpu 개수

303
00:17:21,200 --> 00:17:23,910
에 따라서 어느 정도 설정이 되기 때문에

304
00:17:23,910 --> 00:17:28,650
그 정도로 많이 설정이 대신 못 하고요

305
00:17:28,650 --> 00:17:32,810
그래서 앞에 말씀드렸던 부분들을 좀 고려를 하셔서

306
00:17:32,810 --> 00:17:36,240
워커 옵션 같은 거를 주실 수 있는 걸 고려를 하셔서

307
00:17:36,240 --> 00:17:40,510
이제 작업의 성질에 따라 적절하게 다르게 처리하셔야 I5

308
00:17:40,510 --> 00:17:41,350
CPU

309
00:17:41,350 --> 00:17:46,790
그럼 뭐 메모리를 많이 필요하는 작업이라면 그런 것도 고려하시고

310
00:17:46,790 --> 00:17:51,690
작업의 중요도 라든지 작업이 수행되는 시간

311
00:17:51,690 --> 00:17:57,010
그래 아까 말했던 프리패치 워커 패치 와 관련 있겠죠

312
00:17:57,010 --> 00:17:58,670
그리고 실행해 빈도

313
00:17:58,670 --> 00:18:03,860
이런 것들을 고려를 하셔서 표를 잘 나누고

314
00:18:03,860 --> 00:18:08,840
작업을 잘 분배해 하시면

315
00:18:08,840 --> 00:18:11,610
배포하기 에 대한 내용 인데요

316
00:18:11,610 --> 00:18:14,750
저 같은 경우에는 때문에 세션

317
00:18:14,750 --> 00:18:17,070
일단 기본적으로 할 수가 있고

318
00:18:17,070 --> 00:18:18,740
저희 같은 경우에는 수퍼바이저

319
00:18:18,740 --> 00:18:24,110
뒤를 이용해서 배포를 했습니다

320
00:18:24,110 --> 00:18:27,940
그리고 원래 처음에는 가장 심플하게 는 스케일링

321
00:18:27,940 --> 00:18:32,010
업하는 구조로 구현을 했었고요

322
00:18:32,010 --> 00:18:36,090
그리고 지금은 뭐 차근차근 컨테이너

323
00:18:36,090 --> 00:18:39,780
라이차이 G.skill 탈 수 있도록

324
00:18:39,780 --> 00:18:42,000
바꿔 가고 있는데요

325
00:18:42,000 --> 00:18:44,650
그때 있었던 이유 중에 하나가

326
00:18:44,650 --> 00:18:46,950
저희가 왜 그림이 있을 사용하는데

327
00:18:46,950 --> 00:18:51,990
made 미시란 옵션이 워커힐로 관리가 된다는 거를

328
00:18:51,990 --> 00:18:53,410
그때 알게 되었습니다

329
00:18:53,410 --> 00:18:56,910
그래서 워커 별로 관리가 된다는 거는

330
00:18:56,910 --> 00:19:01,750
일본에 60개의 테스트를 실행하도록 제안을 해 놨는데

331
00:19:01,750 --> 00:19:05,580
워커를 두 개를 띄우게 되면은 이제 120개가 1분

332
00:19:05,580 --> 00:19:08,930
실행 되는 현상이 발생하는 거죠

333
00:19:08,930 --> 00:19:10,280
그래서 저희가 이거를

334
00:19:10,280 --> 00:19:14,150
커스텀 하기 위해서 코드를 좀 살펴 같습니다

335
00:19:14,150 --> 00:19:18,010
그래서 샐러리 에서 어떻게 돼

336
00:19:18,010 --> 00:19:21,060
임이슬 구형 하나 봤는데

337
00:19:21,060 --> 00:19:26,070
이제 테스트 익스큐션 스토리지를 관리하는 부분이 있고

338
00:19:26,070 --> 00:19:28,670
그리고 태스크가 어떻게 메세지를 컨슘

339
00:19:28,670 --> 00:19:30,990
할지에 대한 컨슈머가 있고

340
00:19:30,990 --> 00:19:35,180
그리고 코브라 셀러리가 이용하는 메시지는

341
00:19:35,180 --> 00:19:40,770
라이브러리가 있는데 이 풍부해서 어

342
00:19:40,770 --> 00:19:43,720
토큰버킷 싫어하는 거를 이용해서

343
00:19:43,720 --> 00:19:48,520
레이디 미팅을 구현하고 있다는 걸 알게 되었습니다

344
00:19:48,520 --> 00:19:49,610
이토 컨버케이션 게

345
00:19:49,610 --> 00:19:52,150
뭐냐면은 토큰이란 거는

346
00:19:52,150 --> 00:19:56,150
실행할 수 있는 권한에 해당되구요

347
00:19:56,150 --> 00:20:02,920
테스트는 일로 동일하다고 일단은 고양이 되어있었습니다

348
00:20:02,920 --> 00:20:06,230
그래 버켓에 토큰이 있고

349
00:20:06,230 --> 00:20:09,960
토큰 이 시간에 따라 일정하게 벗겨서 채워 줍니다

350
00:20:09,960 --> 00:20:12,300
그리고 어느 정도

351
00:20:12,300 --> 00:20:19,270
리밋이 지나면 포켓이 더이상 채워지지가 않게 되고요

352
00:20:19,270 --> 00:20:23,830
그래서 버켓 안에 테스트를 실행을 했을 때

353
00:20:23,830 --> 00:20:28,100
버켓 안에 충분한 토큰 있으면은 이 토큰을 빼고

354
00:20:28,100 --> 00:20:29,830
테스크를 실행을 하게 되어

355
00:20:29,830 --> 00:20:33,710
그러면 포켓 안에 토큰이 하나 줄어들겠죠

356
00:20:33,710 --> 00:20:37,520
그리고 더 폐단에 충분한 토큰이 없으면

357
00:20:37,520 --> 00:20:40,630
시간이 지나서 토큰이 채워질 때까지 기다렸다가

358
00:20:40,630 --> 00:20:45,800
다시 시도하는 식으로 편히 시도 하는 게임

359
00:20:45,800 --> 00:20:47,980
포켓몬 밖에 시간 개념이 거야

360
00:20:47,980 --> 00:20:49,240
그래서 샐러리 해서 이거를

361
00:20:49,240 --> 00:20:53,080
컨수머 에서는 버켓을 테스크

362
00:20:53,080 --> 00:20:58,840
에 해당하는 스케줄 생성 가지고 생성하는 로직과 보시면

363
00:20:58,840 --> 00:21:01,030
리밋이 정의되어 있을 경우에

364
00:21:01,030 --> 00:21:02,610
조금 막혀서 생성 하잖아요

365
00:21:02,610 --> 00:21:05,670
그래서 이런 식으로 생성 안 오실까

366
00:21:05,670 --> 00:21:08,450
그리고 이거 캔슬 이용해서

367
00:21:08,450 --> 00:21:11,150
내가 테스크 실행할 수 있냐

368
00:21:11,150 --> 00:21:14,240
내가 토큰을 빼낼 수 있냐 노래 판단하고

369
00:21:14,240 --> 00:21:18,810
그리고 어 만약에 할 수 없다면

370
00:21:18,810 --> 00:21:24,140
얼마나 시간이 지나서 뺄 수 있어야 뺄 수 있는지 해서

371
00:21:24,140 --> 00:21:29,140
물어보는 그런 부분이 있어 토큰 밝혔으니

372
00:21:29,140 --> 00:21:31,690
부분을 구현을 하고 있었습니다

373
00:21:31,690 --> 00:21:33,230
그래서 이 토큰버킷 팬컨

374
00:21:33,230 --> 00:21:38,270
송과 타임 부분에 보면은 개 토큰 쓰라고 했는데

375
00:21:38,270 --> 00:21:45,580
이렇게 토큰스 메세지를 보게 되면은 토큰 버킷이란 게

376
00:21:45,580 --> 00:21:48,660
결국에는 시간에 따라서 채워지는 건데

377
00:21:48,660 --> 00:21:53,810
실제로 시간에 대해서 채워지도록 하는 멤버변수가 있는

378
00:21:53,810 --> 00:21:57,000
토큰 이라는 변수가 있다기보다는

379
00:21:57,000 --> 00:22:03,570
그 저번에 토큰 저번에 토큰을 확인했을 때

380
00:22:03,570 --> 00:22:06,500
제 시간에 비해서 몇 개가 들어 놨냐 를 확인해서

381
00:22:06,500 --> 00:22:08,720
그때그때 이 함수를 호출할 때마다

382
00:22:08,720 --> 00:22:14,400
토큰 업데이트 해 주는 방식이었습니다

383
00:22:14,400 --> 00:22:19,650
그래서 저희는 일단 이 부분을 레빗으로

384
00:22:19,650 --> 00:22:22,430
구현을 대체 해야겠다는 생각을 했고

385
00:22:22,430 --> 00:22:27,790
왜냐면 워커가 이제 로컬 하게 저 토큰법 캔슬 갖고 있어서

386
00:22:27,790 --> 00:22:30,660
결국에 워커 별로 실행이 되는 거니까

387
00:22:30,660 --> 00:22:34,080
레디스를 이용을 해서 하려고 했고요

388
00:22:34,080 --> 00:22:37,360
그리고 큰 거는 씨를 생각을 해서

389
00:22:37,360 --> 00:22:45,190
스크립트를 이용해서 캔슬 생성하는 토큰 버켓에 아까

390
00:22:45,190 --> 00:22:54,060
그 개 토큰스왑 비슷한 로직을 구현을 했습니다

391
00:22:54,060 --> 00:22:57,610
그래서 레이디스토커 마켓이란 거를 정리를 하고

392
00:22:57,610 --> 00:23:04,810
왜 디스컴 포켓에서 아까 그 구현한 토큰버킷 매직 3

393
00:23:04,810 --> 00:23:07,850
영화 토큰버킷 사용하고

394
00:23:07,850 --> 00:23:12,670
그리고 이 컨슈머를 상속을 받아서 버켓

395
00:23:12,670 --> 00:23:20,660
테스크 메소드를 오버라이드 하는 방식으로 구현을 수정하겠습니다

396
00:23:20,660 --> 00:23:22,990
가장 하단에 있는 거는

397
00:23:22,990 --> 00:23:28,110
워커힐 컨슈머를 설정할 수 있는 기능이 뭐야

398
00:23:28,110 --> 00:23:29,390
샐러리는 이런 식으로

399
00:23:29,390 --> 00:23:32,280
좀 컴퍼넌트가 상속하고

400
00:23:32,280 --> 00:23:35,590
수정할 수 있도록 되어 있습니다

401
00:23:35,590 --> 00:23:39,810
그리고 오른쪽에 90067 타임도 훈련을 했는데

402
00:23:39,810 --> 00:23:45,070
저희가 아무래도 저희 유스케이스 에서는 좀 빠르게

403
00:23:45,070 --> 00:23:49,020
나는 작업을 필터링 미팅 하는 거다 보니까

404
00:23:49,020 --> 00:23:53,450
굳이 네트워크를 레지스트란 네트워크를 다시 타게 하는 것보다는

405
00:23:53,450 --> 00:23:56,520
그냥 적절한 시간

406
00:23:56,520 --> 00:24:01,100
채워지는 시간을 그냥 이용해서 부정적으로 기다렸다가

407
00:24:01,100 --> 00:24:05,510
다시 실행 구현을 했습니다

408
00:24:05,510 --> 00:24:07,370
딴 이상종료 됐고요

409
00:24:07,370 --> 00:24:14,760
그리고 제 마지막으로 자기가 제가 하고 싶은 말씀은

410
00:24:14,760 --> 00:24:17,450
제가 이제 채용을 하고 있는데

411
00:24:17,450 --> 00:24:19,810
많이 지원해 주시면 좋겠고

412
00:24:19,810 --> 00:24:27,540
그리고 내일 열린 점심도 진행을 하니까 참석해 주시면 감사하겠습니다

413
00:24:27,540 --> 00:24:28,710
이상입니다
