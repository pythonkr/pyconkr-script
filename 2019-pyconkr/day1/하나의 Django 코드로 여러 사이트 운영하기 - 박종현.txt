https://youtu.be/b2BFxbkXkKY

-(사회자) : 곧 발표가 시작될 예정이니 빈자리를 채워서 앉아주세요. 거의 만석처럼 보이지만 가운데에 빈자리가 많아서 서계신 분 없이 빈자리 채워서 앉아주시면 감사하겠습니다.
홍보 하나 드리면 지금 파이콘 굿즈를 받아보시지 못한 분께는 2층에서 굿즈 배부가 진행되고 있으니 2층에서 받아주시면 감사하겠습니다.
안녕하세요.
이번 시간에는 박종현 님께서 하나의 Django 코드로 여러 사이트 운영하기 주제로 발표해 주시겠습니다. 발표자 모시겠습니다.
-(박수)
-(박종현) : 안녕하세요.
만나서 반갑습니다.
저는 박종현이라고 하고, 소개해 주신 대로 하나의 Django 코드로 여러 사이트 운영하기를 발표하겠습니다. 작년에는 떨어졌는데 이번에는 됐는데 많은 분들이 오셔서 영광스럽습니다. 시간이 없으니 진행하겠습니다. 저는 래블업 주식회사에서 일하고 있고요. 4년 된 회사이고 구글에서 한 Polymer/LitElement 도구를 이용해서 작업을 주로 하고 있습니다. 저희 회사에서 운영하는 오픈소스 프로젝트에도 참여하고 있습니다.
오늘의 내용은 제목과 마찬가지고 주로 뭔가를 분리하는 내용이 될 거예요. 사이트를 하나의 사이트로 여러 사이트를 운영한다는 것은 사이트별로 사용자가 접속을 했을 때 그 사이트에 맞는 리소스나 URL을 찾아서 반환을 해야 되는 거니까 그런 거를 어떻게 저희가 분리를 했는지 그 노하우에 대해서 말씀을 드리려고 합니다. 여러 사이트 운영이 필요한 경우에는 기본 뼈대는 동일한데 다른 레이아웃이나 다른 URL이나 다른 콘텐츠를 제공해야 될 필요가 있을 때 최소한의 개발 시간과 운영 시간을 들여서 여러 개의 사이트를 운영하는 그런 식의 시나리오가 될 것이고 저희 같은 경우에는 예전에 대학별로 교육용 서비스를 제공한 적이 있는데 그 경우에 어떤 A대학에 공급할 때랑 B대학에 공급할 때 학교 로고도 달라야 되고 강의 자체도 달라야 되고 그런 요구가 있어서 이런 시스템을 도입을 하게 되었습니다.
예를 들어서 A 사이트에 있는 학생이 B의 교수님이 작성한 강의 자료를 볼 수 있으면 안 되니까, 그러면 문제가 되니까 그런 필요에 의해서 이런 형태의 구조를 만들게 되었고요.
제가 이 발표를 준비하면서 간단한 거를 만들었는데 이 데모앱은 보시면.. 아이고.. 다른 건 아주 간단한 Django앱이고요. 멀티사이트 프로젝트라는 거고 여기서 유일한 앱은 Entry인데 많이 튜토리얼에서 보셨겠지만 자체적인 모델이나 뷰나 템플릿을 가지고 있고요. 실제로 내용은 거의 없습니다. 베이스 템플릿이 하나 있죠.
이런 구조에서 여기서 눈여겨 볼 것은 over load라는 디렉터리를 만들어서 여기에 모든 사이트 설정이나 모든 거를 몰아넣는 형식으로 했는데 여기에 모여 있고 여기에 모여 있는 사이트별 설정을 사용자가 하는 주소별로 해서 하는 그런 내용이 주가 될 것입니다.
그리고 이 데모 사이트는 여기 주소에 있거든요. 혹시 끝나고 관심이 있으시면 방문을 해 주시면 될 것 같고요.
먼저 가장 먼저 해야 될 거는 콘텐츠 분리가 될 것인데 아까 대학별로 말씀드린 강의 자료가 여기에 해당이 되고 강의 자료를 어떤 사이트에 어떤 식으로 보여줄 것인지에 관한 문제인데 Django가 잘 지원하고 있습니다. Django가 처음 시작할 때는 어떤 신문사에서 같은 내용을 다른 사이트에 퍼블리싱하기 위해서 Django를 만들었다는 내용이 있는데 이것 자체가 디폴트로 설정이 되어 있을 거고요. 그 이후로는 퍼블리싱이라는 측면보다는 웹서버를 운영하는 그런 프레임워크 성격이 강해지면서 디폴트에서 빠졌는데 실제로 디폴트로는 사용이 안 되고 사용하려면 몇 가지 설정을 해줘야 됩니다.
sites 프레임워크라는 것은 모델인데 간단한데 두 개 다 그런 거고, 사이트 점 컴 이렇게 되고 네임은 사람이 읽을 수 있는 그런 필드가 될 것입니다.
이러한 모델을 이미 제공을 하고 있기 때문에 예를 들어서 어떤 강의 자료 이런 거를 만들었을 때 site라는 관계를 이용해서 연결을 할 수 있습니다. 원과 투로 연결을 동시에 하게 되면 이 강의 자료는 site1, site2에 보여야 되고 site3에는 보이면 안 되겠죠.
만약에 한 곳에만 보이게 하고 싶으면 포링키로 하면 되겠죠.
저희는 여러 사이트에 하게 하기 위해서 Entry 필드를 지원했습니다.
Entry라는 거로 접근을 할 수 있고 여기서 이 사이트를 통해서 사이트 모델을 사용할 수가 있는데 여기서 모델 매니저를 별도로 설정하면 편하게 쓸 수 있습니다.
기본적으로는 Entry. on_ 쓰시겠죠. 그런데 sites 프레임워크가 활성화가 되면 특수한 오브젝트 매니저를 제공해서 이거를 온 사이트라는 필드로 설정을 하게 되면 온 엔트리 점 온 사이트 커리가 가능해져요. 그러면 전체 엔트리를 대상으로 돌려주는 게 아니고 사용자가 접속한 그 사이트에 속한 엔트리만 돌리게 됩니다.
기본의 오브젝트 커리를 사용해 주고 싶으면 별도로 해줘야 됩니다. 아무 것도 설정이 돼 있지 않으면 오브젝트 매니저가 붙게 되면 이게 별도로 지정을 해 주지 않으면 사용을 할 수가 없거든요.
이런 식으로 모델을 작성해서 데이터를 분리할 수가 있고 뷰에서는 예를 들어 아까 보셨던 것처럼 온 사이트 커리를 통해서 이 사이트에 존재하는 이 타이틀의 Entry만 불러올 수 있게 됩니다. 이런 식으로 모델을 불러오고, 필요하다면 이런 식으로 탈 수도 있겠죠.
사이트의 이름을 받아서 도메인을 받아서 탈 수도 있을 겁니다.
아까 말씀드렸듯이 1.6버전 이후에는 기본적으로 활성화가 안 되어 있습니다. 활성화하기 위해서는 별로 어렵지는 않은데 Django 점 컨트리브 점 사이트를 설정해 주시고요.
처음에 sites 프레임워크를 활성화하면 이것이 활성화가 되기 때문에 나는 기본적으로 이 사이트를 사용하겠다, 라는 설정이 여기에 들어가는 것이고요.
여기서 불려오는 것이 달라지게 됩니다.
그래서 이게 어쨌든 모델이기 때문에 이거를 활성화한 후에는 마이그러네이션을 해줘야 되고요. 이것이 잘 된 것을 볼 수가 있습니다.
다음으로 할 일은 여러 사이트를 지원해야 되니까 사이트를 수동으로 만들어줘야 돼요.
데모앱에서 사용할 거는 일단 사이트 원 점 마이사이트 점 컴이라는 실제 도메인, 프로덕션에서 사용할 도메인 두 개를 설정을 할 거고요.
그런데 이게 로컬에서 개발할 때 이 주소를 쓸 수가 없잖아요.
그래서 로컬에서는 사이트 원 점 로컬 사이트 투 점 로컬이라는 주소를 포스트파일을 설정을 통해서 접속을 하게 해놓고 이것을 어떤 중간 단계에서 퍼블릭 도메인, 실제 도메인으로 바꿔서 사용할 예정입니다. 이 두개가 동일하다고 보면 되고, DB에는 첫 번째를 설정을 해야 되죠.
사이트 원 점 마이사이트 점 컴으로 도메인을 바꿔서 저장하고, 두 번째 사이트는 이렇게 생성하게 되면 사이트 두 개의 모델이 생기게 되는 거고요.
이렇게 해서 사이트도 생성을 하고 모델 수준에서 사이트별로 엔트리를 커리할 수 있는 콘텐츠를 분리할 수 있는데 이거를 실제로 적용하기 위해서는 몇 가지 작업이 필요합니다. 아까 사이트 아이디를 보셨는데 그것을 통해서 설정할 수 있는데 이것이 여러 개가 있으면 어떻게 바꿔줘야 할 필요가 있습니다.
그 일을 하기 위해서 장고의 미들웨어를 사용하게 됐는데 어떤 유저가 요청을 보내면 그 요청이 뷰에 들어가기 전에 가로 채서 뭔가 작업을 할 수 있고요. 뷰에서 어떤 응답이 들어갈 때 응답을 가로 채서 사용자에게 도달하기 전에 어떤 작업을 할 수 있습니다.
저희 같은 경우에는 첫 번째만 사용할 거고요. 기본적으로 미들웨어의 세션이나 인증 혹은 CSRL 토큰을 작업해 주는 기본적인 것이 붙어있습니다.
설정파일에 보면 미들웨어라는 리스트, 키플로가 설정된 것이 있고 여기에서 하나를 설정할 것입니다. 여기서 사이트 아이디를 바꾸는 작업을 하게 될 것이고요.
그 밑에 있는 것은 Django에서 지원하는 건데 어퍼닝 기능 같은 거죠. 이런 식의 사이트를 리퀘스트 점 사이트 점 도메인이라는 걸로 사용할 수 있습니다. 두 가지를 추가하면 사이트 아이디를 변경시킬 수가 있죠.
미들웨어는 크게 콜이라는 스페셜 메서드를 정리해야 되고요.
만약에 뭔가를 할 필요가 있을 때는 그렇게 하면 될 것이고 여기에 리스펀스가 셀프 점 겟 리스펀스가 이 아래 위로 뭔가를 해 주게 된다면 요청을 보내고 나서 뷰에 들어가기 전 그리고 뷰에서 사용자로 들어가기 전까지 어떤 작업들을 수행할 수 있습니다.
저희는 사이트 아이디를 다이나믹하게 설정할 거니까 이쪽 부분에서 뭔가를 해야 되겠죠.
여기서 크게 별 거는 없는데 일단 핵심은 이 부분이에요.
이 사이트라는 객체에서 도메인은 사용자가 실제로 접속한 URL이 될 것이고 site1이나 site2가 되는데 이거를 커리를 해서 아이디를 이 사이트로 설정하는 것이죠. 그러면 사이트가 사용자의 도메인에 따라서 바뀌게 되겠지요.
그런데 한 가지 문제는 실제 도메인을 저장할 때 프로덕션에서 사용할 도메인을 저장했는데 로컬 도메인이랑 안 맞아서 위에 있는 게 로컬 도메인을 매핑을 통해서 프로덕션용으로 바꿔주는 게 이 작업이죠.
도메인을 바꿔주는 그런 추가 작업을 저희가 해줬고요.
결론적으로 여기서 사이트 아이디를 바꿔줘서 사이트별 설정이나 커리를 할 수 있게 됩니다.
만약에 레이아웃은 변하지 않고 똑같고 단지 콘텐츠만 분리하고 싶다면 여기서 나가셔도 되고요.
끝났습니다.
그런데 만약에 설정이나 기타 다른 리소스를 좀 더 오버라이드 할 필요가 있다. 지금은 콘텐츠만 분리됐지 이미지를 다르게 쓰는 건 없잖아요. 그럴 경우에는 좀 더 작업이 필요합니다. 미들웨어에서 더 할 수 있는 건 설정이나 URL을 바꿀 수가 있는데요.
설정 같은 경우 그 방식은 다 비슷해요, 이제부터는.
지금 저희가 over load라는 폴더의 디렉터리에 모든 거를 다 집어넣는다고 했는데 기본은 사이트 도메인 이름으로 설정된 디렉터리를 생성합니다.
여기서 닷을 대시로 바꿨는데 이거는 파이썬 때 문제가 될 것 같아서 바꾼 거고 site2로 바꾼 거는 대시 컴이라는 사이트 아래에 다 들어가게 될 것입니다.
여기도 세팅을 site2 디렉터리 안에 집어넣고요. 미들웨어에서 더 해 주는 것은 이 부분이죠.
여기에 있는 세팅 파일을 다이나믹하게 임포트 해서 원하는 빌드에 대해서는 설정을 오버라이드를 여기서 하는 거죠.
기존에 디폴트 설정으로 가지고 있던 필드들이 여기서 오버로드에 폴더 아래에 있는 셋팅 파일의 밑으로 들어가게 되는 것입니다.
그리고 위에는 아까 점을 대시로 바꿔서 디렉터리 매칭을 하기 위해서 하는 것이고요.
핵심은 뭐냐면 over load안에 있는 특정 사이트 디렉터리 안에 파일을 찾아서 그 안에 있는 내용을 디폴트 설정을 덮어쓰게 되는 그런 식의 흐름이 될 것입니다.
URL도 비슷한데요.
URL은 역시 site2 폴더 안에 URL 닷 파이라는 곳에 URL 설정을 담아놓을 수 있고 마찬가지로 미들웨어에서 오버로드 점 사이트 패스 URL을 불러와서 그 안에 있는 URL 설정을 기본에 덮어쓰게 됩니다.
이런 식으로 해서 미들웨어에서는 사이트 아이디를 다이내믹하게 설정하고 설정 셋팅 파이파이 중에서 내가 오버로드하고 싶은 거를 어프로치하고 URL의 기본설정에 덮어쓰는 그런 작업을 통해서 사이트별로 다른 설정과 다른 URL을 사용할 수 있게 됩니다.
그다음으로는 리소스 관련인데요.
템플릿과 Static Finder을 어떻게 다룰 것인가.
어떤 로고나 이미지 같은 것을 사이트별로 다르게 사용하고 싶은데 그런 게 남았는데 그거는 각각의 다른 커스텀 로더나 이런 거를 추가해서 해결할 수가 있습니다.
템플릿 같은 경우에는 Django에서 템플릿 로더라는 어떤 모듈을 추가해서 템플릿을 찾게 됩니다.
Django 설정에 템플릿츠라는 것을 보시게 되면 로더가 있는데 기본적으로 이 두 개가 포함이 되어서 파이 시스템에서 거기에 있는 설정에 따라서 거기에 있는 것을 불러오고 추가적으로 각 앱 별로 템플릿이라는 폴더가 있는데 거기에 있는 거를 불러오는 두 가지가 디폴트로 설정이 돼 있는데 추가를 하게 되면 명시적으로 써줘야 됩니다. 비어 있으면 자동으로 저 두 개를 쓰게 되고요. 그런데 저희는 여기서 그 두 가지 템플릿 모드가 작동하기 전에 사이트별로 템플릿을 로더할 수 있는 커스텀 템플릿 로더를 만들어서 껴 넣는 거죠. 여기서 먼저 찾아보고, 빨간 부분으로 마킹된 부분에서 찾아보고 없으면 파이 시스템과 앱 로더, 앱 디렉터리에 있는 것을 로드하는 방식으로 템플릿을 찾게 될 것입니다.
여기는 아까와 마찬가지로 site2 안에 템플릿이라는 경로를 만들고 그 안에, 여기에 있는 Entry 파일인데 집어넣죠. Entry 점 위쪽에 템플릿츠 하위에 똑같은 걸로 있죠. 오버로드에 있다는 것만 제외하면 똑같은 상대경로를 가진 어떤 것을 저 오버로드 안에 집어넣었고요. 저거를 로드하면 되는 거죠.
템플릿 로더에서는 두 가지 매소드를 정리해줘야 되고요. Django에서 지원하는 베이스 로더를 해서 두 가지 over load를 하게 됩니다.
여기서도 핵심적인 것은 베이스 디렉터리에서 over load라는 폴더 아래 도메인을 점을 대시로 바꾼 그 폴더 내의 템플릿을 템플릿 디아이로 설정하고 이 폴더에서 어떤 템플릿을 찾는 거죠.
주어진 리퀘스트를 보낼 때 뷰에서 템플릿을 설정할 건데 그 이름을 저 하위 경로에서 찾게 만드는 겁니다. 여기서 오리지널을 넣는 것으로 끝나고 실제로 하는 것은 여기서 이루어집니다.
여기서는 아까 설정한 오리진 필드에 따라서 실제로 파일 내용을 읽어서 돌려주게 되죠.
파인드에러는 그 위치에 없을 때 일어나는 거고, 아까 보여드렸던 다른 로더로 순차적으로 찾게 되겠지요.
이런 식으로 해서 템플릿 하위에 있는 템플릿을 사이트별로 불러올 수가 있게 됩니다.
사이트를 어떻게 아는가는 처음에 미들웨어에서 설정한 사이트 도메인을 참고해서 사용자가 어떤 도메인으로 접근했는가를 알 수 있으니까 미들웨어를 참고해서 그거를 바탕으로 해서 맞는 디렉터리 내에 파일을 찾게 되는 것이죠.
그리고 리소스 불러오기도 비슷한 방식입니다. 그런데 리소스는 Django가 Static Finder라는 리스트 내에 정리를 할 수가 있게 돼 있습니다.
마찬가지로 위에 두 개는 디폴트고요.
파이 시스템 파인더는 파이 시스템의 어떤 스테이틱 경로로 지정된 곳에서 스테이틱 파일을 불러오게 되고 거기에 없으면 각 디렉터리 내의 스테이틱 폴더 내에서 불러오게 되죠.
마지막으로 여기 둘 다 없으면 이 사이트에 가서 찾아보라, 라는 커스텀 스테이틱 로더를 정리하게 됩니다.
여기서는 사실은 베이스 파인더라는 것이 있고요, Django에서. 여기서 작성을 해야 되는 거는 파인더라는 거죠.
이 파인드라는 거는 그 위에서 보았던 파이 시스템 파인더와 정확히 똑같고요. 파인 시스템에서 어차피 파인을 읽어오는 거니까 함수는 바뀌지 않는데 그 전에 어디서 찾을 건지 그 위치만 바꿔주면 됩니다.
위치를 바꾸는 건 유닛에서 한 거고요.
여기서는 두 가지를 설정을 해야 되는데 셀프 닷 로케이션이라는 곳에 이 경로를 넣는 거를 하나 해야 되고요.
두 번째는 스토리지라는 곳에 맵핑 형태로 이 파이 시스템 스토리지라는 객체를 집어넣어줘야 됩니다.
이 자체는 파이 시스템 로더와 차이가 없고요. 차이가 나는 건 over load 폴더 내에 스테이틱 폴더를 찾아서 그 내에 내가 요청한 파일이 있는지 있으면 그거를 돌려주는 것이죠.
이런 식으로 해서 리소스를 오버라이드 할 수가 있습니다.
여기까지 요약을 하자면 콘텐츠 분리는 Django가 제공하는 사이트 프레임워크를 이용해서 모델 수준, 뷰 수준에서 데이터라던가 아니면 보여지는 것을 분리를 할 수가 있고요.
사이트 설정은 미들웨어에서 이루어지죠.
미들웨어에서 사이트 아이디를 바꿔줄 수만 있다면 여러 개의 사이트를 동시에 판별할 수가 있게 됩니다.
모든 사이트 관련 설정은 over load라는 디렉터리 내에 퍼블릭 도메인 이름이 닷이 대시로 바뀐 것만 하면 같은 이름으로 위치를 하게 되고요. 하나가 더 있으면 site3 대시 닷 컴 이런 식으로 설정을 할 수 있게 되겠지요. 그리고 하위에는 자신만의 설정이 들어갈 수 있고 스테이틱 파일도 들어갈 수 있습니다.
그러면 이것들은 각각 미들웨어, 템플릿 로더, 스테이틱 파인더에서 저희가 정리한 명령에 따라서 여기를 먼저 찾게 되거나 아니면 나중에 없으면 찾게 되거나 해서 하나의 소스로 여러 사이트를 서빙할 수 있는 방법이, 저희가 한 방법이 되겠습니다.
이게 잘 보이시는지 모르겠는데.. 아주 간단히 만든 템플릿이에요.
왼쪽은 베이스 점 에이치티엠엘이고요.
공통으로 쓰게 되는 거고 여기서 사이트별로 이름을 작성해두었고 여기에 로고는 오버라이드할 수 있게 돼 있죠.
콘텐츠에 사이트별로 작성할 수 있게 돼 있고요.
여기는.. 저도 잘 안 보이는데.. 로고를 여기서 로고 점 PNG를 쓸 거고 이게 site2에 있는 똑같은 로고를 로고로 쓰게 만들어두었을 겁니다.
내용은 각 사이트별 엔트리, 엔트리를 제가 만들어뒀는데 엔트리가 출력되는, 그리고 실제 파일을 출력했다는 거를 증명하기 위해서 서로 다른 거를 붙여놓은 아주 간단한 거고 이런 거를 돌려보면요.
site1을 접속하면 이런 식으로 로고가 이런 투명한 로고가 나오고 site1에 들어가 있는 엔트리가 출력이 되고, site2로 접속을 하게 되면 엔트리는 두 개가 있고 로고가 좀 다른 이런 식의 사이트 운영을 할 수 있게 됩니다.
제가 거짓말을 하지 않는 것을 보여드리기 위해서 이거를 어떻게 해야 될까요?
실제로 보여드리고 마무리를 하려고 하는데 시간이 어떻게 되나 모르겠네요. 너무 빨리 끝난 것 같은데.. 잠시만요.
이게 지금 돌아가고 있는 거고요.
끄면.. 왜 안 될까요? 뭐지..
일단 되는 걸 보여드릴게요.
site1 점 로컬이라는 거고 여기는 site2로 가면 바뀌는 걸 볼 수가 있어요. 로고도 바뀌고 프로토콜도 바뀌고.. 그런데 여기서 끄면 안 되는 것으로 보아서 제가 거짓말한 거는 아니고요.
이거는 저희가 운영한 사이트에서 다른 건 다 빼고 아주 간단한 것만 모아놓은 것이고 비슷한 방식으로 저희가 사이트를 실제로 운영을 했었습니다.
레포지토리는 제가 공개를 해놓았고요. 멋없는 이름으로 공개가 돼 있으니까 혹시 관심이 있으시면 방문을 해 주시면 될 것 같고, 여기서 제 발표를 마치도록 하겠습니다. 혹시 질문이 있으시면 해 주시고요.
아, 참.. 여기.
-(사회자) : 시간 관계상 다른 Q&A는 여기서 받지 않고 앞에서 발표자 분께 해 주시기 바랍니다.
좋은 발표해 주신 박종현 발표자님께 큰 박수 부탁드립니다.
-(박수)
다음 세션은 15분 후에 진행하도록 하겠습니다.
감사합니다.

<끝>