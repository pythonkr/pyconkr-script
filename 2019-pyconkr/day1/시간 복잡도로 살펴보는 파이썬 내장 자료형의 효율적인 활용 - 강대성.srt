1
00:00:03,429 --> 00:00:05,560
 네 안녕하세요.

2
00:00:05,560 --> 00:00:07,160
 안녕하세요. (안녕하세요)

3
00:00:07,260 --> 00:00:11,240
 제 목소리가 안 들리나 살짝 고민을 했습니다.

4
00:00:11,240 --> 00:00:14,660
 제가 발표할 주제는 시간 복잡도로 살펴보는

5
00:00:14,660 --> 00:00:18,880
 Python 내장자료형의 효율적인 활용이라는 주제로 발표를 하게되었습니다.

6
00:00:19,060 --> 00:00:21,620
 일단 제 소개를 간단하게 할게요.

7
00:00:21,620 --> 00:00:24,980
 저는 일단 16년차 개발자구요.

8
00:00:24,980 --> 00:00:29,480
 좀 오래됐죠? 한번쯤 웃어주셔야 하는데 안 웃어주네요.

9
00:00:29,480 --> 00:00:33,200
 16년째 개발하다 보니까 주변업무들을

10
00:00:33,200 --> 00:00:35,040
 개발보다 주변 업무들을  많이 하는 거 같아요.

11
00:00:35,140 --> 00:00:38,539
 인프라, 네트워크, 보안 쪽 업무를  많이 한 거 같고요.

12
00:00:38,539 --> 00:00:41,600
 지금은 피플펀드 컴퍼니에서  기술고문으로 일하고 있습니다.

13
00:00:41,600 --> 00:00:43,820
 작년까지 cto 로 일하고 있었는데

14
00:00:43,820 --> 00:00:47,060
 제가 가정에 시간을 많이 써야 되는 일이 좀 생겨가지고

15
00:00:47,060 --> 00:00:51,050
 올해부터 기술고문으로 일하기로  했습니다.

16
00:00:51,050 --> 00:00:56,109
 그리고

17
00:00:56,109 --> 00:00:58,109
 (스태프 마이크 조정 중)

18
00:01:02,050 --> 00:01:05,880
 그리고 2015년, 2017년에 스피커를 했었고요.

19
00:01:05,880 --> 00:01:10,760
 2년에 한 번씩 하고 있네요.  2019년에도 하고 있네요.

20
00:01:10,760 --> 00:01:14,240
 (스태프 - 발표화면이 나오고 있지 않다고 이야기)

21
00:01:14,240 --> 00:01:16,330
 어 화면이 여기 안 나오네요.

22
00:01:16,330 --> 00:01:21,150
 안 나와도 그냥 제 목소리를 들으시고  하시면 됩니다.

23
00:01:21,150 --> 00:01:25,300
 일단 오늘 이야기할 주제는 시간 복잡도를 먼저 이해를 할 거에요.

24
00:01:25,440 --> 00:01:27,740
 그리고 Mutable 과 Immutable

25
00:01:27,740 --> 00:01:29,880
 아시는 분도 있겠지만 이게

26
00:01:29,880 --> 00:01:33,000
 무슨 차이인지 이해하는 걸 할 거고요.

27
00:01:33,000 --> 00:01:36,722
 그 다음에 해야될 건 내장자료형의 시간 복잡도.

28
00:01:36,722 --> 00:01:38,840
 다 다루지는 못해요. 시간상.

29
00:01:38,840 --> 00:01:44,220
 자료를 하나씩 넣을 때 어떻게 바뀌는지  그런 거를 할 거구요.

30
00:01:44,220 --> 00:01:47,740
 그리고 느린 부분을 극복하는 방법  그걸 하게 될 겁니다.

31
00:01:47,740 --> 00:01:50,140
 화면이 안 나오니까 저도 좀 당황스럽지만

32
00:01:50,140 --> 00:01:53,180
 그래도 계속 하겠습니다.

33
00:01:54,260 --> 00:01:57,310
 일단 다시 한 번 (화면연결 잭을) 끼어보고

34
00:02:04,680 --> 00:02:08,060
 제 목소리 잘 들리죠?  (네)

35
00:02:08,060 --> 00:02:11,370
 일단 시간 복잡도가 뭔지부터 이해를 할게요.

36
00:02:11,370 --> 00:02:12,860
 어 이것 좀 보여 드려야 되는건데

37
00:02:12,860 --> 00:02:16,320
 일단 위키에 있는 내용을 좀 가져왔어요.

38
00:02:16,320 --> 00:02:18,820
 다음. 저 혼자 (발표자료를) 계속 넘기면서 할게요.

39
00:02:18,820 --> 00:02:19,940
 (청중 웃음)

40
00:02:19,940 --> 00:02:24,480
 (스태프 - 5분정도 시간 여유를 드릴테니까 이야기를 더 나눠주시면)

41
00:02:24,720 --> 00:02:25,780
 (스태프에게) 그럴까요.

42
00:02:25,780 --> 00:02:29,020
 여러분 그럼 저희 무슨 이야기를 나눌 수 있을까요?

43
00:02:29,020 --> 00:02:30,160
 (청중 웃음)

44
00:02:30,360 --> 00:02:34,900
 피플펀드 컴퍼니에 대해서 좀 소개를 할까요.  어떻게 하지 그러면 이걸.

45
00:02:35,120 --> 00:02:41,780
 (부스) 앞에 가시면 Python, Django만  해가지고 노란색 케이스 받아보신 거 보셨나요?

46
00:02:41,780 --> 00:02:45,980
 아, 안 받아 보셨구나. 그거 저희 회사에서 한 건데

47
00:02:46,440 --> 00:02:49,420
 (스태프 안내 중)

48
00:02:49,420 --> 00:02:53,360
 (스태프 - 발표하기 전에 질문 1명)

49
00:02:53,360 --> 00:02:58,030
 아 혹시 질문하실 분 있나요?

50
00:02:58,200 --> 00:02:59,940
 (스태프 - 지금 화면 이슈로 해결하는 중이고요)

51
00:03:00,060 --> 00:03:01,420
 (화면이 나왔다가 꺼져서  청중, 발표자, 스태프 모두 어~~)

52
00:03:01,420 --> 00:03:02,500
 (스태프 - 책을 받아 갈수 있는 기회인데)

53
00:03:02,500 --> 00:03:06,145
 (스태프 - 화면 이슈를 해결하기 전까지  선착순 1명 으로 질문 받아서)

54
00:03:06,145 --> 00:03:08,700
 (스태프 - 질문해 주시는 분한테 책을 드리겠습니다.)

55
00:03:09,960 --> 00:03:11,020
 (청중 웃음)

56
00:03:11,480 --> 00:03:13,400
 오 (화면이)나와 버렸어 어떡해.

57
00:03:13,400 --> 00:03:14,540
 (스태프 - 책은 다음 기회에...)

58
00:03:14,540 --> 00:03:16,120
 (청중 웃음)

59
00:03:23,560 --> 00:03:25,040
 일단 계속 할게요.

60
00:03:25,040 --> 00:03:27,220
 원래 화면이 이거였어요.

61
00:03:27,220 --> 00:03:31,390
 근데 이거 읽으라고 하면 여러분들  미칠 거 같으니까 이렇게 준비했습니다.

62
00:03:31,390 --> 00:03:36,340
 일단 시간 복잡도는 시간을 정량해서  표기하는 거에요.

63
00:03:36,340 --> 00:03:39,340
 주로 빅 오 노테이션[Big-O notiation]으로  많이 표현하고요.

64
00:03:39,340 --> 00:03:41,840
 낮은 차수항은 제하는 방법으로 합니다.

65
00:03:41,980 --> 00:03:44,260
 먼저 어떤 걸 계산을 할 때,

66
00:03:44,260 --> 00:03:47,080
 여러분 이거 안 찍으셔도 돼요.  그 (발표자료)올라가요.

67
00:03:47,080 --> 00:03:52,620
 [5n^3 + 3n]으로 데이터가 나왔다면은

68
00:03:52,620 --> 00:03:58,330
 이거를 표현할 때 O의 n 세 제곱[O(n^3)]으로만 표현합니다.

69
00:03:58,330 --> 00:04:01,240
 이렇게 시간 복잡도를 표현한다는 것.

70
00:04:01,240 --> 00:04:04,959
 n 세 제곱하면 이 안에 뭐가 숨어있을지 모르겠으나 어쨌든 최고는

71
00:04:04,960 --> 00:04:08,920
 n의 세제곱 만큼 시간 복잡도을 가진다. 그 정도로 이해하시면 됩니다.

72
00:04:09,920 --> 00:04:13,100
 수행 시간을 간단하게 비교해볼 거에요.

73
00:04:13,100 --> 00:04:17,180
 상수 1, O(N), O(N^2)

74
00:04:17,180 --> 00:04:20,040
 앞에 한 건 일때의 숫자는  별로 중요하지 않아요.

75
00:04:20,200 --> 00:04:21,360
 한 건 일때 5

76
00:04:21,360 --> 00:04:23,880
 아 어떻게 설명드려야하지.

77
00:04:23,880 --> 00:04:27,220
 한 건일때 시간이 5 만큼 걸렸고

78
00:04:27,230 --> 00:04:30,940
 O(N)은 10만큼 걸렸고, O(N^2)은 10만큼 걸렸어요.

79
00:04:30,940 --> 00:04:36,320
 이게 100건일 때는 얼마큼 걸릴지 대략적으로 예측을 해보는 거에요.

80
00:04:36,320 --> 00:04:41,100
 O(1)은 5만큼 걸리고,  O(N)은 1,000만큼 걸리고

81
00:04:41,100 --> 00:04:43,340
 100배만큼 늘어났으니까.

82
00:04:43,340 --> 00:04:48,280
 O(N^2)은 100의 제곱만큼 늘어나겠죠.

83
00:04:48,280 --> 00:04:51,780
 이렇게 시간복잡도를 계산하는 겁니다.

84
00:04:53,560 --> 00:04:57,952
 대략적으로 나타내면 이렇고요. 하나하나 말씀을 드릴게요.

85
00:04:57,952 --> 00:05:02,060
 O(1)같은 경우에는  맨 아래 깔려 있는 거 있죠.

86
00:05:02,060 --> 00:05:06,380
 어떤 데이터가 들어와도 상수적으로  데이터를 처리합니다.

87
00:05:06,380 --> 00:05:08,540
 진짜 빨리 처리해내는거죠.

88
00:05:08,540 --> 00:05:11,120
 이런 알고리즘 거의 없습니다.

89
00:05:11,120 --> 00:05:16,980
 O(N)은 데이터가 늘어나면 그에 맞춰서  처리 속도도 늘어나는 거예요.

90
00:05:18,680 --> 00:05:20,680
 이해하셨죠? 네.

91
00:05:20,680 --> 00:05:24,040
 N제곱은 데이터가 4배 늘어나면  처리 시간 4배 늘어납니다.

92
00:05:24,040 --> 00:05:28,340
 데이터가 늘어남에 따라서 시간이  확 올라가는 형태에요.

93
00:05:28,340 --> 00:05:30,920
 좀 안 좋은 알고리즘 중에 하나인데

94
00:05:30,920 --> 00:05:34,600
 뭐 별 수 없이 이런 걸 써야할 때도 많이 있죠.

95
00:05:34,999 --> 00:05:36,240
 [NlogN].

96
00:05:36,240 --> 00:05:41,659
 이거는 데이터를 정렬할 때 최적의 성능을 가지면 이 정도 가집니다.

97
00:05:41,659 --> 00:05:45,360
 QuickSort로 구현하신다 그러면 NlogN은 가능할 거에요.

98
00:05:45,360 --> 00:05:49,909
 고개를 많이 끄덕거리는거 보니까 많이 배우신 내용 같네요.

99
00:05:49,909 --> 00:05:51,060
 빨리 하고 넘어갈게요.

100
00:05:51,060 --> 00:05:54,075
 logN 같은 경우는 [Binary Search]

101
00:05:54,080 --> 00:05:57,920
 logN으로 간단히 처리할 수 있게. 이 정도의 시간 복잡도가 나오겠죠.

102
00:05:59,940 --> 00:06:03,200
 이런 경우는 시간 복잡도가 어떻게 될까요?

103
00:06:05,000 --> 00:06:05,780
 (청중 : 2 제곱)

104
00:06:05,880 --> 00:06:09,358
 누가 n 제곱이라고 말씀을 해주셨네요.

105
00:06:09,358 --> 00:06:12,340
 왠지 저희 회사 사람 같지만

106
00:06:12,340 --> 00:06:18,930
 이거 같은 경우는 자세히 보시면

107
00:06:19,850 --> 00:06:22,320
 어느 정도 시간 복잡도를 가지냐고 예측해봤을 때

108
00:06:22,320 --> 00:06:27,259
 O(N^2)이라고 봐야하나 O(N)이라고 봐야하나 좀 헷갈릴 수도 있을 거에요.

109
00:06:27,259 --> 00:06:30,920
 근데 5천 번 루프로 돌리고  input을 한 번만 돌렸잖아요.

110
00:06:30,920 --> 00:06:35,380
 input이 늘어남에 따라  시간은 input 만큼만 늘어나요.

111
00:06:35,380 --> 00:06:40,759
 결국 이거는 O(N)만큼 시간 복잡도을 가지는 거죠.

112
00:06:40,760 --> 00:06:45,180
 5000N 이더라도 5000은 빼버리고  N만큼의 시간복잡도를 가지는 겁니다.

113
00:06:46,040 --> 00:06:47,640
 그러니까 시간 복잡도는 뭐냐?

114
00:06:47,640 --> 00:06:52,700
 결국 데이터가 늘어났을 때 시간 증가의 경향을 나타낸다고 보시면 됩니다.

115
00:06:54,780 --> 00:06:58,920
 오늘 주로 O(1)과 O(N)정도만 다루게 됩니다.

116
00:06:58,920 --> 00:07:03,000
 복잡한 것들이 아니라서 이 정도만 다루게 되고요.

117
00:07:03,000 --> 00:07:07,800
 본격적으로 들어가기 전에  immutable과 mutable을 다루게 될 거에요.

118
00:07:07,800 --> 00:07:12,140
 immutable은 한 번 만들어지면  변하지 않는 객체들.

119
00:07:12,140 --> 00:07:17,490
 튜플[Tuple]이나 스트링[String]이나 바이트[Byte]나  프로즌 셋[Forzen Set] 같은 걸 이야기하는 거죠.

120
00:07:17,490 --> 00:07:19,900
 한 번 데이터를 만들면은 변하지 않아요.

121
00:07:21,360 --> 00:07:23,660
 mutable은 변할 수 있는 객체들.

122
00:07:23,660 --> 00:07:25,880
 리스트[List]나 딕셔너리[Dictionary] 같은 경우에는

123
00:07:26,200 --> 00:07:28,220
 리스트에는 뒤에 데이터를  하나씩 추가시킬 수 있잖아요.

124
00:07:28,220 --> 00:07:29,940
 여러분 처음 파이썬 배우실 때

125
00:07:29,940 --> 00:07:32,400
 튜플하고 리스트하고 가장 다른 것은  변화할 수 있냐 없냐

126
00:07:32,400 --> 00:07:34,380
 그 정도로 이야기를 다루잖아요.

127
00:07:34,560 --> 00:07:35,900
 딱 그 정도 입니다.

128
00:07:37,500 --> 00:07:42,040
 그러면 아까 tuple은 immutable이라고 배웠는

129
00:07:42,040 --> 00:07:45,120
 과연 여기서, 이렇게 A를 변환해서 넣었잖아요.

130
00:07:45,120 --> 00:07:47,760
 이거는 mutable일까요 immutable일까요?

131
00:07:50,400 --> 00:07:54,540
 이거는 immutable죠.  mutable로 생각하고 코딩하시는 분들도 가끔 있는데.

132
00:07:54,550 --> 00:07:56,960
 immutable입니다.

133
00:07:56,960 --> 00:08:00,400
 실제로 Python 내부에서 이거를  어떻게 처리하느냐 생각해보면

134
00:08:00,400 --> 00:08:02,349
 확실히 immutable인지 알 수 있는데

135
00:08:02,349 --> 00:08:07,360
 Python 내부에서는 [tupleconcat]이라는  함수를 통해서 처리를 해요.

136
00:08:07,360 --> 00:08:09,940
 [a]와 [b]가 여기 들어가는 거죠.

137
00:08:11,600 --> 00:08:13,660
 실제 Python이 구현된 소스입니다.

138
00:08:13,660 --> 00:08:18,440
 C 로 되어있고요. 파이썬은 C로 구현되어 있으니까 C로 구현된 거고.

139
00:08:18,440 --> 00:08:21,580
 여기 첫 번째 tupleconcat 이라는 곳으로 데이터를 받고

140
00:08:22,960 --> 00:08:26,640
 두 번째 노란색 보면

141
00:08:27,260 --> 00:08:31,740
 이게 혹시 a가 비었는지

142
00:08:31,740 --> 00:08:35,200
 그리고 두번째 세번째 노란색 보면

143
00:08:35,680 --> 00:08:40,240
 앞에 b가 비었는지 그것까지 체크합니다.

144
00:08:40,920 --> 00:08:44,180
 만약에 비어있는 거면은 빠르게 return하고  끝나버려요.

145
00:08:44,180 --> 00:08:46,040
 안 빈 곳 쪽으로.

146
00:08:47,220 --> 00:08:49,840
 만약에 둘 다 비어있지 않고  둘 다 차 있는 튜플이면

147
00:08:49,840 --> 00:08:53,880
 두 개를 더한 후에 그거를 복사합니다.

148
00:08:55,120 --> 00:08:56,800
 그리고 그걸 새로 반환하는거죠.

149
00:08:56,800 --> 00:09:00,920
 결국 immutable의 객체니까  어쩔 수 없이 이렇게 하겠죠.

150
00:09:04,940 --> 00:09:08,940
 그래서 아까 설명드리려고 한 거,

151
00:09:08,940 --> 00:09:14,900
 a 와  b를 더했는데 하나가 비었다,  b가 비었다고 하면

152
00:09:16,040 --> 00:09:19,460
 a하고 c하고 결국 똑같은 객체인 거예요.

153
00:09:19,460 --> 00:09:21,140
 이해하셨죠?

154
00:09:21,140 --> 00:09:25,590
 여기IDE 화면은 객체 레퍼런스를 이야기 한건데

155
00:09:25,590 --> 00:09:28,790
 뒤에 800 으로 똑같이 끝나죠

156
00:09:29,000 --> 00:09:34,070
 여러분 표정이 안 좋은 거 보니까  좀 헷갈릴 수 있겠지만

157
00:09:34,070 --> 00:09:36,120
 두 개 같은겁니다.

158
00:09:36,120 --> 00:09:42,540
 아까 딱 그 여기 세 번째 노란색 박스 있죠.

159
00:09:42,540 --> 00:09:44,480
 그 부분에 해당되는 경우입니다.

160
00:09:44,480 --> 00:09:49,440
 b가 비었으니까 a를 리턴하고 끝내버리는 경우에요.

161
00:09:53,200 --> 00:09:57,820
 tuple 같은 경우에는 더하기를 하면

162
00:09:57,820 --> 00:10:01,680
 새로운 tuple 만들고 복사해서  다시 리턴해주는 구조입니다.

163
00:10:01,680 --> 00:10:04,860
 그리고 이것의 시간복잡도는 O(N+M)이겠죠.

164
00:10:04,860 --> 00:10:10,500
 앞의 tuple과 뒤의 tuple의 더한 것만큼 시간 복잡도를 가지겠죠.

165
00:10:13,180 --> 00:10:15,520
 이제 리스트로 넘어왔어요.

166
00:10:15,520 --> 00:10:19,040
 이거는 immutable처럼 쓴 거처럼 보이죠.

167
00:10:21,200 --> 00:10:23,320
 넘어갈게요.

168
00:10:24,960 --> 00:10:27,780
 실제로 Python 내부에서 이거를 어떻게  처리하느냐보면

169
00:10:28,780 --> 00:10:35,540
 이거 같은 경우는 tuple 하고 다르게

170
00:10:35,540 --> 00:10:39,140
 리스트 안에 데이터가 없는지 비교하지 않아요.

171
00:10:39,140 --> 00:10:40,660
 비교하지 않고.

172
00:10:40,660 --> 00:10:47,540
 그냥 2개를 사이즈를 더해서 새로운 걸 만들어서, 할당해서 다시 내뱉는 역할만 해요.

173
00:10:48,910 --> 00:10:55,720
 결국에는 아까처럼 이렇게 쓰면  tuple과 다르게 쓴 건 없죠?

174
00:10:55,720 --> 00:11:03,060
 내부적으로 실제로는 mutable한 객체를 immutable하게 쓴 예제 중 하나일 뿐입니다.

175
00:11:07,020 --> 00:11:09,520
 이거는 tuple하고 비교하기 위해서 써봤고요.

176
00:11:09,520 --> 00:11:14,500
 이거는 b가 비어도 새로운 객체를 만들어서  뱉어 준다.

177
00:11:14,500 --> 00:11:16,500
 그 정도로 이해하시면 되고요.

178
00:11:16,500 --> 00:11:23,960
 실제로 아까 이거를 지금 덧셈한 거를

179
00:11:23,960 --> 00:11:28,510
 실제로는 익스텐드[extend] 한 것처럼 써야지  맞겠죠. mutable하게 쓰려면

180
00:11:31,670 --> 00:11:35,280
 이제 extend에 대해서 좀 이야기 할게요

181
00:11:35,280 --> 00:11:39,170
 익스텐드는 실제로 Python 내부에서  이렇게 운영됩니다.

182
00:11:39,170 --> 00:11:42,420
 m + n, 실제 두 개의 객체

183
00:11:42,420 --> 00:11:47,360
 앞에 1,2를 가진 것과  3,4를 가진 것

184
00:11:47,360 --> 00:11:49,800
 객체를 길이를 보고

185
00:11:49,800 --> 00:11:52,680
 그거를 그만큼 그 앞에 거

186
00:11:52,680 --> 00:12:02,000
 원래 l이라는 리스트를 리사이즈 한 후에 뒤의 거를 복사해 넣습니다.

187
00:12:04,040 --> 00:12:11,040
 리스트는 익스텐드 오퍼레이션은  O(N+M)의 시간복잡도를 일반적으로 가지고요.

188
00:12:11,040 --> 00:12:16,980
 리사이즈를 하지 않을 경우에는 [O(M)] 정도로 시간복잡도를 가집니다.

189
00:12:18,440 --> 00:12:20,440
 여기까지 좀 서론적인 이야기였구요.

190
00:12:20,440 --> 00:12:23,690
 이제 진짜 본론적으로 시작할게요.

191
00:12:23,690 --> 00:12:25,760
 여러분 리스트 많이 쓰시죠?

192
00:12:26,760 --> 00:12:30,280
 Python 쓰시면서 리스트 안 쓰시는 분들 없을 겁니다.

193
00:12:31,060 --> 00:12:34,600
 리스트 pop할 때 어떤 일이 일어나는지 볼게요.

194
00:12:38,040 --> 00:12:46,699
 pop 세 번째 거, Python은 제로베이스니까 3이라고 하면 네 번째를 이야기하겠죠.

195
00:12:46,699 --> 00:12:49,880
 네번째 걸 pop을 한다 가정하면,

196
00:12:49,899 --> 00:12:54,340
 세 번째 거를 뺀 후에 그 다음 거를  앞으로 밀어버리겠죠.

197
00:12:54,340 --> 00:12:58,910
 이렇게 내부적으로 구현됩니다.

198
00:12:58,910 --> 00:13:05,480
 여기까지는 크게 아름답다, 아름답지 않다 없이 보통 이렇게 처리된다고 생각할 수 있을 거에요.

199
00:13:05,480 --> 00:13:10,569
 그런데 만약에 데이터가 더 많다고 가정을 할게요

200
00:13:10,579 --> 00:13:12,400
 세번째 걸 뺐어요.

201
00:13:12,400 --> 00:13:14,600
 사람으로 따지면 네번째를 뺐어요.

202
00:13:14,600 --> 00:13:17,200
 그러면 뒤에 있는 거를 다 밀어줘야 해요.

203
00:13:17,200 --> 00:13:19,699
 이렇게 여기서 미는데

204
00:13:21,460 --> 00:13:26,380
 시스템 내부적으로는,  우리가 아름다움까지 고민할 필요가 있는데

205
00:13:26,380 --> 00:13:30,360
 내부적으로는 뒤에 있는 걸  다 민다고 생각하는 거예요.

206
00:13:30,360 --> 00:13:33,500
 제가 [백만스물하나] 적은 것은  에너자이저 생각해서 적은 건데

207
00:13:33,500 --> 00:13:38,530
 에너자이저가 미는 것처럼 다 민다고 생각을 하셔야 돼요.

208
00:13:39,560 --> 00:13:40,760
 여러분 정말 아름다운가,

209
00:13:40,760 --> 00:13:43,460
 시간이 빨리 처리되는가를 보셔야하는데

210
00:13:43,460 --> 00:13:45,920
 파이썬 내부에서는 이걸 어떻게 구현해냈냐

211
00:13:45,920 --> 00:13:50,140
 일단 pop 이라는 걸 호출할 거고요

212
00:13:50,140 --> 00:13:55,440
 pop이라는 함수를 호출하면 내부적으로는  [list_pop]이라는 것을 호출하게 될 거고,

213
00:13:55,440 --> 00:13:58,660
 그 다음에 짜르는 걸 호출할 거고

214
00:13:58,660 --> 00:14:02,620
 그리고 마지막으로 메모리를 옮기라고  호출을 할 거에요.

215
00:14:02,620 --> 00:14:07,120
 그런데 세번째, 메모리 옮기라는 게  엄청난 무브를 가져옵니다.

216
00:14:08,240 --> 00:14:15,360
 여러분이 상상할 수 없을 만큼 엄청난 오퍼레이션을 가져오게 되는 거죠.

217
00:14:16,600 --> 00:14:19,940
 결국 이거는 O(N)이라는 시간 복잡도를  가지게 되는 거에요.

218
00:14:19,940 --> 00:14:21,400
 하나의 데이터를 뺐을 뿐인데.

219
00:14:23,100 --> 00:14:29,400
 뺀 거에서 뒤에 있는 거를 싹 밀면서 O(N)이라는 시간을 가지는 거에요.

220
00:14:29,400 --> 00:14:36,900
 결국 이 하나를 함으로써 엄청난 부하가  CPU나 메모리에 갈 수 있다는 겁니다.

221
00:14:36,900 --> 00:14:39,080
 물론 여러분은 고생을 안하겠죠.

222
00:14:39,080 --> 00:14:40,760
 컴퓨터가 약간 고생할 거를 생각하면서

223
00:14:40,760 --> 00:14:44,220
 이거 하면 고생하지 않을까라고 생각하시면서  프로그램을 만드시면 됩니다.

224
00:14:44,360 --> 00:14:49,620
 좀 복잡한 append를 고민해볼게요.

225
00:14:50,600 --> 00:14:52,440
 append를 하게 되면은

226
00:14:53,460 --> 00:14:55,940
 append 4를 했어요.

227
00:14:57,820 --> 00:15:02,380
 이게 O(1) 같은가요? O(N) 같은가요?

228
00:15:02,569 --> 00:15:05,360
 역시 이야기 안 하실 줄 알았어요.

229
00:15:05,360 --> 00:15:09,160
 이게 아름다워보이느냐에 대해서  약간 고민할 필요가 있어요.

230
00:15:09,160 --> 00:15:12,420
 역시 여기도 [백만스물하나]가 나왔는데

231
00:15:12,420 --> 00:15:16,280
 4부터 list에 a을 할당해놓고

232
00:15:16,460 --> 00:15:18,880
 4 부터 n 까지 백만스물하나까지

233
00:15:19,020 --> 00:15:22,540
 [append]를  하는 것을 고민해 봤어요

234
00:15:22,540 --> 00:15:28,200
 지금 박스 처져있는 루틴이  O(N)만에  끝날까 안 끝날까

235
00:15:28,200 --> 00:15:30,220
 대해서 약간 고민할 필요가 있는 거예요.

236
00:15:32,480 --> 00:15:36,780
 리스트에서 실제로 어떤 일이 발생할지,

237
00:15:36,780 --> 00:15:39,080
 append하면 어떤 일이 발생하는지 좀 보겠습니다.

238
00:15:40,420 --> 00:15:42,000
 처음에 빈 리스트죠.

239
00:15:43,280 --> 00:15:46,700
 [append(1)]하면 새로운 메모리를 할당해서  1을 넣습니다.

240
00:15:47,760 --> 00:15:51,440
 두번째 2를 append하면 1,2 를  할당해서 넣죠.

241
00:15:51,440 --> 00:15:53,920
 메모리를 할당해서 복사합니다.

242
00:15:53,920 --> 00:15:57,180
 그러니까 1을 없애고 1,2 를 할당해서  넣는 거죠.

243
00:15:57,180 --> 00:15:59,720
 자 3을 하면 이렇게 넣어요.

244
00:15:59,720 --> 00:16:01,680
 그러니까 복사한다는 의미는

245
00:16:01,680 --> 00:16:05,470
 이게 아까 빅-오-어노테이션 나타냈을때 O(N)

246
00:16:05,470 --> 00:16:09,680
 기존 데이터를 N이라고 가정했을 때  O(N) 만큼 시간이 소요된다는 걸 의미해요.

247
00:16:11,560 --> 00:16:15,760
 할 때마다 O(N) 만큼 시간이 걸릴까에 대해서 약간 고민할 필요가 있어요.

248
00:16:15,760 --> 00:16:18,180
 만약 [list.append]를 자주 썼다

249
00:16:18,180 --> 00:16:20,600
 여러분이 데이터 많이 넣고 많이 썼다

250
00:16:20,600 --> 00:16:24,240
 괜찮을까. 좀 충격이지는 않으신가요...

251
00:16:24,240 --> 00:16:27,679
 네 아니군요. 표정은 네.

252
00:16:27,680 --> 00:16:31,820
 하지만 제가 봤을 때는 이거  괜찮지 않은 부분입니다.

253
00:16:32,900 --> 00:16:37,580
 그래서 설마 Python을 이렇게  대충 만들었을리 없다하고

254
00:16:37,580 --> 00:16:39,200
 자세히 살펴보면은

255
00:16:40,460 --> 00:16:48,460
 리스트 리사이즈 할 때  0, 4, 8, 16, 25, 35, 46 단위로 list를 추가합니다.

256
00:16:48,460 --> 00:16:53,610
 보통 리스트에서는 그로스 패턴이라고  이야기를 하는데

257
00:16:53,610 --> 00:16:56,120
 하나만 추가해도 메모리 4개 를 할당해버려요.

258
00:16:56,120 --> 00:16:58,860
 왜냐하면 하나씩 계속 추가하면

259
00:16:59,990 --> 00:17:03,240
 엄청난 오퍼레이션 일어나니까  하나씩 추가합니다.

260
00:17:03,240 --> 00:17:05,020
 예를 좀 보여 드릴게요.

261
00:17:05,560 --> 00:17:07,320
 빈 리스트에요.

262
00:17:07,740 --> 00:17:11,480
 하나를 추가해도 1 할당하고  나머지 3칸은 빈 칸으로 놔둡니다.

263
00:17:12,880 --> 00:17:18,460
 또 하나 추가하면 메모리 복사할 필요없이  새로 할당할 필요없이 1을 넣어요

264
00:17:19,380 --> 00:17:21,300
 3 넣고 4 넣습니다.

265
00:17:22,300 --> 00:17:27,280
 이제 5를 넣을 때에야  아까 4 다음에 8, 그로스 패턴이라고 말을 했죠.

266
00:17:28,060 --> 00:17:30,880
 5를 넣을 때 비로소 데이터를 늘려줍니다.

267
00:17:32,060 --> 00:17:35,940
 6 넣고 이런 식으로 하는 거죠.

268
00:17:35,940 --> 00:17:38,540
 결국 Python이 취한 방식은

269
00:17:39,500 --> 00:17:44,040
 메모리를 조금 더 낭비를 하고  시간에서 더 이득이 생기도록 만들었어요.

270
00:17:44,060 --> 00:17:46,680
 조금씩 append를 해도 큰 부담이 안 가게.

271
00:17:48,360 --> 00:17:51,440
 아까 말씀드렸다시피 그로스 패턴이 있고요 리스트에는

272
00:17:51,440 --> 00:17:53,760
 보통 할당할 때

273
00:17:53,760 --> 00:17:59,860
 [전체 크기 / 8]한 것 만큼 점거한 거만큼  또 여유 공간을 확보해 줍니다.

274
00:17:59,860 --> 00:18:04,340
 항상 확보하는 아니고 모자라다 싶을 때  그때 1/8 만큼

275
00:18:04,340 --> 00:18:07,690
 정확히 말하면 [n/8 + (6 or 3)] 이에요.

276
00:18:08,520 --> 00:18:10,320
 그만큼 더 할당을 해놔요.

277
00:18:10,320 --> 00:18:16,520
 3이 되는 것은 9보다 작은 원소를 가질 때고 보통 6을 씁니다.

278
00:18:18,360 --> 00:18:21,200
 그래서 이제 얼마나 느린가 테스트를 해봤어요.

279
00:18:22,380 --> 00:18:24,660
 100개의 리스트를 위해  [위에 노란색] 보면

280
00:18:24,660 --> 00:18:26,680
 100개의 리스트를 다 준비하고

281
00:18:26,680 --> 00:18:30,560
 그 리스트에 데이터를 하나씩 넣는 걸  테스트 해봤습니다.

282
00:18:32,330 --> 00:18:35,320
 리사이즈가 발생하면 저 뒤에 true 라고  찍혀 있는 거예요.

283
00:18:35,320 --> 00:18:39,520
 여기 보면 리사이즈가 될 때나  안 될 때나

284
00:18:39,520 --> 00:18:41,260
 큰 차이가 없어보입니다.

285
00:18:43,080 --> 00:18:45,280
 많이 차이나봤자 10배 밖에  차이가 안나죠.

286
00:18:46,160 --> 00:18:48,200
 네, 표정이 어두우시네요. 네.

287
00:18:48,200 --> 00:18:50,320
 혹시 잘 이해가 안되시나요?

288
00:18:50,320 --> 00:18:52,940
 이해되신다고 하고 갈게요.

289
00:18:52,940 --> 00:18:54,800
 근데 사이즈가 커진다,

290
00:18:54,809 --> 00:18:57,800
 많이 커지면 이게 뭐 1000배 이상 차이가 나기도 합니다.

291
00:18:57,800 --> 00:19:03,509
 만약에 맨 아래쪽에 0.09초,  약 0.1 초 정도 걸린 건데

292
00:19:03,509 --> 00:19:07,340
 100번 했으니까... 계산이 좀 제가 안되네요

293
00:19:07,340 --> 00:19:11,280
 그만큼 걸리는 거 겠죠.  그게 100번 한 거 기준이에요.

294
00:19:11,440 --> 00:19:12,740
 그러니까 100번 할 때,

295
00:19:13,740 --> 00:19:18,180
 리사이즈하면은 이만큼의 시간이  더 걸립니다.

296
00:19:18,300 --> 00:19:20,840
 평균적으로 보면 O(1)에 가까워요.

297
00:19:20,840 --> 00:19:26,340
 그런데 가끔 O(N)이 발생합니다.

298
00:19:26,340 --> 00:19:30,320
 이걸 이해하시고 인제 개발하시면  더 좋긴 하겠죠.

299
00:19:32,300 --> 00:19:35,300
 그리고 만약에 나는 리사이즈 하면 안 돼,

300
00:19:35,300 --> 00:19:38,390
 저렇게 성능이 튀는 걸 용서할 수 없어 그러면은

301
00:19:38,390 --> 00:19:40,280
 미리 할당을 하고 시작합니다.

302
00:19:40,280 --> 00:19:43,200
 100만 개를 한 번에 할당을 시킬 수도 있고요.

303
00:19:43,200 --> 00:19:44,780
 미리 할당을 하고.

304
00:19:44,780 --> 00:19:48,200
 Python에서 정한 최고 사이즈 크기가 있을 거에요.

305
00:19:48,200 --> 00:19:50,920
 그 사이즈만큼 미리 할당하고  할 수도 있어요. (여기까지 자막싱크)

306
00:19:54,020 --> 00:20:00,200
 여기서 안 했는데 측정을 할 때는  미리 할당하고 했을 때 어떤 차이가 있는지 보여드릴게요.

307
00:20:00,200 --> 00:20:03,060
 그리고 append 하는 것 대신에

308
00:20:04,560 --> 00:20:06,020
 진짜 할당하면 되겠죠.

309
00:20:06,020 --> 00:20:08,260
 그러니까 [None] 으로 이미 다 채워놨으니까

310
00:20:08,420 --> 00:20:10,600
 할당하는 것이라고 할 수도 있습니다.

311
00:20:12,340 --> 00:20:14,840
 딕셔너리로 넘어갈게요.

312
00:20:15,500 --> 00:20:18,800
 딕셔너리는 다들 써보셨죠?

313
00:20:19,300 --> 00:20:21,200
 다 써 봤을 거라 믿습니다.

314
00:20:23,520 --> 00:20:28,580
 일단 딕셔너리 내부 구조는  지금 Python에서는 이런 구조를 가지지 않아요.

315
00:20:28,580 --> 00:20:32,720
 근데 인터넷에 해쉬 테이블 찾아보면  가장 먼저 위키에 뜨는 것이 이 그림입니다.

316
00:20:32,720 --> 00:20:34,640
 여러분도 이해하기 쉬우실 거고요.

317
00:20:36,000 --> 00:20:40,500
 해쉬펑션(hash function)의 키를 넣으면  특정 버켓(bucket)을 지정해줘요.

318
00:20:41,420 --> 00:20:43,080
 그럼 나중에 데이터를 찾을 때

319
00:20:44,360 --> 00:20:48,520
 키만 넣으면 내가 원하는 데이터를  빨리 끄집어낼 수 있어요.

320
00:20:49,220 --> 00:20:51,960
 결국에는 시간복잡도가 거의 모든 오퍼레이션이

321
00:20:53,460 --> 00:20:56,060
 빅-오-노테이션으로 나타냈을 때  상수값으로 거의 끝나버려요.

322
00:20:58,960 --> 00:21:00,800
 문제는 버켓 사이즈가 문제가 됩니다.

323
00:21:00,800 --> 00:21:05,180
 우리 자원이 무한하다면 버킷사이즈를 크게 하고 시작할 수 있겠지만

324
00:21:05,180 --> 00:21:08,259
 크게 하고 시작하지 못해요.

325
00:21:08,260 --> 00:21:12,200
 대부분 Python은 버켓 사이즈  8로 해놓고 시작을 합니다.

326
00:21:13,680 --> 00:21:17,060
 버켓이 다 찰 때까지 기다리지 않고

327
00:21:17,060 --> 00:21:18,960
 3분의 2가 차면 리사이즈 해버려요.

328
00:21:20,580 --> 00:21:22,600
 아, 네. 제가 답을 말해버렸네요.

329
00:21:22,600 --> 00:21:25,500
 아 이거 퀴즈로 내려 그랬는데.

330
00:21:25,500 --> 00:21:28,600
 3분의 2가 차면 리사이즈 하는  형식으로 가게 됩니다.

331
00:21:28,600 --> 00:21:34,450
 그리고 이거는 나름 [collision]을 생각해서  최적의 수치라고 저는 믿고 있어요.

332
00:21:34,450 --> 00:21:37,740
 파이썬 개발하신 분들이.

333
00:21:37,890 --> 00:21:41,700
 그래서 처음에 8로 했는데

334
00:21:41,700 --> 00:21:47,610
 3분의 2가 차면 현재 있는  데이터량의 3배로 성장을 시킵니다.

335
00:21:47,610 --> 00:21:51,760
 이 말은 [2/3 * 3] 하면은 2배죠.

336
00:21:51,760 --> 00:21:55,890
 파이썬 3.7 부터 2배씩 성장하게 되어있어요.

337
00:21:55,890 --> 00:21:59,900
 무조건 현재 데이터에서 리사이즈 할 때 2배씩,

338
00:21:59,900 --> 00:22:04,610
 8이면 16 그 다음엔 32 이런 식으로 성장하겠죠.

339
00:22:04,610 --> 00:22:07,180
 실제 Python 소스는 이렇게 생겼어요.

340
00:22:07,180 --> 00:22:12,600
 [insertion_resize]라는게 호출이 되는데  insert 할 때에.

341
00:22:12,600 --> 00:22:13,805
 그게 보면은

342
00:22:13,805 --> 00:22:17,420
 [dictresize]에 [GROWTH_RATE] 하고

343
00:22:17,420 --> 00:22:22,219
 mp, mp라고 되어있죠.  mp가 딕셔너리 오브젝트입니다.

344
00:22:22,219 --> 00:22:25,440
 그 밑에 네모난 곳 보면은

345
00:22:25,440 --> 00:22:27,240
 [ma_used] * 3 이라고 되어있어요.

346
00:22:27,240 --> 00:22:29,520
 현재 사용한 거에 3배로 성장시켜라

347
00:22:29,520 --> 00:22:33,960
 3분의 2만큼 썼으니까, 곱하기 3하면 2배 만큼 성장 시키는 거죠

348
00:22:33,960 --> 00:22:36,940
 계속 2배만큼 성장시킵니다.

349
00:22:36,940 --> 00:22:41,080
 리사이즈 할 때도 2배 단위로만 성장하도록 해놨어요.

350
00:22:41,080 --> 00:22:45,820
 C 를 많이 써 보신 분은 알겠지만  이 for의 가장 아래 것.

351
00:22:45,820 --> 00:22:53,130
 [newsize <<=1] 이게 비트 연산한다는 거 곱하기 2 라는거 아실 거에요.

352
00:22:53,640 --> 00:22:56,390
 아실 거라 믿습니다.

353
00:22:57,330 --> 00:23:01,080
 리사이즈 하게 되면 실제 Python에서  벌어지는 일이 뭐냐

354
00:23:01,080 --> 00:23:03,580
 새로운 메모리를 할당하고 복사를 합니다.

355
00:23:03,580 --> 00:23:05,880
 그리고 해시 밸류를 보고

356
00:23:05,880 --> 00:23:07,240
 버켓과 연결하는 과정이 필요해요.

357
00:23:07,240 --> 00:23:08,800
 여러분 아까 보신 이거

358
00:23:09,720 --> 00:23:11,980
 해쉬 펑션을 태워서

359
00:23:12,780 --> 00:23:16,120
 버켓에 할당하는 과정,

360
00:23:16,120 --> 00:23:18,080
 Python도 똑같이 이 과정을 하는데

361
00:23:18,080 --> 00:23:20,780
 해쉬밸류는 미리 구해놨어요.

362
00:23:20,789 --> 00:23:28,490
 그거를 보고 버켓에 지정을 해주는  역할을 합니다.

363
00:23:37,780 --> 00:23:41,960
 흉내내봤어요.  저도 이제 시간이 얼마나 걸리나 봐야되니까

364
00:23:41,960 --> 00:23:48,080
 지금 노란색 박스 부분이

365
00:23:48,080 --> 00:23:52,780
 3분의 2가 찼을 때  2배씩 성장하는 걸 흉내내봤고

366
00:23:52,780 --> 00:23:57,129
 실제로 얼마나 걸리는지 봤어요.

367
00:23:57,200 --> 00:24:02,040
 69만 건이 넘어가니까  리사이즈 할 때 0.05초 걸려요.

368
00:24:02,040 --> 00:24:06,740
 69만 건을 다룰 일이 없을 수도 있겠지만  이만큼 다룰 때는

369
00:24:06,740 --> 00:24:08,380
 리사이즈하면 0.05초

370
00:24:08,380 --> 00:24:16,549
 100건 했을 때, 이게 100건 기준의 데이터니까  위에 100건 만드는 거 보이시죠?

371
00:24:16,549 --> 00:24:19,060
 네 (발표종료)15분 전이라고 이야기를 해주시는데  저는 곧 끝날 거 같네요.

372
00:24:19,060 --> 00:24:21,000
 천천히 하겠습니다.

373
00:24:21,000 --> 00:24:28,260
 69만건 넘어가는데 0.05초,  상당히 큰 수치예요.

374
00:24:28,260 --> 00:24:31,490
 이만큼 딕셔너리를 다룰 때

375
00:24:31,490 --> 00:24:34,060
 이럴 수 있다는 걸 이해하셔야 됩니다.

376
00:24:35,520 --> 00:24:37,360
 리사이즈를 최소화하고 싶다,

377
00:24:37,360 --> 00:24:42,220
 그러면 미리 크게 할당하고 시작하면 되겠죠.

378
00:24:42,220 --> 00:24:46,460
 Python에서 이거를 제공하는지  열심히 찾아봤는데 딱 하나를 찾아왔어요.

379
00:24:48,860 --> 00:24:52,780
 잠깐 이거부터 보여드릴게요.

380
00:24:52,920 --> 00:24:55,700
 [NewPresized]라는 함수를 찾았는데

381
00:24:55,700 --> 00:24:57,380
 이 함수에서 보면은

382
00:24:57,380 --> 00:25:01,200
 미리 할당하고 시작할 수 있게 제공을 해줘요.

383
00:25:01,200 --> 00:25:04,500
 그런데 좀 어렵게 호출을 하게 만들어놨더라고요.

384
00:25:04,500 --> 00:25:07,760
 맨 위에 보면, 노란색보다 위에 보면

385
00:25:07,760 --> 00:25:13,100
 어떤 타입으로 리턴됐는지 지정을 해놓고,

386
00:25:13,100 --> 00:25:15,020
 처음 노란박스 보면

387
00:25:15,020 --> 00:25:18,440
 프리사이즈 하고 몇 개로 프리사이즈 할지

388
00:25:18,440 --> 00:25:21,740
 버켓을 몇으로 할지 지정해놓는 과정이 있어요.

389
00:25:21,740 --> 00:25:25,280
 이렇게 하고 좀 해봤어요.

390
00:25:25,490 --> 00:25:29,480
 프리사이즈 했을 때, 뒤에 69만 건까지는 안해주고

391
00:25:29,480 --> 00:25:35,960
 Python은 딱 12만 건 정도까지만 해줍니다.

392
00:25:36,180 --> 00:25:38,100
 그러니까 이 중 2분의 3 하니까

393
00:25:39,120 --> 00:25:42,180
 4만 건 정도 되네요.

394
00:25:42,180 --> 00:25:47,800
 여기서 리사이즈 안 하고  데이터가 그로스(growth) 할 수 있게 만들어줘요.

395
00:25:47,800 --> 00:25:51,600
 지금보면 4만 3천건 쪽에 봤을 때

396
00:25:51,600 --> 00:25:53,900
 데이터가 리사이즈해도

397
00:25:53,900 --> 00:25:56,980
 리사이즈라고 예상되는 구간에도  리사이즈 안되고

398
00:25:56,980 --> 00:26:00,740
 시간이 절약되는 것 볼 수 있죠. 그 윗 부분까지.

399
00:26:00,740 --> 00:26:08,380
 아까 결과를 봤을 땐 4만 건 정도에  0.2초 정도 걸리는 걸 볼 수 있습니다.

400
00:26:08,380 --> 00:26:16,050
 결국 리사이즈가 어느 정도 부담이 되는지  느낌이 오시죠.

401
00:26:16,050 --> 00:26:18,180
 실제 이건 Python 소스고요.

402
00:26:18,180 --> 00:26:20,540
 프리사이즈를 했을 때

403
00:26:20,540 --> 00:26:26,660
 Max로는 12만 건 정도까지만  최대 프리사이즈를 할 수 있고요.

404
00:26:26,660 --> 00:26:33,260
 아래 실제 어떻게 데이터를 할당하는지  나와 있습니다.

405
00:26:34,679 --> 00:26:36,200
 생각보다 빨리 끝났네요.

406
00:26:36,200 --> 00:26:39,300
 중간에 안되어서 빨리 해버렸지만

407
00:26:39,300 --> 00:26:41,260
 그래도 가겠습니다.

408
00:26:41,260 --> 00:26:44,460
 내부 구조가 궁금하면 여러분들도  소스를 볼 수 있어요.

409
00:26:44,460 --> 00:26:46,560
 소스가 그렇게 어렵지 않고요.

410
00:26:46,560 --> 00:26:50,640
 C만 조금 이해할 수 있으면,  C랑 중요한 건 포인터 볼 수 있으면

411
00:26:50,640 --> 00:26:51,780
 소스 볼 수 있습니다

412
00:26:51,780 --> 00:26:57,020
 처음에 어렵지만 좀 공부해서 보시면은  좀 쉽게 접근할 수 있을거라 생각합니다.

413
00:26:59,120 --> 00:27:02,780
 제가 참고한 건데, github에 보면  파이썬 소스가 있어요.

414
00:27:02,780 --> 00:27:06,410
 각 버전별로도 올라와 있고요.

415
00:27:06,410 --> 00:27:11,880
 이건 뭐 가서 어렵지 않게 볼 수 있지 않을거라 생각합니다.

416
00:27:11,880 --> 00:27:16,060
 제가 참고한 자료들이 딱 3가지 있습니다.

417
00:27:16,060 --> 00:27:18,180
 이거 하면서 Python 소스 봤고요.

418
00:27:18,180 --> 00:27:20,940
 시간 복잡도, 해시테이블 봤습니다.

419
00:27:20,940 --> 00:27:25,662
 여러분이 프로그램 만드실 때 성능을 고려해야 할 때,

420
00:27:25,662 --> 00:27:30,040
 고려하지 않아야 될 때를 생각하셨으면 좋겠는데

421
00:27:30,040 --> 00:27:34,320
 성능이 중요하지 않은 거 같으면

422
00:27:34,320 --> 00:27:38,220
 성능을 고려하지 않고 빨리 개발하는 걸  저는 택하고 있어요. 일반적으로.

423
00:27:38,220 --> 00:27:41,680
 왜냐하면 사람이 기계보다 비싸기 때문에

424
00:27:41,680 --> 00:27:44,340
 컴퓨터 좀 고생시키면

425
00:27:44,340 --> 00:27:46,460
 내가 빨리 개발하고  저는 다른 걸 할 수 있으니까.

426
00:27:46,460 --> 00:27:50,490
 그런데 가끔 보면 성능에 크리티컬한 부분이  있어요.

427
00:27:50,490 --> 00:27:55,740
 그런 부분은 끝까지 한번 파보는 게  개발할 때 중요합니다.

428
00:27:55,740 --> 00:28:02,960
 Python 볼 때 소스를 보면 어떤 결과를 보일지  쉽게 생각할 수 있는.

429
00:28:03,049 --> 00:28:04,800
 이거 몇 분 보신 분도 있겠지만

430
00:28:04,800 --> 00:28:07,880
 저희 회사 3명 채용중이고요.

431
00:28:07,880 --> 00:28:10,999
 말이 세 명이지만

432
00:28:10,999 --> 00:28:15,140
 암튼 세 명 채용 중이고

433
00:28:15,140 --> 00:28:21,300
 저희 회사 피플펀드 채용 어떻게 하는지  궁금하면 URL 따라서 오시면 됩니다.

434
00:28:21,300 --> 00:28:28,590
 제 발표는 여기까지고요.  질문있으시면 질문하셔도 됩니다.

