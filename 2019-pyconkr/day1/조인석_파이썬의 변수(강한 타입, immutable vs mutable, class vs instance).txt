      <PYCON KOREA 2019>
          [ 파이썬의 변수 ]

-바로 시작하면 됩니까? 알겠습니다. 반갑습니다. 이번 시간에 파이썬의 변수라는 주제로 발표를 맡게 된 조인석입니다. 반갑습니다. 
(박수)
점심식사 맛있게 하셨나요? 제일 힘든 시간에 또 세션이 열리게 돼서 굉장히 당황스럽기는 한데 제가 첫 시간인 줄 몰랐거든요. 일단 제 소개 간단하게 시작하고 세션 하도록 하겠습니다. 
저는 16년차 소프트웨어 엔지니어고요. 지난 년도에도 진행했었고, 현재는 엘라서스라는 오픈소스 검색엔진 쪽에서 근무하고 있습니다.  저희 회사에서 파이썬 커뮤니티에 많이 후원을 하지만 이번 발표는 저희 회사랑 무관하다는 걸  먼저 말씀드리겠습니다. 
이게 제가 집필한 책들이고요. 이거는 제가 번역을 했어요. 파이썬인터뷰는 작년에 출간을 했는데 오늘 키노트로 오셨던 분도, 세 번째 챕터에 계시거든요. 그래서 만나서 싸인도 받았습니다. 기분 좋았고. 
그리고 이 책이 제가 2014년도에 썼던 책의 개정증보판이에요. 그래서 오늘 세 권을 가지고 왔습니다. 적극적으로 참여하시는 여러분께 드리는 시간을 갖도록 할 거고요. 
이 책을 제가 개정증보판을 준비를 하다 보니까 변수 관련된 소스코드나 설명 같은 것들이 모아서 이런 장소에서 발표를 하면 참 재미있겠다는 생각이 들어서 오늘 발표를 준비하게 되었습니다. 

그래서 오늘은 변할 수 있는, 바로 오타가 있네요? 변경할 수 없는 변수와 변경할 수 있는 변수의 차이점, 그리고 클래스와 인스턴스 변수의 차이점, 이런 것들을 이해해보고 소스코드를 작성하는 데 어떤 변수를 선택해야 하는지 이해하면서 좋은 프로그래머가 되기 위한 기본사양을 갖추는 데 목표를 두고 있습니다. 
하지만 깊이 이해하는 시간은 아니니까 너무 겁내지 않으셔도 됩니다. 

제가 이걸 연습을 몇 번 해봤는데 20분 안에 발표하기가 굉장히 어려워요. 그래서 랩을 할 테니까 잘 따라와주시기 바랍니다. 
내용 자체는 그렇게 어렵지 않습니다. 

인트로입니다. 저희 파이썬 공식 튜토리얼 문서가 있어요. 여기 보시면 개체 관련된 설명을 하고 있죠. 그래서 개체에 대한 성격 같은 것을 이야기를 하면서 동일한 객체에 여러 소스, 여러 이름들이 바인딩될 수 있다, 이런 내용들이 있습니다. 
그러면서 하지만 숫자라든지 문자열처럼 변경할 수 없는 데이터타입을 다루는 경우에는 크게 신경쓰지 않아도 된다. 무시해도 된다고 하지만, 하지만 여러분 코드에 뮤터블 오브젝트가 있는 경우, 이런 동일한 객체의 값을 변경할 수 있는 데이터타입을 다룰 때는 서프라이징 이펙트를 만날 수 있다, 이런 내용이 있습니다. 이 내용, 이해하기 쉽습니까? 
아, 끄덕끄덕 하시는 군요. 그러면 제가 오늘 발표할 필요가 없을 것 같은데. 
제가 실은 2015년도에 이분을 만났어요. 드롭박스 본사에 가서 점심을 먹고 이런 저런 이야기를 하면서 문서가 파이썬 자체는 쉬운 언어인데 문서가 왜 이렇게 어렵냐고 했더니 인정을 하시더라고요. 
그래서 프로그램 자체에 익숙하지 않은 분들에게는 다소 어려울 수 있겠지만 저 같은 사람들이 이런 활동을 계속 하다 보면 잘 되지 않을까 이런 이야기가 되어서 지속적으로 활동을 하고 있습니다. 

시작해볼게요. 여기가 파이콘이니까 파이썬 코딩은 다 할 줄 아시죠? 여기 개발자 아니신 분. 아, 아니세요? 어떻게 해. 어떤... 근무하고 계십니까? 
아, 그러면 파이콘 끝나고 나서 코딩 하실 생각이신 거죠? 아, 예. 제일 먼저 말씀하셨으니까 제가 책 한 권 드리겠습니다. 이 앞에 있는 거 하나 가져가세요. 박수 한번 쳐주세요. (박수)
변수 단순하죠. 메모리에 있는 데이터에 쉽게 접근할 수 있게끔 우리가 알기 쉬운 단어로 꼬리표를 달아서 접근을 가능할 수 있게 하는 겁니다. 
하지만 이 변수는 개입되어 있는 메모리 주소가 항상 바뀔 수 있다는 거고요. 혹시 더 자세한 설명을 읽고 싶으시다면 여기 링크에 가서 보시면 됩니다. 

그리고 파이썬은 아주 잘 알려진 다이나믹, 동적 바인딩언어죠. 
여기 그림을 보시면 여기 개가 이 오리를 보니까 오리 냄새가 납니다. 먹어보니까 오리 맛이 나요. 그래서 "아, 이건 오리구나."하고 추론을 하고 있죠. 
이런 식으로 데이터의 타입을 추론하는 언어가 바로 파이썬입니다. 
하지만 그러면서도 강한 타입 언어예요. 강한 타입이라는 것은 데이터변수의 데이터타입이 다르다면 두 개를 연산처리 할 때 반드시 타입변화를 해줘야 하는 언어입니다. 그렇지 않으면 에러가 나겠죠. 
저는 제 경력 동안  10년 동안  자바를 하다가 파이썬을 배운 케이스인데 자바 같은 경우는 유효범위나 파이널 같은 예약어를 가지고 변수를 수정하지 못하게끔 제약을 걸 수 있는 방법이 있는데 파이썬은 그게 없는 겁니다. 처음에 굉장히 헷갈렸어요. 
그래서 파이썬은 배우기 쉬운 언어이지만 실제로 그런 것을 명시하지 않고 명명규칙으로 약속을 가져가면서 코딩을 하기 때문에 그다지 항상 쉽다고 말하기는 어렵다는 게 제 메시지 중 하나입니다. 

처음 다뤄볼 내용은 인뮤터블과 뮤터블입니다. 코딩 다 하시는데 솔직히 이 단어 처음 봤다 하시는 분. 그렇죠? 
책을 여러 번 읽었는데 이런 단어를 본 적이 없습니다. 그렇죠? 
내용이 뭔지 한번 살펴볼게요. 

아주 단순한 코드를 하나 가지고 왔습니다. 자, 문자열을 집어넣은 변수가 하나 있죠. 이 변수에 개체 아이디를 찍어주고 이 문자열에 e라는 값을 하나 덧붙였어요. 그러니까 abcde라고 출력됐죠. 그러고 나서 변수의 값을 보면 어떻게 나오죠? 네? e가 나옵니까? e가 안 나오죠. 
그렇죠? 왜냐하면 이 변수의 값을 변경한 것이 아니라 여기에 값을 덧붙이게 그냥 출력이 된 것뿐입니다. 값은 바뀌지 않았어요. 
여기에 보여지는 건 그냥 생성된 새로운 객체의 값일뿐이에요. 이 값은 다시 호출할 수가 없습니다. 가비지컬렉션 대상이 되겠죠. 

그래서 이걸 우리 의도대로 짜려면 이렇게 해야 하죠. 이 문자열에 e를 더한 새로운 객체값을 변수에 대입을 해야 여기 아무것도 출력이 되지 않으면서 값이 변경되는 것을 확인할 수 있고요. 
넘어가볼게요. 

이번에는 list의 값을 덧붙여보겠습니다. 이렇게 해준 다음에 다섯 번째 항목을 어펜드했습니다. 값 바뀝니까? 바뀌죠? 안 바뀌어요? 지금 다 반대로 말씀하고 계신 것 같은데. 자, 바뀌죠. 리스트니까. 리스트에 항목 넣고 뺄 수 있죠. 
그리고 객체는 변경이 되지 않습니다. 

왼쪽에 봤던 소스코드는 문자열이었어요, 그렇죠? 인뮤터블한 데이터타입이기 때문에 같은 객체값을 생성된 뒤에 변경할 수가 없습니다. 새로 만들어서 할 수밖에 없어요. 하지만 리스트와 같은 데이터타입은 값을 넣거나 뺄 수 있겠죠. 

그렇다면 왜 데이터타입에 인뮤터블과 뮤터블이 있을까요? 가장 중요한 이유는 성능적인 이점 때문에 그렇습니다. 
인뮤터블은 굉장히 다양한 매소드를 제공하죠. 그래서 편의성은 떨어지지만 성능상의 이점을 가져올 수 있습니다. 
또 저희 회사에서 제공하는 엘라이서치 같은 것도 내부적으로는 다 인뮤터블이에요. 수정할 수 있는 것은 제공하지만 실제로 호출했을 때는 객체를 삭제하고 다시 새로운 객체를 하는 형태로 되어 있습니다. 
이게 왜 중요하냐. 예를 들어서 루프를 막 돌면서 인뮤터블 객체 값을 변경하는 소스코드가 있다고 가정해볼게요. 그러면 객체가 계속 생성이 되겠죠. 그러다 보면 메모리에 객체들이 차지하는 공간이 점점 늘어나면서 이 소스코드가 메모리 때문에 실행되지 않는 경우가 발생할 수 있어요. 
반대로 뮤터블한 객체에 값을 계속 집어넣습니다. 그리고 다 썼는데 제가 그거를 삭제를 안 하거나 가비지컬렉션 대상으로 해놓지 않으면 그 녀석은 계속 메모리에 상주하고 있겠죠. 
그래서 여러분이 소스코드를 효율적으로 짜려면 이런 특징들을 잘 이해하고 있어야 합니다. 
그러면 어떤 데이터타입이 어떤 건지 보시면 제 책에 있는 내용인데 리스트타입이나 딕셔너리, 세트 등등이 바로 뮤터블입니다. 변할 수 있는 거고요. 
왼쪽 같은 경우에 변할 수 없는 게 있죠. 튜플 같은 경우에 그런 거 본 적 있을 거예요. 그러면 이런 생각 할 수 있잖아요. 아, 그냥 딕셔너리로 돌리지 왜 그렇게 바꿨지? 그런 것이 필요한 내용입니다. 

어렵습니까? 안 어렵죠? 어려운 것 같은데, 표정들이. 아니죠? (웃음) 
이걸 인지한 상태에서 클래스변수와 인스턴스 변수로 넘어가겠습니다. 
이거 제 책에 있는 소스코드 아주 간단한 거예요. 클래스 하나 정의해볼게요. 클래스변수로 랭귀지라는 리스트를 정의를 했어요. 이거는 프로그래머라는 객체를 만들 때 내가 다룰 줄 아는 랭귀지를 다루기 위해서 이렇게 함수를 만들었습니다. 그래서 인수로 들어온 랭귀지를 여기에 더하는 아주 단순한 코드죠. 
그리고 함수가 초기화 될 때 내 이름을 넣어주면 인스턴스 변수 네임에 내 이름을 넣습니다. 

크리스라는 객체를 만들었습니다. 저예요. 저는 파이썬도 자바도 할 줄 알아서, 말이 막 꼬이네요. 하도 빨리  해서. 이렇게 했어요. 
두 번째 객체는 우진이라고 만들었어요. 우진이는 두 달 된 저희 막내아들입니다. 당연히 프로그램 할 줄 모르겠죠. 
그래서 언어추가를 안 했어요. 값이 뭐가 나오죠? 
자, 들어가 있죠, 값이. 왜 들어가 있죠? 앞에서 넣었으니까, 그렇죠? 
객체를 통해서 접근을 했지만 어쨌든 클래스변수에 뮤터블한 리스트를 변경했기 때문에 두 개가 동일한 객체를 바라보고 있는 거예요. 
이게 아까 말씀드렸던 서프라이징 이펙트 중에 하나입니다. 여러분이 이렇게 코드를 짤 생각이 아니었는데 갑자기 이렇게 보이는 거예요. 

이걸 제대로 짜려면 클래스변수가 아니라 인스턴스 변수로 집어넣어야 합니다. 그렇죠? 이렇게 해주면 이 랭귀지는 다른 객체간에 공유가 되지 않겠죠. 
그리고 혹시 자바 할 줄 안다. 그렇죠? 꽤 계시네요. 이런 스태틱 언어 다루신 분들 보시면 이 소스코드를 자바를 배운 상태에서 파이썬 코드를 보면 이상해보일 수 있어요. 왜냐하면 변수를 위해서 선언을 하지 않았죠. 
자바 같은 언어는 변수를 선언해서 이게 무슨 변수인지 이야기해주고 갖다 쓰는데 파이썬은 그냥 막 갖다씁니다. 그리고 값이 없으면 변수가 막 생기죠. 이런 부분을 조심해서 코딩을 해줘야 합니다. 

그래서 정리를 하자면 클래스 변수는 객체간에 동일한 값을 공유를 할 때 사용할 수 있고요. 객체간에 값을 따로  관리해야 되는 경우는 반드시 인스턴스 변수를 쓰셔야 됩니다. 아무 생각없이 아, 이거는 클래스 변수에 넣고 이거를 아무 의도없이 사용하시면 나중에 그런 서프라이징 이펙트를 보실 수가 있어요. 

하나만 더 볼게요. 이번에는 북리더라는 클래스를 만들었어요. 이번에는 이 책을 읽는 사람이 어느 나라에 상주하고 있는지를 클래스변수에 명시를 해봤습니다. 그리고 초기함수는 아까 프로그램하고 똑같죠. 그리고 리드북이라는 함수를 호출해서 정의를 했죠. 
그래서 여기에서 입력한 인스턴스 변수를 집어넣고 여기에 정의되어 있는 변수를 그냥 출력하는 아주 단순한 겁니다. 이것도 실행해볼게요. 

이번에는 크리스랑 안나를 만들었어요. 안나는 제 첫째 딸 이름입니다. 그래서 둘이 같이 책을 읽었다. 함수를 호출해보니까 크리스, 사우스코리아. 안나, 사우스코리아. 잘 나오고 있죠. 
그런데 제가 제 딸을 데리고 미국에 출장을 갔어요. 값을 바꿔줘야겠네. 그래서 크리스.컨트리하고 USA로 바뀌었습니다. 안나, 바뀝니까? 안 바뀝니까? 
안 바뀌어요? 거기 지금 방금 한 분, 이렇게 하신 분? 책 하나 드릴게요. 네, 그 분. 이거 책 하나 가져가세요. 감사합니다. 
안 바뀌죠? 혹시 왜 안 바뀌는지도 말씀하실 수 있나요? 좋습니다. 좋아요. 하나 가져가시면 돼요. 고맙습니다. 

인뮤터블이죠. 이게 지금 컨츄리가. 문자열이었기 때문에 이 객체의 값을 바꾸는 게 아니라 새로 생성되어버린 거죠. 내가 아까 북리더에 있는 얘를 본 게 아니라 새로운 변수가 생성되어버린 거예요. 
그래서 이런 내용들, 제가 책에 설명해놨고요. 
그래서 이거 굉장히 헷갈려요, 그렇죠? 인뮤터블, 뮤터블에 대한 인지가 없이 값을 막 바꾸다 보면 이게 공유가 갑자기 안 돼요. 

그리고 또 하나 보여드릴게요. 어, 값이 안 바뀌었네? 아, 맞다. 클래스 변수는 객체가 아니라 클래스명으로 접근했어야지, 라는 생각이 갑자기 납니다. 
그래서 여기서 값을 바꿨어요. 자, 크리스, 안나. 값 어떻게 될까요? 그리고 이게 변경된 이후에 생성된 션이라는 객체의 컨츄리값은 어떻게 될까요? 
저만 빼고 바뀌었죠. 이거 이해되십니까? 지금? 
지금 이 작업을 통해서 인뮤터블한 객체의 값이 바뀌었기 때문에 얘는 낙동강오리알 신세가 되는 거예요. 그 뒤에 와서 클래스 변수의 값을 아무리 바꿔봤자 얘는 다른 객체를 바라보고 있기 때문에 값을 변경할 수가 없습니다. 

그래서 다시 한 번 정리하자면, 정리하기 전에 이걸 제대로 정의하려면 실은 이 클래스 변수는 일종의 상수 같은 개념이었어요. 그래서 클래스 먼저 바꿔주고 보시면 이건 내부용으로만 쓸 변수라는 의미에서 언더스코어를 앞에 붙여주고요. 컨츄리를 대문자로 썼습니다. 그다음에 문자를 집어넣어줬죠. 
그리고 리드북에서 이 컨츄리를 호출할 때 셀프가 아니라 클래스명으로 호출을 했어요. 그렇죠? 
그러고 나서 객체를 만들어봅니다. 인석이로 만들고 찍어봤어요. 사우스코리아 잘 찍히죠. 
그런데 내부용인데 누가 바꿨어요. 이런 경우 꼭 있죠? 자, 프로젝트 하시는 분들. 분명히 있습니다. 아무리 열심히 설명을 하고 교육을 하고 공부를 해도 우리는 사람이기 때문에 실수를 할 수밖에 없어요. 
하지만 리드북을 찍었을 때의 값은 뭐가 나오죠? 사우스코리아가 나오죠. 왜? 클래스변수로 접근했으니까. 그렇죠? 
조금 더 안전하게 쓸 수 있는 거예요. 
물론  누군가 여기서 클래스 변수명으로 접근해서 값을 바꿔버리면 내 값이 바뀌겠죠. 절대 그러시면 안 됩니다. 
그래서 정리하자면 클래스 변수가 모든 객체의 값을 공유하는 게 아니라 인스턴스화 되는 시점에 같은 값을 공유할 수 있는 그런 개념이고요. 
한 가지 더 말씀드리자면 클래스 변수는 객체 이름으로 셀프로 접근하는 것이 아니라 클래스 이름으로 접근을 하시고 되도록이면 값이 변경되지 않는 상수와 같은 값을 쓸 때 사용하시는 게 좋습니다. 
자바코드에 익숙하시면 객체를 생성하지 않고 변수에 접근하려면 스태틱을 써야겠죠. 그리고 내가 이 값을 변경하고 싶지 않으면 파이널리를 쓸 수 있지만 파이썬은 쓸 수가 없습니다. 이 점 꼭 인지하시기 바랍니다. 

와, 시간 엄청 빠르네요. 마지막입니다. 
왼쪽에 있는 소스코드는 아까 전에 봤던 페이지에 유효범위와 네임스페이스에 대한 예제를 설명한 코드예요. 우리는 개발자니까 위에서부터 보지 말고 실제로 실행되는 코드 순서부터 볼게요. 
자, 이거 호출했습니다. 함수선언문 넘어가서 여기부터 실행이 되겠죠. 스팸이라는 함수에 테스트스팸을 넣고요. 그러면 이 내부에 있는 함수가 호출이 되죠. 그러면서 스팸함수에 로컬함수를 호출했어요. 
아, 말이 꼬이기 시작합니다. 이 함수를 실행하고 밖으로 나온 다음에 스팸을 찍었어요. 테스트가 찍히죠. 그렇죠? 
이 스팸은 이 녀석이죠. 얘는 이 안에만 있죠. 우리 파이썬 코리아 커뮤니티 페이스북 질문들 보면 이런 거 되게 많지 않아요? 그렇죠? 최근에도 몇 개 본 것 같아요. 그거 캡쳐 뜨다가 그냥 내가 만들어서 놔야지 했는데 이 유효범위에 대한 오해가 있어서 이런 경우가 종종 발생합니다. 

논로컬 볼까요? 두 논로컬 호출했습니다. 논로컬 스팸 변수 나왔죠. 그러면서 스팸 변수를 출력을 해봤어요. 그러면 값이 바뀌나요? 안 바뀌나요? 바뀝니다. 
논로컬, 저는 보고 좀 놀랐어요. 이게 왜 필요할까 생각을 했는데 로컬 변수가 아닌데 글로벌 변수도 아닌, 그러니까 내 함수 영역 밖에 있는 변수를 호출을 하는데 글로벌 변수까지 가지 않는 그런 변수가 얘입니다. 파이썬3부터 나왔다고 하더라고요. 
왜 필요한지는 사실 잘 모르겠어요. 

그다음에 이제 글로벌 함수 호출했습니다. 제가 지금 당이 갑자기 떨어지나 봐요. 말이 느려지고 혀가 꼬이고 있죠. 
글로벌 호출하니까 어떻게 되죠? 글로벌 호출한 다음에 글로벌 변수의 값을 변경하고 나서 다시 스팸 변수를 호출하면 값이 뭐가 나오죠? 논로컬 나오죠. 그렇죠? 
이 스틸, 이 변수를 호출하고 있죠. 그러고 나서 함수가 끝난 다음에 글로벌 스쿱에 있는 스팸 변수를 호출하면 그때서야 글로벌이 나옵니다. 
자, 두 가지 볼게요. 자바 같은 코드에 익숙하신 분들은 이 안쪽에서 뭔가 예약을 쓰는 것 자체가 어색할 수 있어요. 왜냐하면 보통 바깥에 세팅을 해놓고 나서 변수명 불러서 그 변수를 쓰거든요. 그런데 파이썬은 반대예요. 안쪽에 있는 논로컬이 뭐라는 걸 정의를 하고 있죠. 이런 부분이 차이점이 있고요. 

이걸 보면 글로벌 영역에 스팸 변수가 없었죠. 그런데 안에 안에 있는 함수에서 호출이 돼서 이 스팸 변수가 없으니까 글로벌 스팸의 변수를 만들어버렸어요. 이거 무섭지 않습니까? 좋은 코드입니까? 

자, 여러분. 좋은 코드가 절대 아닙니다. 그렇죠? 이 스팸이라는 변수가 네 개가 있는데 이게 로컬인지 글로벌인지 뭔 변수인지 알 길이 없어요. 이런 코드는 우리 공식 튜토리얼 문서가 있지만 여러분한테 설명하기 위해서 있는 거지 절대로 따라하면 안 됩니다. 그래서 우리에게 필요한 건 스타일가이드입니다. 그렇죠? 

PEP8. 다들 많이 보셨죠? 하나 따왔어요. 
내부용으로 사용할 경우에는 언더스코어를 앞에 붙여달라고 하고 있죠. 그리고 하위클래스에서 이름이 충돌하는 걸 방지하기 위해서는 언더스코어 두 개를 붙여라. 그래서 맹글링 규칙을 따라라, 이렇게 이야기하고 있죠. 
물론  이렇게 바꿔버리는 사람도 있는데 그러면 절대 안 되겠죠. 

그리고 또 하나. 이 링크에 가보시면 구글 내부에서 쓰는 파이썬 코드 스타일 가이드가 아주 잘 되어 있습니다. 여기 보면 귀도 아저씨도 구글에서 오랫동안  일을 하셨죠. 귀도가 추천한 스타일들이에요. 
상수인 경우에는 다 대문자로 되어 있고 내부용은 언더바를 붙이고 있습니다. 그런데 구글은 언더바를 사용하지 말아달라고 이야기를 하고 있어요. 
PEP8은 사용하고 있다고 하지만 구글 같은 경우에는 사용하지 말아라. 왜냐하면 언더스코어를 쓰는 것 자체가 타이핑하기도 좋고 읽기도 하고 테스트할 때도 편하기 때문이다. 비정상적인 접근을 막도록 하라는 게 메시지입니다. 
그리고 글로벌 변수, 쓰지 말랍니다. 장점? 오케이셔널 유스풀. 거의 필요가 없대요. 왜냐하면 값이 언제든지 변경될 수 있기 때문에. 굳이 필요하면 모듈 단위의 콘스탄트 형태로 해라. 

정리하겠습니다. 오늘 모르고 오셨던 분들은 아마 이 시간을 통해서 뮤터블, 인뮤터블 아셨을 것 같아요. 이것에 따라 다르게 동작할 수 있으니까 주의해야 하고 유효범위 신경써야 하고 어떤 변수를 신경써야 할지 잘 모르겠다면 좁은 범위의 변수를 사용하는 게 안전하고 그렇게 하다가 리팩토리를 할 시점에 되면 스쿱에 넣게 할 수 있겠죠. 
그리고 내부용으로 쓸 때는 언더스코어 쓰시고요. 글로벌변수는 가능하면 피하도록 하고 파이썬코딩스타일 가이드를 반드시 따라주시기 바랍니다. 
행복한 코딩하시기 바랍니다. 힘드네요. 
(박수)
혹시 질문 받을 시간 있나요? 아, 그래요? 죄송합니다. 질문을 받을 시간이 없을 것 같은데 개인적으로 저한테 오시면 답드릴 거고요. 제가 엘라스틱 소속이라 엘라스틱 부스에 오시면 있습니다. 다음 번에 또 뵙겠습니다. 좋은 시간 되시기 바랍니다. 감사합니다. (박수)

-(사회자) 발표해주신 발표자 분께 다시 한 번 감사말씀 드립니다. 공지 말씀 드리겠습니다. 2층에서 굿즈 배부가 있습니다. 혹시 못 받아가신 분들께서는 받아가시기 바랍니다. 감사합니다. 