https://youtu.be/yWZLVv7TqNE

-(사회자) : 네, 곧 발표가 시작되니 자리에 앉아서 기다려주시기 바랍니다.
네, 안녕하세요.
이번 시간에는 김민중 님께서 지하철 환기실 공조기 고장 감지 모델로 강의를 시작하겠습니다. 발표자 분 앞으로 모시겠습니다.
-(박수)
-(김민중) : 만나서 반갑습니다.
어떻게 점심식사는 맛있게 드셨나요?!
감사합니다.
이 화면 좀 띄워주시겠어요?
안녕하세요. 파이썬을 활용한 데이터 분석 사례라는 제목으로 발표를 진행할 국가수리과학연구소 김민중입니다.
먼저 바쁘신 와중에 참석해 주셔서 감사합니다.
제 소개를 좀 드리겠습니다.
저는 여기에 계신 분들이랑 Background가 좀 다를 수 있다고 생각하는데 저는 개발자는 아니고요. 수학을 전공을 했습니다.
그래서 제가 지금 현재 일하고 있는 곳도 정부출현연구소인 국가수리과학연구소라는 곳에서 근무를 하고 있습니다. 제가 하고 있는 일은 실제 기업체라든지 공공기관이 가지고 있는 산업문제를 발굴하고 이에 대한 수학적인 해결지원을 해 주는 업무를 하고 있습니다.
지금까지는 저희가 국가기관이다 보니까 무료로 진행을 하고 있습니다.
그래서 저희가 지금 현재 교통공사랑 진행했던 문제 해결 사례를 소개해드리는 방식으로 발표를 진행하도록 하겠습니다.
이 사진은 제가 여러분들과 아이스브레이킹을 하기 위해서 준비한 사진인데요. 제가 근무하는 곳은 국가수리과학연구소인데, 지금 현재 육아휴직 중입니다. 6월 말에 제 딸이 태어나서 저는 지금 얘기를 보고 있습니다. 그래서 오늘 새벽에도 한 시간마다 일어나는 애기에게 분유를 주면서 잠을 조금씩 잤고요.
발표가 끝나고 오후에 제가 원하는 세션에 참석을 하고 또 바로 애기를 보러 가야 됩니다.
-(박수)
감사합니다.
그래서 다음 발표를 이어나가면 Why Python, Pycon이라고 붙여놨는데 파이콘 참석이 올해 처음입니다. 그래서 발표를 결심하게 된 이유는 제가 전공이 수학자인데, 전공 분야의 생태계가 많이 변하고 있습니다. 분명히 개발자는 아니지만 파이썬이라고 하는 데이터 분석툴을 이용해서 본인의 수학적 연구를 한다거나 저처럼 산업문제를 해결하는 데 파이썬을 활용한다던가 수학적 생태계가 변화하고 있는 거를 보여드리고자 파이콘에 참석하게 되었습니다.
그리고 왜 파이썬이냐, 라고 하는 제가 타이틀을 달아놨는데 저는 처음에 산업문제, 기업에 있는 데이터분석을 할 때 처음에 알을 먼저 시작했습니다.
알을 먼저 시작했는데 분명히 통계 패키지라던지 알도 패키지가 잘 짜여져 있었는데 제가 하고 있는 데이터분석이라고 하는 업무적인 특성상 알은 한계들이 많이 있었습니다.
라이브러리들이 검증되지 않은 부분들도 많이 있었고요.
그리고 사용자 유저라던지 유저층도 파이썬만큼 두텁지 않은 문제가 있어서 저는 일을 하다가 파이썬으로 전향을 했습니다.
그래서 제가 생각하는 파이썬의 장점은 우선 직관적인 코드 문법이 좋았고요.
저도 파이썬을 공부한 지 그렇게 오래 되지 않았기 때문에 새로운 걸 배워야 되는데 파이썬은 공부하기가 쉬었습니다.
그리고 다양한 유저층이 있어서 제가 에러를 낸 코드라던지 제가 궁금한 것들을 구글에 검색을 해서 해결하는 데 유용했습니다.
검증된 패키지들이 파이썬은 많았습니다.
제가 주로 사용하는 넘피, 판다스, 싸이킹런, 텐서플로우, 캐라스 등 제가 굳이 설명을 하지 않아도 다들 아실만한 라이브러리들이 잘 있었습니다. 그래서 제 다음과 같은 순서로 제 발표를 진행하겠습니다.
먼저 파이썬을 활용해서 서울교통공사와 문제를 해결했는데 그래서 도대체 어떠한 문제를 해결했는지 어떠한 데이터분석을 했는지 먼저 제가 소개를 드리겠고요.
교통공사와 공동으로 진행해서 얻었던 결과, 데이터분석 결과, 실적을 소개하는 순으로 발표를 진행하도록 하겠습니다.
먼저 지하철역에는 다음과 같은 기계설비들이 있습니다.
환기, 냉방, 배수 그리고 승강, 엘리베이터, 에스컬레이터, 위생 이런 다양한 기계설비들이 존재하는데 이러한 기계설비들을 자동제어하고 데이터분석을 하기 위해서 서울교통공사에서는 삼바라고 하는 시스템을 자체개발해서 운용하고 있습니다.
보시는 기계설비들에 장착되어 있는 아이오티 센서에서 데이터를 수집해서 해당 설비에 대한 자동제어를 하고 있는 상황인데 시스템 구축은 하드웨어 측면에서 다 완료가 됐지만 센싱 데이터를 이용해서 설비의 고장을 감지하거나 예측을 하는 알고리즘이 존재하지 않았습니다.
조금 더 깊게 설명을 드리면 그냥 정말 들어오는 센싱 데이터의 값이 어떠한 값을 넘었는지 안 넘었는지를 가지고 지금 현재 이 상을 판단하는 아주 기본적인 수준의 알고리즘을 구축을 해서 사용을 하고 있는 상태였었습니다.
그래서 이런 해당 이슈를 저희에게 의뢰를 해왔고요.
그래서 저는 공조기 모터에 대한 기계설비들이 다양하게 존재하는데 저희는 공조기 모터에 대한 이상 감지 알고리즘 개발을 공동 연구하기로 했습니다.
아까 말씀드린 것처럼 설비들이 다양한데 모든 설비에 대한 이상 감지 알고리즘을 저희가 만들기는 무리가 있고, 제가 말씀드렸듯이 저희는 무료로 진행하고 있습니다. 그래서 무리가 있고요. 딱 고장이 많은 한 장비만 타겟으로 데이터분석을 해보자고 해서 골랐던 게 공조기입니다.
공조기가 뭔지 간단하게 설명을 드리면 승강장 내부에 있는 공기와 외부에 있는 신선한 공기를 순환시켜주는 장비입니다.
보이시는 저 사진은 노원역에 환기실에 있는 공조기를 제가 직접 찍은 사진입니다.
여기가 환기실 내부인데 여러분이 생각하시는 것처럼 환기실 내부가 많이 더럽습니다.
공기도 안 좋고 그래서 실제적으로 이거를 유관점검을 통해서 고장이 있는지 없는지를 확인해야 되는데 실제로 잘 유관점검을 안 한다고 들었습니다.
그다음 공조기에 있는 주요 부품인 V벨트를 소개해드리면 V벨트는 저기에 보이시는 오른쪽 하단에 보이시는 저 모터가 있는데 모터의 회전력을 환풍기로 전달해 주는 역할을 하는 부품입니다.
작동하는 걸 보시면 지금 모터가 회전하는 게 보이시죠?
모터의 회전력을 실제 저 환풍기에 있는 저 친구로 회전력을 전달해 주는 부품입니다.
V자 모양으로 생겼다고 해서 V벨트입니다.
어떠한 데이터를 수집을 했는지 그 데이터에 대한 설명을 좀 드리면, 공조기 모터에서 저희는 전류 데이터를 수집했습니다.
공조기가 당연히 작동하려면 전기 에너지가 들어가야겠죠. 그래서 저희는 그냥 자동으로 추출할 수 있는 전류 전기 데이터를 활용했고요. 전류 데이터는 회전력과 밀접한 관계가 있습니다.
저희에게 엑셀 형식으로 데이터를 제공해줬었는데 간단하게 데이터를 찍으면 이런 식으로 나옵니다.
0.5초 단위로 전류값들이 수집이 되고 실제 그 전류값이 몇인지 벨류로 보여주는 형식입니다.
노원역 한 장비에 전류 데이터 예시를 보여드리면 다음과 같습니다.
그래프 보시는 것처럼 엑스축은 시간을 의미하고 와이축은 그 시간에 기록된 전류를 보여줍니다. 생각했던 거랑 약간 느낌이 다르다는 생각하실 수 있는데 이 공조기가 24시간 계속 작동하는 게 아니고요.
스케줄에 의해서 자동으로 온/오프되는 방식입니다.
그래서 보시면 이게 꺼져있는 상태에서는 거의 0 근처, 플랫하게 있다가, 켜지는 시점에 확 뜁니다.
몇 번 정도 가동이 됐는지 실제로 눈으로 보실 수 있겠죠.
저희 연구 목표를 다시 한 번 설명해드리면 이렇게 각 장비마다 수집되는 전류 데이터를 가지고 공조기 모터에 이상을 감지하거나 또는 주요 부품의 상태를 모니터링하는 모델을 개발하는 것이었습니다.
어떻게 보시면 이게 저희가 추진했던 추진실적이라고 보실 수 있는데, 저희는 총 두 가지의 문제에 접근했습니다.
첫 번째는 공조기에 달려있는 V벨트가 탈락이 되는 상황이 발생합니다.
끊어지거나 또는 슬립이 발생하는데 그러한 탈락상황을 감지하는 알고리즘을 한번 만들어보자, 이게 첫 번째 저희의 목표였고요.
두 번째는 공조기에 있는 주요 부품, V벨트라던지 베어링, 지금 주요 부품들에 컨디션, 상태가 지금 교체가 필요한 상태인지 아닌지 이거를 예측하는 알고리즘을 개발했습니다.
조금 더 디테일하게 설명을 드리면 첫 번째 공조기 모터에 장착된 V벨트의 탈락을 감지하는 알고리즘을 저희가 만들었는데, 벨트가 중간에 끊어지거나 벨트에 슬립이 발생하면 환기실에 전달하는 회전력이 부족해져서 돌아가는 게 덜해집니다. 그래서 V벨트를 한줄씩 탈락한 상황을 시뮬레이션해서 데이터를 수집했습니다.
한 예를 보시면 지금 딱 다섯 줄인가요? 다섯 줄의 데이터가 보이는데 0이라고 라벨이 되어 있는 거는 V벨트가 정상적으로 다 장착되어 있는 상태에서 작동한 전류입니다.
그리고 1은 V벨트에 한 1열이 탈락된 상태, 2는 V벨트 두 줄이 탈락된 상태, 어떠신가요? 눈으로 보시는 것처럼 V벨트가 있고 없고에 따라서 명확한 차이가 보여지죠. 그래서 저희는 V벨트가 탈락된 상황을 감지하는 알고리즘을 만들고자 했습니다.
제가 굳이 안 가도 되는데 노원역까지 직접 가서 교통공사 분들과 같이 V벨트를 탈락을 직접 시키고 데이터를 수집
수집했습니다.
제 사진인데 보시면 이 날이 제일 힘들었습니다. 엄청 덥고요.
보시는 것처럼 V벨트가 위험한 장비이다 보니까 커버에 씌워져 있어요. 직접 커버를 떼고 한 줄씩 떼서 데이터를 수집했습니다.
저희가 어떠한 방식으로 문제를 해결했는지 알고리즘을 약간 간단하게 설명을 드리면, 앞에서 보셨던 것처럼 데이터는 켜지는 시점 단위로 딱딱딱딱 세그멘테이션 되어 있지 않습니다.
아까 보시는 것처럼 24시간 동안 쭉 수집된 데이터이기 때문에 이거를 먼저 켜지는 시점 단위로 데이터를 잘라야겠죠.
그래서 저희는 이러한 방법으로 데이터를 잘랐습니다.
조금 더 설명을 드리면 지금 전류가 멈춰있는 상태에서 가동이 되면 딱 피크를 찍고 내려오는 형태인데 언제 피크를 찍는지, 즉 켜지는 시점을 찾기 위해서 우선 시간 index에서 최고 전류값의 2분의 1이 넘는 구간들을 추출을 했고요.
추출된 구간에서 언제가 켜지는 시점인지 그 시점을 찾기 위해서 index의 디퍼런스가 저기에는 1이라고 돼 있는데 1를 넘는 점을 찾아서 기록했습니다.
켜지는 시점을 추출을 해서 켜지는 시점을 기준으로 해서 플러스, 마이너스, 일정한 시간, 일정한 타임스탭을 해서 켜지는 것을 기준으로 데이터를 잘랐습니다. 나온 결과가 이런 식으로 나옵니다.
언제 이 공조기가 작동을 했는지 그리고 그 구간에 전류값들이 어떻게 기록이 되었는지를 보여줍니다.
저희에게 제공해 준 데이터가 엑셀이다 보니까 파이썬에서 엑셀을 잘 다룰 수 있는 판다스를 이용해서 간단하게 알고리즘을 짰고요.
그다음은 분할된 데이터를 가지고 실제로 어떤 게 정상상태이고 어떤 게 1열 탈락, 2열 탈락인지 실제로 모델을 만들기 전에 플루팅을 해봤는데 어떤가요? 명확한 차이가 있죠. 정상인 상태랑 V벨트가 탈락된 상태. 이러한 케이스들은 잘 된 케이스들인데 저희가 고장 상황을 하는 모델을 간단한 딥러닝 모델을 만들어서 교통공사에 제공을 했고요.
문제는 이렇습니다.
저희가 공조기에 대한 많은 여러 개의 공조기에 대한 탈락 감지 모델을 개발했는데 첫 번째 문제는 데이터를 학습하기 위해서는 이게 지도학습이다 보니까 데이터를 학습하기 위해서는 실제로 V벨트를 다 탈락한 거를 생성해야 되는데 그거를 전부 하기가 어렵습니다. 실제로 공조기가 8000개가 되고요. 데이터 수집에 한계가 있었고요.
지금 보시는 것처럼 정상, 1열 탈락, 2열 탈락 이런 친구들의 구별이 잘 안 됐죠. 그래서 이러한 한계들이 존재했습니다.
첫 번째 저희가 해결하고자 했던 V벨트 탈락 모델은 여기서 한계를 갖고 마무리를 하고 그다음에는 조금 더 쉬운 문제로 접근을 하기로 했습니다.
쉽다는 말은 무슨 말이냐면 데이터 수집이 용이한 문제로 골랐습니다.
어떤 문제냐면 모터에는 여러 가지 부품들이 존재하겠지요.
V벨트라던지 베어링, 이런 것들이 있는데 이런 부품이 노후화가 되면 교체가 필요한데 부품의 교체가 필요한 상황인지를 판단하는 모델을 개발했습니다.
저희는 부품 교체가 된 시점이 각 부품마다 존재할 텐데 저희가 가정을 한 게, 교체가 일어났어요.
교체가 일어났으면 그 교체 바로 직전은 부품 상태가 제일 안 좋은 상태이고 교체 직후는 부품 상태가 가장 좋은 상태라고 가정을 해서, 부품의 교체 이전과 이후를 구별하는 모델을 만들기로 했습니다.
저희가 만든 모델의 이름이 원-스톱 모델인데 왜 원-스톱 모델이라고 이름을 붙였냐면 앞에서 저희가 했던 문제의 한계점은 각 공조기마다 V벨트 탈락을 감지하기 위해서는 V벨트 전부 다 탈락을 해야 되고 그 공조기마다 모델을 새로 만들어야 되는데 지금 이 부붐의 이상을 감지하는 모델은 모든 공조기에 적용할 수 있는 모델입니다.
방법을 설명을 드리면 앞에서 했던 거랑 똑같이 그냥 이렇게 24시간 동안 수집이 되는 데이터를 먼저 똑같이 공조기 작동 시점으로 세그멘테이션을 합니다. 앞에서 했던 방법이랑 유사한 방법을 사용했고요.
교체 날짜가 부품마다 주어져 있는데 그 교체 날짜를 기준으로 교체 이전과 이후를 자동으로 라벨링 해 주는 방법을 알고리즘으로 넣었습니다.
왼쪽에 있는 걸 보시면 군자역에 있는 한 공조기에서 수집된 데이터를 시점 단위로 딴 건데, 교체가 발생을 했죠.
교체 발생 이전과 이후를 자동으로 저렇게 오른쪽과 같이 라벨링을 해줍니다.
이제 어떻게 하냐면 저 자동으로 달린 라벨을 바탕으로 그냥 바이더리 케이스를 하는 거죠. 부품 이전은 교체가 필요한 상태, 이후는 교체가 필요없는 좋은 상태, 이렇게 해서 모델을 만드는데 제가 설명드린 것처럼 원-스톱 모델, 즉 공조기에 디펜더드하지 않는 유니버셜한 알고리즘으로 짰고요.
그래서 다양한 공조기와 주요 부품에 대해서 테스트를 해봤는데 보시면 이거는 V벨트에 대한 그림입니다.
교체 전과 후가 빨간색과 파란색으로 라벨링이 되어 있는 거고요.
보시는 것처럼 명확하게 차이가 있는 친구들도 있고 좀 비슷한 친구들도 있습니다.
이거는 베어링의 교체 이전과 이후를 자동으로 라벨링해 주는 거고요.
모델을 개별적, 공조기마다 적용하지 않았는데 정확도가 어느 정도 나왔냐면 보시면 이렇게 나옵니다. V벨트에 대한 결과인데 교체 전과 후 데이터는 왼쪽과 같이 나오고요. 정확도가 만족할만한 수준으로 나오죠.
지금 두 번째 문제는 첫 번째 문제와 다르게 V벨트를 직접 제거하거나 그럴 필요 없이 교체 날짜만 가지고 자동으로 모델을 만들어준 결과입니다.
그래서 좀 적용하기 편하겠지요.
오른쪽에 보시는 정확도라고 하는 친구는 뭐냐면 공조기가 8000대가 되다 보니까 슬림한 모델을 테스트해보고 싶다는 요청이 있어서 모델을 슬림하게 짜서 적용한 결과입니다. 그런데 보시면 정확도가 그렇게 크게 떨어지지 않죠.
이 결과는 베어링에 대한 결과입니다.
평균적으로 한 95% 이상 정확도를 얻었고요.
저희는 케라스, 텐사플로우를 이용한 모델을 짰는데 모델은 그렇게 복잡하지 않고 간단하게 모델을 구성했고요.
모델에 대한 정보는 이렇게 있습니다.
저희는 다양한 테스트를 해봤습니다.
시계열 데이터이다 보니까 알엔엠 등을 활용해봤는데 속도 면에서 제일 효율적이고 비슷한 것을 채택을 했습니다.
제 발표는 여기까지입니다. 감사합니다.
-(박수)
혹시 질문이 있으신가요?
-(사회자) : 질문은 마이크에 가셔서 하시면 됩니다.
-(질문) : 발표 잘 들었습니다. 그런데 정확도가 어떤 거를 말씀하시는지 궁금하거든요.
테스트 트레이닝셋을 나눈 다음에 트레이닝셋으로 학습한 것인지 아니면..
그러면 저거를 가지고 실제 돌아가는 게 실제적용예측은?
-(김민중) : 실제 이 솔루션을 탑재하기 위해서는 과정을 거치는데 저희는 파이썬 안에서만 테스트를 한 결과고요. 실제로 솔루션을 탑재하기까지는 시간이 걸리는 것으로 알고 있습니다.
-(질문) : 마지막 질문인데 정확도를 나눌 때 기준이 있잖아요.
맞다, 틀리다의 기준이 뭔가요?
-(김민중) : 저희는 어쨌든 교체 시점이라고 하는 날짜를 가지고 있고, 그 이전과 이후를 분리하는, 이진 분류 모델을 짰기 때문에 이전을 제대로 예측했으면 맞는 거고요. 이후를 이후로 예측했으면 맞는 거고요. 그런 식으로 간단하게 이진 분류 모델이라고 생각하시면 됩니다.
-(질문) : 발표 잘 들었습니다.
서울교통공사에서 삼바 시스템에 대한 API나 자체 제작해서 팀에게 준 건가요?
-(김민중) : 아닙니다. 서울교통공사도 본인들이 개발할 수 있는 인력이 없다 보니까 용역을 줘서 삼바 시스템을 개발한 걸로 알고 있고요.
저희는 교통공사와 이런 작업들, 이런 데이터 분석을 해서 실제 이거를 적용하는 데는 이 업체가, 이거를 개발한 업체가 중간에 들어가서 적용하는 걸로 알고 있습니다.
그래서 어떠한 언어로 했는지는 저희는 모릅니다.
-(질문) : 기술 자문 같은 것도 공사나 용역 업체에서 동시에 조달을 받은 거고요?
-(김민중) : 저희 업무가 수학을 가지고 수학적인 지원을 해 주자라는 목적을 가지고 설립된 센터이다 보니까 무료로 요청이 있으면 자문을 해줍니다.
-(질문) : 정확도가 가장 낮았을 때에는 몇 프로 정도 나왔나요?
-(김민중) : 정확도가 가장 낮은 케이스는 여기에 85% 정도 나왔습니다.
그런데 이게 지금 목동역인데 이거는 왼쪽에 보이시는 정확도는 유니버셜한, 모델튜닝 이런 거를 재구성을 전혀 하지 않고 그냥 처음 짰던 모델로 돌렸던 결과고요.
그런데 실제로 저 목동역을 타겟으로 해서 모델을 다시 한 번 만들어보자, 라고 했을 때 저희가 90% 넘는 정확도까지 얻었습니다.
그런데 어쨌든 그냥 단일 모델로 적용했을 때는 85% 정도 정확도가 나왔습니다.
-(질문) : 마지막 질문인데요.
공조기 수명이 다해서 새로운 공조기를 설치했을 때도 그 값이 서로 다를 수도 있잖아요.
이런 경우에도 기존에 개발했던 모델에 사용할 수 있나요?
-(김민중) : 아마 모델을 바꿔야 된다고 저는 생각합니다.
저희가 이 전류 데이터 말고 다른 진동 데이터도 트라이를 해봤는데 옆 장비에 대한 간섭이라던지 공조기 교체, 이런 것들이 발생하게 되면 데이터들이 정말 완전 달라지는 그런 케이스들이 발생해서 그러한 케이스는 특수한 케이스로 따로 봐야 된다고 생각합니다.
-(질문) : V벨트를 교체했을 때도, 특수한 케이스도 발생할 수 있는 거죠?
-(김민중) : 예, 맞습니다. V벨트랑 베어링 같이 교체했을 때는 어떠한 상관관계가 발생하는지 그러한 이슈들이 있었는데 그러한 이슈들은 좀 뒤로 미루어 놓은 상태입니다.
-(질문) : 잘 들었습니다.
-(사회자) : 잠시만요.
발표 시간이 지금 종료가 되어서 더 질문이 있으신 분들은 2층에 열린 공간을 활용하실 수 있습니다. 발표자 분께 요청하셔서 열린 공간에서 조금 더 남은 토론을 진행할 수 있도록 잘 이끌어주셨으면 좋겠습니다.
발표해 주신 김민중 님께 감사드립니다. 박수 부탁드립니다.
-(박수)
지금부터 30분간 쉬는 시간을 가지려고 합니다. 30분 후에 101호에서 다음 세션 진행하도록 하겠습니다.
.
.
.
.
.
.
.
-(사회자) : 곧 발표가 시작될 예정이니 빈 자리를 채워서 앉아주세요. 거의 만석처럼 보이지만 가운데에 빈 자리가 많아서 서계신 분 없이 빈자리 채워서 앉아주시면 감사하겠습니다.
홍보 하나 드리면 지금 파이콘 굿즈를 받아보시지 못한 분께는 2층에서 굿즈 배부가 진행되고 있으니 2층에서 받아주시면 감사하겠습니다.
안녕하세요.
이번 시간에는 박종현 님께서 하나의 Django 코드로 여러 사이트 운영하기 주제로 발표해 주시겠습니다. 발표자 모시겠습니다.
-(박수)
-(박종현) : 안녕하세요.
만나서 반갑습니다.
저는 박종현이라고 하고, 소개해 주신 대로 하나의 Django 코드로 여러 사이트 운영하기를 발표하겠습니다. 작년에는 떨어졌는데 이번에는 됐는데 많은 분들이 오셔서 영광스럽습니다. 시간이 없으니 진행하겠습니다. 저는 래블업 주식회사에서 일하고 있고요. 4년된 회사이고 구글에서 한 Polymer/LitElement 도구를 이용해서 작업을 주로 하고 있습니다. 저희 회사에서 운영하는 오픈소스 프로젝트에도 참여하고 있습니다.
오늘의 내용은 제목과 마찬가지고 주로 뭔가를 분리하는 내용이 될 거예요. 사이트를 하나의 사이트로 여러 사이트를 운영한다는 것은 사이트별로 사용자가 접속을 했을 때 그 사이트에 맞는 리소스나 URL을 찾아서 반환을 해야 되는 거니까 그런 거를 어떻게 저희가 분리를 했는지 그 노하우에 대해서 말씀을 드리려고 합니다. 여러 사이트 운영이 필요한 경우에는 기본 뼈대는 동일한데 다른 레이아웃이나 다른 URL이나 다른 콘텐츠를 제공해야 될 필요가 있을 때 최소한의 개발 시간과 운영 시간을 들여서 여러 개의 사이트를 운영하는 그런 식의 시나리오가 될 것이고 저희 같은 경우에는 예전에 대학별로 교육용 서비스를 제공한 적이 있는데 그 경우에 어떤 A대학에 공급할 때랑 B대학에 공급할 때 학교 로고도 달라야 되고 강의 자체도 달라야 되고 그런 요구가 있어서 이런 시스템을 도입을 하게 되었습니다.
예를 들어서 A 사이트에 있는 학생이 B의 교수님이 작성한 강의자료를 볼 수 있으면 안 되니까, 그러면 문제가 되니까 그런 필요에 의해서 이런 형태의 구조를 만들게 되었고요.
제가 이 발표를 준비하면서 간단한 거를 만들었는데 이 데모앱은 보시면.. 아이고.. 다른 건 아주 간단한 Django앱이고요. 멀티사이트 프로젝트라는 거고 여기서 유일한 앱은 Entry인데 많이 튜토리얼에서 보셨겠지만 자체적인 모델이나 뷰나 템플릿을 가지고 있고요. 실제로 내용은 거의 없습니다. 베이스 템플릿이 하나 있죠.
이런 구조에서 여기서 눈여겨 볼 것은 over load라는 디렉터리를 만들어서 여기에 모든 사이트 설정이나 모든 거를 몰아넣는 형식으로 했는데 여기에 모여있고 여기에 모여있는 사이트별 설정을 사용자가 하는 주소별로 해서 하는 그런 내용이 주가 될 것입니다.
그리고 이 데모 사이트는 여기 주소에 있거든요. 혹시 끝나고 관심이 있으시면 방문을 해 주시면 될 것 같고요.
먼저 가장 먼저 해야 될 거는 콘텐츠 분리가 될 것인데 아까 대학별로 말씀드린 강의 자료가 여기에 해당이 되고 강의 자료를 어떤 사이트에 어떤 식으로 보여줄 것인지에 관한 문제인데 Django가 잘 지원하고 있습니다. Django가 처음 시작할 때는 어떤 신문사에서 같은 내용을 다른 사이트에 퍼블리싱하기 위해서 Django를 만들었다는 내용이 있는데 이것 자체가 디폴트로 설정이 되어 있을 거고요. 그 이후로는 퍼블리싱이라는 측면보다는 웹서버를 운영하는 그런 프레임워크 성격이 강해지면서 디폴트에서 빠졌는데 실제로 디폴트로는 사용이 안 되고 사용하려면 몇 가지 설정을 해줘야 됩니다.
sites 프레임워크라는 것은 모델인데 간단한데 두 개 다 그런 거고, 사이트 점 컴 이렇게 되고 네임은 사람이 읽을 수 있는 그런 필드가 될 것입니다.
이러한 모델을 이미 제공을 하고 있기 때문에 예를 들어서 어떤 강의 자료 이런 거를 만들었을 때 site라는 관계를 이용해서 연결을 할 수 있습니다. 원과 투로 연결을 동시에 하게 되면 이 강의 자료는 site1, site2에 보여야 되고 site3에는 보이면 안 되겠죠.
만약에 한 곳에만 보이게 하고 싶으면 포링키로 하면 되겠죠.
저희은 여러 사이트에 하게 하기 위해서 Entry 필드를 지원했습니다.
Entry라는 거로 접근을 할 수 있고 여기서 이 사이트를 통해서 사이트 모델을 사용할 수가 있는데 여기서 모델 매니저를 별도로 설정하면 편하게 쓸 수 있습니다.
기본적으로는 Entry. on_ 쓰시겠죠. 그런데 sites 프레임워크가 활성화가 되면 특수한 오브젝트 매니저를 제공해서 이거를 온 사이트라는 필드로 설정을 하게 되면 온 엔트리 점 온 사이트 커리가 가능해져요. 그러면 전체 엔트리를 대상으로 돌려주는 게 아니고 사용자가 접속한 그 사이트에 속한 엔트리만 돌리게 됩니다.
기본의 오브젝트 커리를 사용해 주고 싶으면 별도로 해줘야 됩니다. 아무 것도 설정이 돼 있지 않으면 오브젝트 매니저가 붙게 되면 이게 별도로 지정을 해 주지 않으면 사용을 할 수가 없거든요.
이런 식으로 모델을 작성해서 데이터를 분리할 수가 있고 뷰에서는 예를 들어 아까 보셨던 것처럼 온 사이트 커리를 통해서 이 사이트에 존재하는 이 타이틀의 Entry만 불러올 수 있게 됩니다. 이런 식으로 모델을 불러오고, 필요하다면 이런 식으로 탈 수도 있겠죠.
사이트의 이름을 받아서 도메인을 받아서 탈 수도 있을 겁니다.
아까 말씀드렸듯이 1.6버전 이후에는 기본적으로 활성화가 안 되어 있습니다. 활성화하기 위해서는 별로 어렵지는 않은데 Django 점 컨트리브 점 사이트를 설정해 주시고요.
처음에 sites 프레임워크를 활성화하면 이것이 활성화가 되기 때문에 나는 기본적으로 이 사이트를 사용하겠다, 라는 설정이 여기에 들어가는 것이고요.
여기서 불려오는 것이 달라지게 됩니다.
그래서 이게 어쨌든 모델이기 때문에 이거를 활성화한 후에는 마이그러네이션을 해줘야 되고요. 이것이 잘 된것을 볼 수가 있습니다.
다음으로 할 일은 여러 사이트를 지원해야 되니까 사이트를 수동으로 만들어줘야 돼요.
데모앱에서 사용할 거는 일단 사이트 원 점 마이사이트 점 컴이라는 실제 도메인, 프로덕션에서 사용할 도메인 두 개를 설정을 할 거고요.
그런데 이게 로컬에서 개발할 때 이 주소를 쓸 수가 없잖아요.
그래서 로컬에서는 사이트 원 점 로컬 사이트 투 점 로컬이라는 주소를 포스트파일을 설정을 통해서 접속을 하게 해놓고 이것을 어떤 중간 단계에서 퍼블릭 도메인, 실제 도메인으로 바꿔서 사용할 예정입니다. 이 두개가 동일하다고 보면 되고, DB에는 첫 번째를 설정을 해야 되죠.
사이트 원 점 마이사이트 점 컴으로 도메인을 바꿔서 저장하고, 두 번째 사이트는 이렇게 생성하게 되면 사이트 두 개의 모델이 생기게 되는 거고요.
이렇게 해서 사이트도 생성을 하고 모델 수준에서 사이트별로 엔트리를 코리할 수 있는 콘텐츠를 분리할 수 있는데 이거를 실제로 적용하기 위해서는 몇 가지 작업이 필요합니다. 아까 사이트 아이디를 보셨는데 그것을 통해서 설정할 수 있는데 이것이 여러 개가 있으면 어떻게 바꿔줘야 할 필요가 있습니다.
그 일을 하기 위해서 장고의 미들웨어를 사용하게 됐는데 어떤 유저가 요청을 보내면 그 요청이 뷰에 들어가기 전에 가로 채서 뭔가 작업을 할 수 있고요. 뷰에서 어떤 응답이 들어갈 때 응답을 가로 채서 사용자에게 도달하기 전에 어떤 작업을 할 수 있습니다.
저희 같은 경우에는 첫 번째만 사용할 거고요. 기본적으로 미들웨어의 세션이나 인증 혹은 씨에스알엘 토큰을 작업해 주는 기본적인 것이 붙어있습니다.
설정파일에 보면 미들웨어라는 리스트, 키플로가 설정된 것이 있고 여기에서 하나를 설정할 것입니다. 여기서 사이트 아이디를 바꾸는 작업을 하게 될 것이고요.
그 밑에 있는 것은 Django에서 지원하는 건데 어퍼닝 기능 같은 거죠. 이런 식의 사이트를 리퀘스트 점 사이트 점 도메인이라는 걸로 사용할 수 있습니다. 두 가지를 추가하면 사이트 아이디를 변경시킬 수가 있죠.
미들웨어는 크게 콜이라는 스페셜 메서드를 정리해야 되고요.
만약에 뭔가를 할 필요가 있을 때는 그렇게 하면 될 것이고 여기에 리스펀스가 셀프 점 겟 리스펀스가 이 아래 위로 뭔가를 해 주게 된다면 요청을 보내고 나서 뷰에 들어가기 전 그리고 뷰에서 사용자로 들어가기 전까지 어떤 작업들을 수행할 수 있습니다.
저희는 사이트 아이디를 다이나믹하게 설정할 거니까 이쪽 부분에서 뭔가를 해야 되겠죠.
여기서 크게 별 거는 없는데 일단 핵심은 이 부분이에요.
이 사이트라는 객체에서 도메인은 사용자가 실제로 접속한 URL이 될 것이고 site1이나 site2가 되는데 이거를 커리를 해서 아이디를 이 사이트로 설정하는 것이죠. 그러면 사이트가 사용자의 도메인에 따라서 바뀌게 되겠지요.
그런데 한 가지 문제는 실제 도메인을 저장할 때 프로덕션에서 사용할 도메인을 저장했는데 로컬 도메인이랑 안 맞아서 위에 있는 게 로컬 도메인을 매핑을 통해서 프로덕션용으로 바꿔주는 게 이 작업이죠.
도메인을 바꿔주는 그런 추가작업을 저희가 해줬고요.
결론적으로 여기서 사이트 아이디를 바꿔줘서 사이트별 설정이나 커리를 할 수 있게 됩니다.
만약에 레이아웃은 변하지 않고 똑같고 단지 콘텐츠만 분리하고 싶다면 여기서 나가셔도 되고요.
끝났습니다.
그런데 만약에 설정이나 기타 다른 리소스를 좀 더 오버라이드 할 필요가 있다. 지금은 콘텐츠만 분리됐지 이미지를 다르게 쓰는 건 없잖아요. 그럴 경우에는 좀 더 작업이 필요합니다. 미들웨어에서 더 할 수 있는 건 설정이나 URL을 바꿀 수가 있는데요.
설정 같은 경우 그 방식은 다 비슷해요, 이제부터는.
지금 저희가 over load라는 폴더의 디렉토리에 모든 거를 다 집어넣는다고 했는데 기본은 사이트 도메인 이름으로 설정된 디렉토리를 생성합니다.
여기서 닷을 댓으로 바꿨는데 이거는 파이썬 때 문제가 될 것 같아서 바꾼 거고 site2로 바꾼 거는 대쉬 컴이라는 사이트 아래에 다 들어가게 될 것입니다.
여기도 세팅을 site2 디렉토리 안에 집어넣고요. 미들웨어에서 더 해 주는 것은 이 부분이죠.
여기에 있는 세팅 파일을 다이나믹하게 임포트 해서 원하는 빌드에 대해서는 설정을 오버라이드를 여기서 하는 거죠.
기존에 디폴트 설정으로 가지고 있던 필드들이 여기서 오버로드에 폴더 아래에 있는 셋팅 파일의 밑으로 들어가게 되는 것입니다.
그리고 위에는 아까 점을 대쉬로 바꿔서 디렉토리 매칭을 하기 위해서 하는 것이고요.
핵심은 뭐냐면 over load안에 있는 특정 사이트 디렉토리 안에 파일을 찾아서 그 안에 있는 내용을 디폴트 설정을 덮어쓰게 되는 그런 식의 흐름이 될 것입니다.
URL도 비슷한데요.
URL은 역시 site2 폴더 안에 URL 닷 파이라는 곳에 URL 설정을 담아놓을 수 있고 마찬가지로 미들웨어에서 오버로드 점 사이트 패스 URL을 불러와서 그 안에 있는 URL 설정을 기본에 덮어쓰게 됩니다.
이런 식으로 해서 미들웨어에서는 사이트 아이디를 다이나믹하게 설정하고 설정 셋팅 파이파이 중에서 내가 오버로드하고 싶은 거를 어퍼치하고 URL의 기본설정에 덮어쓰는 그런 작섭을 통해서 사이트별로 다른 설정과 다른 URL을 사용할 수 있게 됩니다.
그다음으로는 리소스 관련인데요.
템플릿과 Static Finder을 어떻게 다룰 것인가.
어떤 로고나 이미지 같은 것을 사이트별로 다르게 사용하고 싶은데 그런 게 남았는데 그거는 각각의 다른 커스텀 로더나 이런 거를 추가해서 해결할 수가 있습니다.
템플릿 같은 경우에는 Django에서 템플릿 로더라는 어떤 모듈을 추가해서 템플릿을 찾게 됩니다.
Django 설정에 템플릿츠라는 것을 보시게 되면 로더가 있는데 기본적으로 이 두 개가 포함이 되어서 파이 시스템에서 거기에 있는 설정에 따라서 거기에 있는 것을 불러오고 추가적으로 각 앱 별로 템플릿이라는 폴더가 있는데 거기에 있는 거를 불러오는 두 가지가 디폴트로 설정이 돼 있는데 추가를 하게 되면 명시적으로 써줘야 됩니다. 비어 있으면 자동으로 저 두 개를 쓰게 되고요. 그런데 저희는 여기서 그 두 가지 템플릿 모드가 작동하기 전에 사이트별로 템플릿을 로더할 수 있는 커스텀 템플릿 로더를 만들어서 껴넣는 거죠. 여기서 먼저 찾아보고, 빨간 부분으로 마킹된 부분에서 찾아보고 없으면 파이 시스템과 앱 로더, 앱 디렉토리에 있는 것을 로드하는 방식으로 템플릿을 찾게 될 것입니다.
여기는 아까와 마찬가지로 site2 안에 템플릿이라는 경로를 만들고 그 안에, 여기에 있는 Entry 파일인데 집어넣죠. Entry 점 위 쪽에 템플릿츠 하위에 똑같은 걸로 있죠. 오버로드에 있다는 것만 제외하면 똑같은 상대경로를 가진 어떤 것을 저 오버로드 안에 집어넣었고요. 저거를 로드하면 되는 거죠.
템플릿 로더에서는 두 가지 매소드를 정리해줘야 되고요. Django에서 지원하는 베이스 로더를 해서 두 가지 over load를 하게 됩니다.
여기서도 핵심적인 것은 베이스 디렉토리에서 over load라는 폴더 아래 도메인을 점을 대쉬로 바꾼 그 폴더 내의 템플릿을 템플릿 디아이로 설정하고 이 폴더에서 어떤 템플릿을 찾는 거죠.
주어진 리퀘스를 보낼 때 뷰에서 템플릿을 설정할 건데 그 이름을 저 하위 경로에서 찾게 만드는 겁니다. 여기서 오리지널을 넣는 것으로 끝나고 실제로 하는 것은 여기서 이루어집니다.
여기서는 아까 설정한 오리진 필드에 따라서 실제로 파일 내용을 읽어서 돌려주게 되죠.
파인드에러는 그 위치에 없을 때 일어나는 거고, 아까 보여드렸던 다른 로더로 순차적으로 찾게 되겠지요.
이런 식으로 해서 템플릿 하위에 있는 템플릿을 사이트별로 불러올 수가 있게 됩니다.
사이트를 어떻게 아는가는 처음에 미들웨어에서 설정한 사이트 도메인을 참고해서 사용자가 어떤 도메인으로 접근했는가를 알 수 있으니까 미들웨어를 참고해서 그거를 바탕으로 해서 맞는 디렉토리 내에 파일을 찾게 되는 것이죠.
그리고 리소스 불러오기도 비슷한 방식입니다. 그런데 리소스는 Django가 Static Finder라는 리스트 내에 정리를 할 수가 있게 돼 있습니다.
마찬가지로 위에 두 개는 디폴트고요.
파이 시스템 파인더는 파이 시스템의 어떤 스테이틱 경로로 지정된 곳에서 스테이틱 파일을 불러오게 되고 거기에 없으면 각 디렉토리 내의 스테이틱 폴더 내에서 불러오게 되죠.
마지막으로 여기 둘 다 없으면 이 사이트에 가서 찾아보라, 라는 커스텀 스테이틱 로더를 정리하게 됩니다.
여기서는 사실은 베이스 파인더라는 것이 있고요, Django에서. 여기서 작성을 해야 되는 거는 파인더라는 거죠.
이 파인드라는 거는 그 위에서 보았던 파이 시스템 파인더와 정확히 똑같고요. 파인 시스템에서 어차피 파인을 읽어오는 거니까 함수는 바뀌지 않는데 그 전에 어디서 찾을 건지 그 위치만 바꿔주면 됩니다.
위치를 바꾸는 건 유닛에서 한 거고요.
여기서는 두 가지를 설정을 해야 되는데 셀프 닷 로케이션이라는 곳에 이 경로를 넣는 거를 하나 해야 되고요.
두 번째는 스토리즈라는 곳에 맵핑 형태로 이 파이 시스템 스토리지라는 객체를 집어넣어줘야 됩니다.
이 자체는 파이 시스템 로더와 차이가 없고요. 차이가 나는 건 over load 폴더 내에 스테이틱 폴더를 찾아서 그 내에 내가 요청한 파일이 있는지 있으면 그거를 돌려주는 것이죠.
이런 식으로 해서 리소스를 오버라이드 할 수가 있습니다.
여기까지 요약을 하자면 콘텐츠 분리는 Django가 제공하는 사이트 프레임워크를 이용해서 모델 수준, 뷰 수준에서 데이터라던가 아니면 보여지는 것을 분리를 할 수가 있고요.
사이트 설정은 미들웨어에서 이루어지죠.
미들웨어에서 사이트 아이디를 바꿔줄 수만 있다면 여러 개의 사이트를 동시에 판별할 수가 있게 됩니다.
모든 사이트 관련 설정은 over load라는 디렉토리 내에 퍼블릭 도메인 이름이 닷이 대쉬로 바뀐 것만 하면 같은 이름으로 위치를 하게 되고요. 하나가 더 있으면 site3 대쉬 닷 컴 이런 식으로 설정을 할 수 있게 되겠지요. 그리고 하위에는 자신만의 설정이 들어갈 수 있고 스테이틱 파일도 들어갈 수 있습니다.
그러면 이것들은 각각 미들웨어, 템플릿 로더, 스테이틱 파인더에서 저희가 정리한 명령에 따라서 여기를 먼저 찾게 되거나 아니면 나중에 없으면 찾게 되거나 해서 하나의 소스로 여러 사이트를 서빙할 수 있는 방법이, 저희가 한 방법이 되겠습니다.
이게 잘 보이시는지 모르겠는데.. 아주 간단히 만든 템플릿이에요.
왼쪽은 베이스 점 에이치티엠엘이고요.
공통으로 쓰게 되는 거고 여기서 사이트별로 이름을 작성해두었고 여기에 로고는 오버라이드할 수 있게 돼 있죠.
콘텐츠에 사이트별로 작성할 수 있게 돼 있고요.
여기는.. 저도 잘 안 보이는데.. 로고를 여기서 로고 점 피엔쥐를 쓸 거고 이게 site2에 있는 똑같은 로고를 로고로 쓰게 만들어두었을 겁니다.
내용은 각 사이트별 엔트리, 엔트리를 제가 만들어뒀는데 엔트리가 출력되는, 그리고 실제 파일을 출력했다는 거를 증명하기 위해서 서로 다른 거를 붙여놓은 아주 간단한 거고 이런 거를 돌려보면요.
site1을 접속하면 이런 식으로 로고가 이런 투명한 로고가 나오고 site1에 들어가 있는 엔트리가 출력이 되고, site2로 접속을 하게 되면 엔트리는 두 개가 있고 로고가 좀 다른 이런 식의 사이트 운영을 할 수 있게 됩니다.
제가 거짓말을 하지 않는 것을 보여드리기 위해서 이거를 어떻게 해야 될까요?
실제로 보여드리고 마무리를 하려고 하는데 시간이 어떻게 되나 모르겠네요. 너무 빨리 끝난 것 같은데.. 잠시만요.
이게 지금 돌아가고 있는 거고요.
끄면.. 왜 안 될까요? 뭐지..
일단 되는 걸 보여드릴게요.
site1 점 로컬이라는 거고 여기는 site2로 가면 바뀌는 걸 볼 수가 있어요. 로고도 바뀌고 프로토콜도 바뀌고.. 그런데 여기서 끄면 안 되는 것으로 보아서 제가 거짓말한 거는 아니고요.
이거는 저희가 운영한 사이트에서 다른 건 다 빼고 아주 간단한 것만 모아놓은 것이고 비슷한 방식으로 저희가 사이트를 실제로 운영을 했었습니다.
레포지토리는 제가 공개를 해놓았고요. 멋없는 이름으로 공개가 돼 있으니까 혹시 관심이 있으시면 방문을 해 주시면 될 것 같고, 여기서 제 발표를 마치도록 하겠습니다. 혹시 질문이 있으시면 해 주시고요.
아, 참.. 여기.
-(사회자) : 시간 관계상 다른 Q&A는 여기서 받지 않고 앞에서 발표자 분께 해 주시기 바랍니다.
좋은 발표해 주신 박종현 발표자님께 큰 박수 부탁드립니다.
-(박수)
다음 세션은 15분 후에 진행하도록 하겠습니다.
감사합니다.
.
.
.
.
.
.
.
-(사회자) : 곧 발표가 시작될 예정이니 빈자리에 앉아주시기 바랍니다.
안녕하세요.
이번 시간에는 고득녕 님께서 엔터프라이즈급 네트워크 운용 관리에 대해서 발표해 주시겠습니다. 뜨거운 박수로 맞이하여 주시기 바랍니다.
-(고득녕) : 안녕하세요야
우선 마이크 소리 괜찮으신가요?
좀 작은 것 같아요?
알겠습니다. 잠시만요.
이 장면을 사진을 찍으려고 했는데 바로 소개를 받았네요. 잠시만요. 핸드폰 좀 끌게요.
다시 인사를 드릴게요.
저는 이번 세션 발표를 맡은 Pythonista 2년차 고득녕입니다. 이번 발표를 맡게 된 배경부터 말씀을 드릴게요. 인터넷에 활용을 조금 하고 있었는데 내전다 카페 알고 계시나요? 잘 모르시나 보네요. 다 모르시는 것 같은데 IP 네트워크쪽에 계신 분들 맞으시죠?
내전다 카페는 IP 커뮤니티 중에서 가장 크다고 생각을 하는데 가끔씩 그런 질문이 나와요. 파이썬이 정말 대단하고 편하다고 하는데 어떻게 IP 네트워크에 활용이 되는지 모르겠다는 질문을 볼 때마다 제가 우리 회사에서 활용하고 있는 파이썬의 사례를 소개하면 IP 네트워크 엔지니어들의 워크앤 밸런스와 인권 향상에 도움이 되지 않을까, 라는 생각에 발표를 준비하게 되었습니다.
본 발표는요. 나우터 대수가 수십만 대 이상인 엔터프라이즈급에서 파이썬 프로그램을 어떻게 활용하는지에 대해서 설명을 하도록 하겠습니다.
발표 목소리는 괜찮으시죠? 제가 감이 안 잡혀서요. 이렇게 높은 데서 발표하는 건 또 처음이네요.
발표하기에 앞서서 제 소개를 먼저 할게요.
저는 IP 버전 6 네트워크의 공동저자입니다. 혹시 IP 버전 6 책을 들어보셨나요? 역시.. 많이 팔리지는 않았어요. 많이 팔리지는 않았고요.
아까 여기 도와주시는 스텝 분께서 질문을 하시는 분한테 책을 나눠주라고 이만큼을 주셨어요.
그런데 역시나 이 책들 중에도 제 책은 없더라고요.
어쨌든 이 책은 돈을 주고도 못 삽니다. 서점에서도 못 사요. 절판이 났거든요.
원래는 초반에 개정판이 나와야 되는데 제가 작년말부터 파이썬 프로그래밍에 너무 푹 빠지는 바람에 본업에 충실하지 못해서 개정판이 나오지 않고 있고요. 저는 현재 SK 브로드밴드에서 IP 운영 3년차입니다. 회사 운영한지는 3년밖에 안 됐어요. 그런데 IP 운영을 하자마자 느낌이 팍 오더라고요.
IP 운용에 너무나 비효율적인 업무 프로세스들이 너무나 많았습니다.
이런 것들을 어떻게 좀 개선할 수 있을까, 라고 고민을 계속 하다 보니까 점차 파이썬에 관심이 가게 되더라고요.
이 장표에서요. 가장 중요한 문구가 있는데요. 저는 Pythonista 2년차입니다.
게다가 제 주업무는 IP 운영이에요. 개발자가 아니에요. 그러다 보니까 개발도 회사 업무가 끝나고 저녁에 깔작깔짝 혹은 주말에 도서관에 가서 하다 보니 실제로 개발 시간은 굉장히 짧습니다.
즉 저는 엄청난 파이썬 초보자예요.
그러니까 본 발표에서는요. 엄청난 파이썬 프로그램의 스킬이나 혹은 프로그램 언어들의 인사이트를 주는 건 아니에요.
다만 저 같은 파이썬 초보자들도 실제 IP 네트워크에 적용을 했다, 라는 사례를 소개함으로써 여러분에게 큰 용기를 주는 것이 제 발표의 목적입니다. 벌써 10분이 지났네요. 제 발표의 특징은 배경이 길어요.
발표 순서를 말씀드릴게요.
우선 제가 개발한 것에 대해서 설명을 드리고요. 파이썬을 활용해서 어떻게 데이터를 수집하는지 그리고 그 수집한 결과들을 어떻게 운영자들에게 리포팅하는지 마지막으로 제가 개발한 프로그램들의 알고리즘을 몇 개를 소개해드리도록 하겠습니다.
제가 발표 준비를 하면서 보니까 제가 개발한 게 한 10개 정도가 되더라고요, 저희 회사에서. 그런데 그 중에는 대단한 것도 있고 정말 하찮은 것도 있어요.
모든 걸 다 여기서 소개할 수는 없고요. 시간 관계상의 이유도 있고, 여기서 다 소개하면 제가 내년에 또 나올 수가 없다 보니까, 내년에 또 나오는 게 목표거든요.
제 개인적으로 이 주제로 파이콘 3년차를 바라보고 있습니다.
오늘은 대단한 거 하나, 그리고 약간 하찮은 거 하나 해서 두 개 정도 털고 갈게요.
우선 제가 우리 회사에서 개발한 거를 간단하게 말씀을 드릴게요.
보통 2, 3년 전부터 IT 업계는 빅데이터다 AI다 해서 소프트웨어에 관심이 많았었는데 저희 회사에서도 현업에서 소프트웨어를 개발해서 업무 프로세스를 개선하는 거에 대해서 독려하고 있어요.
그래서 본사 차원에서도 여러 가지 프로젝트를 진행하고 있는데 그 프로젝트 중에 하나에서 하고 있는 성과입니다.
제가 하고 있는 거는, 제가 개발한 거는 빅데이터 분석 시스템인 파수꾼입니다.
여기서 파수꾼은 저희 회사의 전국의 IP 운영자들을 대상으로 이름을 공모해서 정한 이름이고요.
이거는 어떤 시스템이냐면 우리 회사의 정식 NMS나 나우터 스위치로부터 데이터를 수집해서 그것을 가공해서 IP 운영자들에게 결과를 Reporting하는 시스템입니다.
조금 더 자세히 설명을 드릴게요.
우선 서버는 불용 처리 예정인 서버를 하나 얻었어요.
OS는 처음에 센트를 OS로 했다가 지난 달에 7.6 버전으로 업그레이드 했고요. Program lang.는 3.6. 8로 하고 있습니다. 그리고 IDE는 비쥬얼 스튜디오 코드를 쓰고 있고요. 총 든 금액은 0원이에요. 한 푼도 들지 않았습니다. 여러분은 개발에 관심이 있으니까 좀 더 자세히 설명을 드릴게요.
파이썬 2.7에서 3.6으로 바뀐 데는 당연한 특이사항들이 많았는데 그것들은 발표 마지막에 설명을 드릴게요.
IDE나 에디터는 비쥬얼 스튜디오 코드를 썼어요. 혹시 써보셨나요? 고개를 끄덕이신 분이 계시는데 점심 때 열린점심이라고 해서 밥을 얻어먹었어요. 그래서 이 부분에 대해서 자세히 설명을 드릴게요.
보통 파이썬을 처음 접하면 IDE 뭐 쓰시나요? 파이참 많이 쓰시죠. 무료니까, 저도 처음에는 파이참을 썼는데 물론 파이참 좋은 소프트웨어인데 하다보니까 하나 단점이 있더라고요.
결국 현업에 가서 개발을 하실 거면 서버는 장비실에 놔둘 거고요. 여러분의 개발은 사무실이나 혹은 집에서 할 거예요. 결국 원격기지에 있는 것에 데이터를 주고 받고 동기화를 하면서 개발을 해야 되는데 파이참의 무료 버전에서는 그 기능이 유료예요. 그 기능을 쓰려면 돈을 내고 지불해야 됩니다. 처음에는 돈을 내고 해야 되겠다고 생각했는데 네이버에 댓글이 비쥬얼 스튜디오 코드를 써보라고 핫하다고 해서 써봤는데 정말 핫해요.
왜 핫하냐면 핸드폰을 보시면 안드로이드 마켓에서 서드파티 플러그임 막 깔잖아요. 마찬가지로 비쥬얼 스튜디오 코드는요. 서드파티 플러그임을 막 깔 수 있어서 확장성이 엄청납니다. 거기에는 아까 이야기했듯이 원격기지에 접속하는 동기화하는 그런 기능이 무료고요.
하여튼 저는 비쥬얼 스튜디오 코드를 강추합니다.
이 정도면 밥값은 했다고 생각을 하고요.
넘어갈게요.
본격적인 프로그램 알고리즘을 설명하기에 앞서서 일반적인 엔터프라이즈급 네트워크를 설명을 드릴게요.
시스코에서는 보통 코어 네트워크로 분류하고요. 여러분이 잘 알고 계시는 엘티이나 이런 네트워크를 엑세스 네트워크라고 합니다. 엑세스 네트워크에서 발생하는 트래픽을 코어로 하는 것을 디스트리뷰션 네트워크라고 하고요. 코어 네트워크와 디스트리뷰션 네트워크를 보통 백본이라고 합니다.
백본의 나우대수가 수천 대 정도 돼요. 엑세스 네트워크 수는 수십만 정도 됩니다.
백본 네트워크에서는요. 안정성을 중요시하다 보니까 아직까지는 글로벌 벤더 라우터를 쓰고 있어요. 예를 들어 시스코, 노키아 등등입니다.
저는 백본 네트워크 운영자이다 보니까 Cisco, Juniper, Nokia, 화웨이에 어떻게 가져오고 적용을 하는지 그 부분에 대해서 설명을 드릴게요.
파수꾼 프로세스에 대해서 설명을 드릴게요. 파수꾼이 뭔지 아시죠? 제가 개발한 시스템이에요. 대단한 건 아닌데요.
파수군의 프로세스는 3단계입니다.
라우터로부터 데이터를 수집하는 단계, 데이터를 수집해서 그 데이터를 가공해서 어떤 네트워크 인사이트를 얻는 단계, 그리고 그 결과를 운영자에게 전달하는 이렇게 3단계인데요.
데이터를 수집하는 단계와 운영자들한테 데이터를 전달하는 단계를 설명해드리고 마지막에 어떻게 빅데이터를 가공하고 하는지 그 알고리즘을 설명하도록 할게요.
알고리즘을 설명하기에 앞서서 우선 이 장표를 한 장 넣었어요.
오늘 제 강의의 목표가 뭐라고 했는지 혹시 아시나요?
제 강의의 목표는요.
여러분들이 저 같은 파이썬 초보자들도 이런 걸 했구나, 라는 걸 보고 용기를 얻어서 각자의 회사에 가서 파이썬을 적용하는 거예요.
여러분의 회사에 가서 파이썬을 적용하는 게 제 목표인데 그런 용기를 주기 전에 한 가지 꼭 당부 말씀을 드리고 싶은 게 있어요.
여기 계신 분들 다 현업에 계신 분들인가요? 현업에 계신 분도 계시고 되게 어린 분들도 계시는 것 같은데, 현업에 계신 분들은 이해를 하시겠지만 우리나라의 IP 네트워크는요. 굉장히 보수적이에요.
굉장히 보수적입니다.
만약에 서비스 단절이 1초만이라도 발생하더라도, 1초는 아무 것도 아닌데 그거를 만약에 고객이 인지하게 되면요. 담당자는 아침부터 이리 저리 끌려가는 게 공개처형 당하는 게 우리나라 네트워크의 현상이에요. 그만큼 보수적이에요.
우선 여담으로 말씀을 드리면 제가 수능시험에 실패했을 때나 혹은 제가 정말 좋아하는 짝사랑하는 여자들한테 번번하게 차여도 자살생각을 한 적은 없었거든요, 제가. 그런데 IP에 오면서 두 세 개를 내다 보니까 우리 회사가 보라매역에 있어요.
보라매역에서 걸어서 25분 거리에 원효대교가 있거든요. 두 번째 장에 맨날 터벅터벅 집에 가면서 이대로 원효대교에서 뛰어내리고 싶다는 생각이 들었어요. 그만큼 우리나라의 IP 네트워크는요. 운영자의 실수를 절대로, 절대로 용납하지 않는 분위기예요.
현업에 계신 분들은 다 이해하실 거예요.
이런 분위기에서 여러분들이 각자 가서 개발을 했는데 누가 시키지도 않았는데 여러분들이 개발을 했는데 장인을 했다? 그 후폭풍은 정말 상상도 할 수 없어요.
여러분들에게 용기를 심어주기 전에 딱 두 가지만 당부 말씀을 드릴게요.
첫 번째 컴핑 명령어는 절대 하지 마세요.
컴퓨터 명령을 하셔도 되는데 여러분이 순서 운영부에 계시면 컴핑 명령은 하지 말고 쇼명령만 하라는 거예요.
쇼명령도 명령어 안에 타임 딜레이를 충분히 두세요.
라우터가 행업에 걸린다면 그 라우터는 쓰레기예요. 그 라우터 브랜드는 쓰레기 브랜드이지만 라우터가 행업에 걸린다면 공개처형 당하는 것은 라우터가 아니고 여러분들이에요.
아시잖아요.
기계를 혼내지는 않아요, 회사에서. 그러니까 여러분들은 꼭 최대한 프로그램을 개발할 때 보수적으로 접근하라는 걸 말씀드리는 거고요.
지금부터는 제가 용기를 북돋아주도록 하겠습니다.
지금부터 어떻게 데이터를 수집하는지에 대해서 설명을 드릴게요.
라우터로부터 데이터를 수집하는 방법은 크게 두 가지가 있을 것 같아요.
하나는 어떤 이벤트가 발생했을 때 실시간으로 데이터를 수집하는 방법이 있을 거고요. 하나는 실시간이 아니고 주기적으로 데이터를 수집하는 방법이 있을 겁니다. 실시간 같은 경우에는 SNMP나 그런 거를 사용하는 경우가 있고요. 실시간이 아닌 경우에는 SSH를 사용해서 정보를 가져오는 경우가 있죠.
파수꾼 같은 경우에는 후자를 선택했어요.
왜냐하면 만약에 제가 개발한 시스템이 실시간으로 데이터를 가져온다.
SNMP나 Syslog를 이용해서 실시간으로 가져오면 어떤 일이 발생하냐면요. 우리 회사의 공식 엔엠에스가 있을 텐데 그거하고 포지셔닝이 비슷해지는 거예요.
다들 아시겠지만 회사가 커질수록 유관부서 간의 R&R이라는 게 확실하게 있거든요. 그 개발부서하고 운영부서하고 서로 난감해지는 상황이 벌어질 것 같아서 제가 개발한 시스템은 철저하게 실시간성을 배제했습니다.
그러면 원격지에 있는 라우터로부터 어떻게 데이터를 수집을 하냐?
여러분도 잘 알다시피 두 가지 프로토콜이 있어요. 하나는 telnet 하나는 Paramiko입니다.
SSH는 여러 가지 라이브러리가 있는데 저 같은 경우에는 Paramiko 모듈을 사용하고 있습니다.
이 정도 쓰고 있고요.
참고로 아실 분들은 아시겠지만 telnet은 보완에 취약해요. 그래서 금지하고 있고요. telnet같은 경우에는 콘솔에 접속할 때만 아주 예외적인 경우에만 쓰고 있고요. 실제로 콘솔에 접속한 네트워크는 완전히 물리적으로 분리가 돼 있습니다. 혹시나 오해를 하실 것 같아서 말씀을 드렸고요.
그런데 제가 SSH를 주로 쓰고 있는데 저는 Paramiko를 쓰고 있어요.
Paramiko 모델을 쓰면서 지금까지 별다른 문제점은 하나도 없었어요.
잘 동작하고 있습니다. 다만 한 가지 주의해야 할 사항이 있어요.
그거를 말씀을 드릴게요.
SSH 채널을 만들 때 Paramiko에는 두 가지 함수가 있어요. 하나는 exec_command()가 있고요. 하나는 invoke_shell() 게 있습니다. 그 두 개의 차이를 아셔야 되는데요. 홈페이지에는 이런 식으로 설명이 돼 있어요. 와닿지가 않죠. 제가 간단히 설명드릴게요.
exec_command() 사용할 경우에는 오직 하나의 Command만 보낼 수가 있습니다. 무슨 말이냐고 하니 하나의 명령어를 치면 SSH 세션창이 닫혀요. 그래서 명령어를 치고 싶으면 또 세션창을 만들어야 돼요.
그런데 여러분이 보통 푸티로 사용하실 경우는 명령어를 여러 개 보내도 세션창이 안 닫히시잖아요. 이런 것처럼 개발하고 싶으면 invoke_shell()를 사용하시면 됩니다.
그런데 문제는 라우터 OS마다 지원하는 함수가 달라요.
예를 들어 여러분들이 Nokia나 화웨이 라우터로부터 데이터를 접속해서 데이터를 가져오고 싶으면 exec_command()를 사용하면 안 되고 오직 invoke_shell() 함수만 쓰셔야 돼요.
지금부터 exec_command() 함수와 invoke_shell() 함수의 샘플소스를 간단하게 설명을 드릴게요.
이거는 exec_command()의 샘플소스인데요.
Paramiko 홈페이지에 있는 샘플소스를 그대로 가져왔습니다.
간단해요.
여기에 여러분이 넣고 싶은 명령어를 넣어주시면 여기에 각각 스탠드 아웃 등등에 됩니다.
여기에 있는 텍스트를 가공하시면 되는 거예요.
간단합니다.
그런데 문제는 뭐냐면요.
Paramiko 홈페이지를 가면요.
원격지 라우터에 접속하는 샘플소스가 이것밖에 없어요.
exec_command() 샘플소스밖에 없습니다.
invoke_shell()를 이용하는 샘플소스가 없어요, 제가 보기에는.
그러다 보니 개발자들이, IP 운영자들이 어떤 문제에 부딪히냐면 Paramiko 홈페이지에 있는 샘플소스로는 Cisco가 잘 작동하는데 Nokia, 화웨이를 했는데 에러가 뜹니다.
실제로 구글링이나 스텝 오버플로를 가면요. Paramiko 모듈이 Nokia에서 동작을 안 하는 것 같다는 글이 몇 개씩 올라와 있어요.
이런 문제에 부딪혔을 때 접근방식이 약간 다른데요.
대부분의 사람들은 어떻게 접근하냐면 다른 모드로 도망을 가요. 다른 모드로 갑니다. Paramiko가 노키아에서 안 된다고 하고 다른 데로 가요.
저는 어떻게 했냐면요. 노키아 엔지니어한테 물어봤어요. 너네 라우터는 파이썬 친화적이지 않은 것 같다. 지금이 어떤 시대인데 파이썬 친화적이지 않냐고 질문했더니 노키아 엔지니어에게 답변이 왔습니다. 그거는 오해고요. 노키아에서도 잘 작동합니다. 다만 invoke_shell() 함수를 이용하면 된다고 샘플소스를 보내줬어요. 그때서야 제가 invoke_shell() 함수를 알게 됐지요.
이 자리를 빌어서 노키아 엔지니어한테 감사의 말씀을 드리고요.
이것도 노키아 엔지니어가 보낸 샘플소스인데 보다시피 명령어를 보내는 문구가 이거예요. 여러 개를 보내도 창이 안 닫힙니다. 마지막에 결과를 받는 함수가 리시브라는 함수인데 그거를 라우터 아웃풋에 저장하는 거거든요.
우리는 여기에 저장된 텍스트만 가공을 하면 되는 거예요.
여러분도 이 소스를 이용하시면 쉽게 노키아나 화웨이 라우터에 접속하실 수가 있습니다.
지금부터는 어떻게 파수꾼이라는 시스템이 운영자들한테 결과를 리포팅하느냐에 대해서 설명을 드릴게요.
지금부터는 발표를 천천히 할게요. 제가 처음에는 너무 겁나서 빨리 했다가 지금은 시간이 좀 남는 것 같네요, 목도 아픈 것 같아서 천천히 할게요.
운영자들한테 데이터를 알려주는 방법은 두 가지가 있을 것 같아요.
하나가 뭐냐면 운영자가 원하면 언제든지 데이터를 뽑을 수 있도록 웹서비스를 제공하는 방법이 있고요.
두 번째는 운영자가 원하든, 원치않든 간에 무조건 메일 리포팅을 쏘는 방법이 있을 겁니다. 당연히 후자의 방식이 쉽죠.
저도 처음에는 후자의 방식으로 시작했습니다.
그러다가 아, 역시 모든 NMS의 엔딩픽처는 이거라고 생각해서 작년 말부터 Django를 배우기 시작했어요.
그전까지는 웹 프로그램을 해본 적이 없었는데 기껏해야 90년대에 대학교를 다니면서 만든 게 마지막이었는데 생각보다 웹 프로그램이 정말 빡셨어요.
죄송합니다...
우선은 중단이 된 상태인데 저도 언제가는 웹 서비스로 갈 생각이고요.
현재는 운영자가 원하든 원하지 않든 간에 메일을 쏘고 있습니다.
어떻게 쏘냐면 예를 들어 볼게요.
현업에 계신 분들은 아시겠지만 각 그룹메일이 있어요, 운영자들은.
왼쪽에 있는 그림은 뭐냐면..
여기에 에어컨이 저희 집보다 빵빵하게 트네요.
왼쪽 그림은 매 30분마다 우리 회사의 비지터를 조사를 해요. 어떤 고객이 비지트 다운이 돼 있는지 다운 내역을 운영자들한테 매 30분마다 쏘고 있는 게 왼쪽 그림이고요.
오른쪽 그림은 어떤 그림이냐면 하루에 두 번씩 설정이 바뀌었으면 어디가 바뀌었으니 주의하라고 하루에 두 번 운영자들한테 그룹메일을 쏘고 있습니다.
메일 쏘는 건요.
파이썬 스탠다드 라이브러리 stmp 라이브러리에 쏘고 있어요. 구글링하면 쉽게 쓸 수 있고요. 구글하는 것도 귀찮으시면 이 샘플소스를 그대로 쓰시면 됩니다.
지금부터 파수꾼이 라우터로부터 데이터를 수집해서 어떤 네트워크 인사이트를 얻는지 그 알고리즘에 대해서 설명을 드릴게요.
시간 관계상 두 개 정도만 소개를 할게요.
나머지 여덟 개는 언제 발표한다고 했죠? 내년에 기회를 주면.
혹은 내후년까지 3년 버틸 생각입니다.
제가 한 10개 정도 되는 프로그램들 중에서 어떤 것을 먼저 소개를 할까 하다가 제일 먼저 생각했던 게 이거예요.
뭐냐면 가입자망 네트워크의 단중화 이중화는 현황 파악 알고리즘입니다.
이거를 제가 먼저 선택했던 이유는 이 현황을 파악하기 위해서 파수꾼을 개발했거든요. 뭔지 자세히 설명해드릴게요.
가입자망 네트워크가 있어요.
엘티이 네트워크일 수도 있고 혹은 5 G일 수도 있죠. 가입자망 네트워크는 당연히 백본 네트워크하고 이중화 구성이 되어 있어야 돼요.
그래야지 한쪽이 죽거나 혹은 라우터가 죽더라도 얘는 정상적으로 서비스 단절이 발생하지가 않습니다.
당연한 거예요.
그런데 간혹 가다 이중화로 연결돼 있던 가입자망 네트워크가 아무도 모르게 갑자기 조용히 단중화로 바뀐다는 거예요.
여러 가지 이유로 인하여.
이게 참 골치가 아픈 문제예요.
엑세스 네트워크는 지역 운영자들이 관리를 하는데 물론 지역 운영자들이 이거를 주기적으로 계속 봐요. 단중화로 가면 굉장히 리스크가 있어요. 선로가 갑자기 단선이 발생이 하면, 예를 들어 공기업에서 땅을 파는데 하필 크게 SK선이었으면 단절이 되는데 이런 거를 바로 발견해서 조치를 취해야 되는데 그래서 지역 운영자들은 이거를 수시로 체크하고 있는데 이게 만만치가 않아요.
왜 만만치가 않죠? 라우터의 개수가 수십만 대예요.
이거를 지역 운영자들한테 하나하나 파악하라고 하는 게, 지역 운영자들한테 워크 앤 밸런스를 심각하게 침해하는 거거든요. 그래서 파수꾼을 만들게 된 배경이 이거입니다.
파수꾼은요. 자동화로 수십만 대의 라우터 중에서 단중화인지 이중화인지 판단을 해요.
어떻게 판단을 하냐면요.
비지티와 라우팅탭에서 엑세스 네트워크의 주소를 조회해서 단중화인지 이중화인지를 판단합니다.
이 부분에 대해서 말씀을 드릴게요.
여기에 계신 분들 다 IP 엔지니어들 맞으시죠? 그렇게 보기에는 너무 산뜻하신 분들이 몇 분 계셔서..
우선 이 강의가 중급이라고 한 이유가 파이썬 프로그램은 되게 쉬운데 이런 IP 네트워크 지식이 있어야 돼서 그 부분에 대해서 설명을 드리는 건데 어떻게 구성이 되는 건지 가정을 해볼게요.
Cisco에서는 이런 식으로 가정을 합니다.
에어컨이 빵빵하네요..
죄송합니다.
백본 네트워크는요. 보통 아이지피로 구성해요. 아이비지피일 수도 있고요.
반면에 가입자망 네트워크까지는 아이지피를 안 돌려요. 왜냐하면 가입자망의 라우터 수는 수십만 대인데 여기까지 돌리면 네트워크 전체가 엄청 버벅대거든요.
그래서 보통 엔터프라이즈급 네트워크는 어떻게 운용하냐면 가입자망하고 백본 네트워크는 이렇게 비지피 연동을 합니다.
그리고 코어 네트워크가 있고요. 디스트리뷰션 네트워크가 있는데 이거는 두 개 층, 이런 네트워크 구조가 있다고 가정하겠습니다.
이런 사항에서 파수꾼은요. 두 개면 이중화 한 개면 단중화라고 판단을 합니다.
질문을 드릴게요.
IP 현직에 있다고 하셨으니까요.
파수꾼이 비지피나 라우터 테이블을 조회한다고 했는데 어디서 조회할까요? 1번, 씨알에서 조회한다. 2번 디알원에서 조회한다. 3번 디알투에서 조회한다. 답이 다 달라요.
어디서 조회를 할까요?
이거.. 질문하신 분들한테 책을 준다고 했는데 답 맞추신 분들한테 드릴게요. 찍어도 됩니다.
3번?!
1번하고 2번 남았습니다. 3번 땡!
저기..
-1번.
-(고득녕) : 이제.. ㅎㅎㅎㅎㅎ 잠시만요.
잘 봐야 돼요.
스타트!
어, 누가 했는지 모르겠는데 빨간색.
답 뭐죠? 2번 맞습니다.
이 책 많이 알아요.
제가 만든 책은 2000권밖에 안 팔렸는데 이 책은 몇 만 권 팔렸다고 하더라요. 이거 가져가시면 됩니다.
답은 2번이에요.
왜 2번인지.. 잠시만요.
지금 30분 남았나요? 10분 전이에요. 발표에 취해서 급하게 해야 되겠네요.
왜 2번인지 말씀드릴게요.
1번 같은 경우에는 여기서 조회하면 베스트가 하나밖에 안 보입니다.
여기서 조회하면 안 돼요. 단중화를 판단할 수가 없습니다.
그런데 디알1에서 조회하는 경우에는 어떤지 볼게요.
얘는 다시 이거를 아이지피로 하죠. 얘는 이쪽으로 하고, 얘는 이쪽으로 합니다. 그런데 이중화면 두 개로 보이고요. 단중화면 한 개로 보입니다.
그러면 씨아이1에서는 어떻게 될까? 얘는 베스트 루트가 여기로도 잡히고 여기로도 잡혀요. 왜냐하면을 비지트 때문에. 그래서 얘는 이 두 개가 멀티 패스가 똑같다고 하더라도 더 우선 순위라서 만약에 얘가 얘보다 우선 순위가 높다고 하면 얘는 여기로 간다고 광고를 하고요. 얘도 이 두 개 중에서 이쪽으로 갑니다.
그래서 씨알에스를 조회하면 얘도 한 개, 한 개예요.
이거를 말씀을 드리는 이유는요.
여러분들이 각자 네트워크에 가서 개발을 할 건데 각자 회사마다 네트워크 구조가 달라요.
이런 거를 개발하시려면 먼저 자신의 네트워크에서 어떻게 동작을 하는지 먼저 이해를 하셔야 돼서 설명하기 위해서 나온 거고요.
Cisco 같은 경우에는 라우터 테이블에 조회를 했고, 노키아는 여기서 했고, 주니퍼 같은 경우에는 이 정도 됩니다.
예를 들어 하나만 설명을 드릴게요.
시스코 같은 경우에는 라우팅 테이블에서 조회를 해서 프롬이 두 개가 찍히면 이중화, 한 개 찍히면 단중화.
노키아는 꺽쇠표가 두 개면 이중화, 한 개면 단중화로 판단을 했어요.
쉽죠?
그렇게 해서 수십만 대의 가입자망 라우터의 단중화, 이중화를 시스템해서 판단하고 있습니다.
그 이건데요.
그다음에는 이건데요.
방법론을 설명을 드릴게요.
빨리 갈게요.
라우터 A와 라우터 B가 있습니다.
링크는 A, B 두 개가 있고요.
여기서 링크 A에서 갑자기 트래픽을 빼야 하는 경우가 있습니다.
그런 경우가 있어요.
그럴 때 방법론은 세 개예요.
첫 번째 라우터 A에서 셧다운을 하고, 2번, 3번 이렇게 한다.
물론 각자 회사마다 운영 지침이 있을 거예요.
정답은 없습니다.
그런데 저희 회사 같은 경우에는 3번이 답이에요.
1번을 하지 마라고 권고한 이유는 뭘까요?
이것도 책을 걸어야지 손을 들까요?
여기서 셧다운을 치면 어디가 죽는다는 거죠?
예, 죽을 수 있죠..
하여튼 제가 설명을 드릴게요.
제가 잘 이해를 못 했는데 어쨌든 책은 드릴게요.
목적은 책을 받는 거기 때문에..
이게 선생님 겁니다.
보통 1번 같은 경우에는 1번의 운영자가 하는 순간 트래픽이 빠져요. 셧다운을 치는 순간 에스에프 계산을 하는데 이게 끝나기 전까지 얘는 링크가 살아있는 상태에서.. 시간이 3분밖에.. 5분 남았나요? 5분 남았네요.
시력이 나빠서.. 1분 정도로 급히 마무리를 하고 질문을 받을게요.
여기서 중요한 거는 1번은 트래픽이 빠진다. 에스피피 알고리즘 때문에. 그런데 2, 3번은 트래픽이 안 빠집니다.
3번을 선호하고 있고요. 2번을 선호하지 않는 이유는 왜냐하면 패시브 인터페이스를 설정했는데 운영자가 와서 여기에 있는 에스피피를 뺄 수도 있죠. 그러면 얘는 고립이에요. 그러면 그 운영자는 원효대교를 가야 되는 거죠.
그런데 이러다 보니까 엔터프라이즈급 같은 경우에는 오에스피에프 설정이 많이 있어요. 수시로 뺐다 넣었다를 하는 거예요. 그래서 너무 많아요.
그런데 이 히스토리를 우리는 물론 관리를 하지만 어떤 문제가 발생하냐면 여기에 A라는 운영자가 여기에 코스트 설정을 했어요, 둘 다. 그러면 로드밸런싱이 됩니다. 제3자가 보기에는 특이사항이 없어요. 그리고 시간이 흘러서 3, 4년이 흐르고 A라는 운영자가 다른 팀으로 가고 B 운영자가 여기에 왔는데 시간이 흐르다 보니까 트래픽이 올라서 트렁크 증설을 하고 오에스비에프 설정을 하는 순간 어떻게 되죠?
IP 네트워크 현직에 계신 분들 맞으시죠?? ㅋㅋㅋ
그럴 수 있습니다.
여기 설정하고 여기에 설정했는데 여기에 설정하는 순간 모든 트래픽이 이쪽으로 가요. 폭주 나요.
이런 일이 종종 일어나는 거죠.
엔터프라이즈급의 코드 설정을 완벽하게 이해해야 되는데 이게 너무 많다 보니까 수시로 바뀌거든요, 코스트리 현황이. 이거를 트래킹을 못한다는 거죠.
그래서 코스트 변동 내용을 주기적으로 파악해야겠다고 생각해서 파수꾼을 만들었고요. 첫 번째는 파이썬을 이용해서 전수검사를 했습니다.
그리고 나서 운영자들을 다 모았어요.
코스 설정이 이만큼이 있더라고요. 이 설정이 정말 맞는 거야? 토론을 해서 이 설정은 꼭 있어야 될 것 같으면 남기고, 이 설정은 아무리 봐도 그런데? 하면 그 설정은 날렸어요.
그렇게 해서 정말 필수적인 것만 남겼습니다.
질문 받을 시간이 되나요?
그러면 제가 이 뒤에 알고리즘은 제가 내년에, 내년이라는 시간이 있잖아요. 내후년도 있고, 3년 생각했는데 4~5년 해야 될 것 같아요.
이 문자도 내년에 해야 되겠네요.
이것만 마지막 장표만 하고 질문을 받을게요.
현업에서 IP 엔지니어가 파이썬을 하다 보니까 두 가지 장점이 있어요.
첫 번째 장점은 자동화 시스템을 하다 보니까 업무 프로세스가 굉장히 편해졌다.
즉 워크 앤 밸런스가 좋아졌다는 거는 예측 가능한 장점이에요. 그런데 또 하나는 IP에 대한 깊이가 깊어지는 걸 느낍니다.
무슨 말이냐 하니 보통 결과를 예측하고 개발하거든요.
개발했는데 결과대로 안 나오는 건 당연해요. 딱 보면 열에 아홉은 모릅니다. 그런데 가끔 가다가 프로그램이 잘못된 게 없는데 내가 예측한 거하고 동작이 달라요. 왜 그런지 보면 아, 내가 생각했던 게 잘못됐구나, 내가 기존에 알고 있던 지식이 틀렸구나.
패러다임이 바뀌는 순간이 나옵니다.
하다 보면 예상치 못 했던 네트워크 인사이트를 얻게 돼요. 그 순간이 굉장히 짜릿합니다.
그래서 여러분들도 현업에 가시면 꼭 파이썬을 해서 자동화 시스템뿐만 아니라 네트워크를 깊이 하시고 원효대교는 안 가시기를 제가 기원하겠습니다. 질문을 받을게요.
여기 먼저..
-(사회자) : 질문은 가운데에서.. 한 분께만 받고 나머지는 발표자 분께 직접 받을게요.
가운데에 마이크가 있으니 거기서 질문해 주세요.
-(질문) : 발표 감사합니다.
초반에 카페에 대해서 소개를 해 주셨는데 카페에 대해서 좀 알 수 있을까요?
초반에 강사님께서 소개를 해 주실 때..
-(고득녕) : 발표 내용이 아니네요.
네이버에서 레전드라고 검색하시면 돼요. 지금 당장 네이버 카페에서 레전드라고 검색하시면 가장 큰 커뮤니티입니다.
책 한 권 수령하시면 될 것 같아요.
-(사회자) : 시간이 다 돼서 남은 발표는 앞에서 발표자 분께 직접 해 주시기 바랍니다. 긴 발표를 해 주신 고득녕 발표자 분께 뜨거운 박수 부탁드립니다.
다음 세션은 15분 이후에 진행하도록 하겠습니다.

<끝>