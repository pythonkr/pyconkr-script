1
00:00:00,000 --> 00:00:02,480
아 네 안녕하세요 정적타입 검사로

2
00:00:02,480 --> 00:00:04,270
더 나은 파이썬 코드 작성 하기

3
00:00:04,270 --> 00:00:07,750
세시 전에 와 주셔서 정말 감사합니다

4
00:00:07,750 --> 00:00:09,660
먼저 간단하게 제 소개를 하자면

5
00:00:09,660 --> 00:00:14,640
저는 지금 순천향대학교에서 컴퓨터 공학 전공하다가 휴학하고

6
00:00:14,640 --> 00:00:19,240
넥슨 코리아 에서 1년 5개월 정도 백엔드 개발자 로 근무하다가

7
00:00:19,240 --> 00:00:21,200
현재는 피플펀드컴퍼니 에서

8
00:00:21,200 --> 00:00:28,420
피플펀드 서비스에 백엔드개발 하고 있습니다 그럼 발표 시작하겠습니다

9
00:00:28,420 --> 00:00:33,060
파이썬을 싫어하는 사람들은 파이썬을 왜 싫어할까요

10
00:00:33,060 --> 00:00:36,740
이번 발표준비를 하면서 좀 찾아봤는데요

11
00:00:36,740 --> 00:00:40,280
많은 이유들이 있겠지만 크게 속도가 느려서

12
00:00:40,280 --> 00:00:43,630
혹은 탭으로 불러 9분 하는 게 싫어서

13
00:00:43,630 --> 00:00:47,040
아니면은 더 깊게 들어가 글로버 인터프리터로 때문에

14
00:00:47,040 --> 00:00:49,310
멀티스레딩 이 좋지 않아서

15
00:00:49,310 --> 00:00:53,730
이런저런 여러 이유를 찾을 수 있었습니다

16
00:00:53,730 --> 00:00:55,650
그리고 동적타입언어 라서

17
00:00:55,650 --> 00:00:59,370
싫어한다는 이유도 상당히 많이 볼 수 있었습니다

18
00:00:59,370 --> 00:01:05,440
대체 동적타입언어 가 뭐길래 사람들은 싫어할까요

19
00:01:05,440 --> 00:01:06,800
동적타입언어 가 있다면

20
00:01:06,800 --> 00:01:09,540
반대로 정적타입언어 당연히 깨져

21
00:01:09,540 --> 00:01:11,250
언어는 크게 이렇게 두 가지

22
00:01:11,250 --> 00:01:15,400
정적과 동적타입언어 나눌 수 있습니다

23
00:01:15,400 --> 00:01:19,610
간단하게 2 타이베이 차이점을 소개하자면

24
00:01:19,610 --> 00:01:23,790
정적타입언어 는 컴파일할때 객체의 타입이 결정됩니다

25
00:01:23,790 --> 00:01:27,430
그래서 일반적으로 한번 객체타입 타입이 정해지면

26
00:01:27,430 --> 00:01:30,810
그 뒤로는 다른 걸로 바꿀 수가 없으며

27
00:01:30,810 --> 00:01:34,280
이러한 특성 때문에 코드를 작성하거나

28
00:01:34,280 --> 00:01:37,720
컴파일할때 코드에서 발생한 타이머를 할 수 있고

29
00:01:37,720 --> 00:01:40,790
그 때 수정할 수 있습니다

30
00:01:40,790 --> 00:01:44,990
반대로 동적타입 번호는 타입이 실행 시간에 결정됩니다

31
00:01:44,990 --> 00:01:49,130
객체타입 이런 타임에 동적으로 변경될 수 있기 때문에

32
00:01:49,130 --> 00:01:50,900
유연하다는 장점이 있지만

33
00:01:50,900 --> 00:01:57,570
실행시간에 저희가 예상치 못한 폭을 만날 수 있습니다

34
00:01:57,570 --> 00:02:01,030
그래서 오늘의 주제인 정적타입 검사가 도대체 무엇이고

35
00:02:01,030 --> 00:02:04,160
하면 무엇이 좋아질까요

36
00:02:04,160 --> 00:02:05,800
일반적으로 작은 프로젝트

37
00:02:05,800 --> 00:02:08,980
라면은 프로젝트에 관여하는 개발자도 적고

38
00:02:08,980 --> 00:02:11,650
더 그룹이 유적을 거지만

39
00:02:11,650 --> 00:02:13,790
프린트가 커질수록 개발자도 많아지고

40
00:02:13,790 --> 00:02:18,400
그만큼 보고도 더 많이 발생할 것입니다

41
00:02:18,400 --> 00:02:21,560
만약에 이 프로젝트를 동적타입언어 작성했다면

42
00:02:21,560 --> 00:02:24,670
여러분은 프로젝트에서 1 객체를 보고

43
00:02:24,670 --> 00:02:28,610
이게 제가 어떤 타입인지 바로 유지할 수 있을까요

44
00:02:28,610 --> 00:02:30,700
객체의 타입이 명시되어있지 도 않고

45
00:02:30,700 --> 00:02:32,840
처음에 된 것 같다

46
00:02:32,840 --> 00:02:37,060
나중에 다른 타입이 타입의 값이 될 수 있기 때문에

47
00:02:37,060 --> 00:02:40,700
바로 6초에 내게는 힘들 것입니다

48
00:02:40,700 --> 00:02:44,380
그래서 몇 명 동적타입언어 들은 이러한 문제를 해결하기 위해

49
00:02:44,380 --> 00:02:47,600
정적타입 검색이라는 돈 벌을 도입합니다

50
00:02:47,600 --> 00:02:50,750
정적타입 검사기는 동적타입언어 에 코드

51
00:02:50,750 --> 00:02:53,200
전통적 타이머 너의 코드를 타이머

52
00:02:53,200 --> 00:02:55,210
너처럼 타입 검찰에서

53
00:02:55,210 --> 00:03:02,930
테스트나 실행 전에 그 버그를 발견해낼 수 있습니다

54
00:03:02,930 --> 00:03:05,280
결과적으로 정적타입 검사기를 사용해서

55
00:03:05,280 --> 00:03:08,800
언니들은 크게 두 가지로 볼 수 있습니다

56
00:03:08,800 --> 00:03:10,650
코드의 가독성이 올라가고

57
00:03:10,650 --> 00:03:14,560
타입으로 발생할 수 있는 법을 예방해 줍니다

58
00:03:14,560 --> 00:03:21,330
오늘 일 세션에서는 버그 예방이라는 주제에 좀 더 집중 해보겠습니다

59
00:03:21,330 --> 00:03:27,170
2017년에 정적타입 검사와 관련해서 동부와 논문 하나

60
00:03:27,170 --> 00:03:33,100
N2515 이란 제목의 논문입니다 이 논문의 연구진들은 깃허브에서

61
00:03:33,100 --> 00:03:38,070
일정 기존의 일정 기준에 만족한 자바스크립트 프로젝트를 대상으로

62
00:03:38,070 --> 00:03:40,860
정적타입 검색이나 자바스크립트

63
00:03:40,860 --> 00:03:41,980
정적타입언어 슈퍼

64
00:03:41,980 --> 00:03:45,240
최신 타입스크립트에서 적용했을 때 실제로 버그는

65
00:03:45,240 --> 00:03:50,370
얼마나 예방할 수 있을까 라는 주제로 욕을 했습니다

66
00:03:50,370 --> 00:03:52,250
그리고 그 결론은 전체 보고

67
00:03:52,250 --> 00:03:59,840
중에 15% 정도의 버그는 미리 예방할 수 있었다는 것을 찾아냅니다

68
00:03:59,840 --> 00:04:02,720
15% 정도의 버그를 미리 예방할 수 있다면

69
00:04:02,720 --> 00:04:07,650
한번 더 있다는 게 괜찮지 않을까요

70
00:04:07,650 --> 00:04:09,630
어 그런데 앞에서 연구한 논문은

71
00:04:09,630 --> 00:04:12,830
자바스크립트 프로젝트를 대상으로 했습니다

72
00:04:12,830 --> 00:04:19,040
그렇다 그렇다면 파이썬에서는 어떻게 할까요

73
00:04:19,040 --> 00:04:20,960
파이썬은 계속 발전하면서

74
00:04:20,960 --> 00:04:24,390
파이썬 객체 타입을 줄 수 있는 타이핑

75
00:04:24,390 --> 00:04:26,720
팅을 계속 추가해라 가는데요

76
00:04:26,720 --> 00:04:28,230
성전 그리고 타임

77
00:04:28,230 --> 00:04:31,760
마지막으로 배려 번호 계정이 순차적으로 추가되었습니다

78
00:04:31,760 --> 00:04:33,810
가장 마지막으로 추가된 베리어블

79
00:04:33,810 --> 00:04:38,390
어노테이션은 파이썬 3.6 부터 사용할 수 있습니다

80
00:04:38,390 --> 00:04:42,020
그래서 이 발표에서 보여드리는 코너들은 모두 파이썬

81
00:04:42,020 --> 00:04:49,890
3.6 이상의 버전에서 작성되었습니다 그럼 본격적으로 시작하겠습니다

82
00:04:49,890 --> 00:04:52,890
먼저 가장 기본적인 타이핑 티입니다

83
00:04:52,890 --> 00:04:56,100
일반적인 코드와 조금 다른 점이 보이시나요

84
00:04:56,100 --> 00:04:58,520
변수 이름 뒤에 콜론

85
00:04:58,520 --> 00:05:00,090
그리고 타입을 줘

86
00:05:00,090 --> 00:05:03,810
가지고 이 변수가 어떤 타입이라는 것을 나타냅니다

87
00:05:03,810 --> 00:05:08,870
함수에 인자도 마찬가지고 함수에 리턴타입 화살표

88
00:05:08,870 --> 00:05:11,520
그리고 타입을 줘서 이함 수가

89
00:05:11,520 --> 00:05:12,950
결과적으로 어떤 타입을

90
00:05:12,950 --> 00:05:17,550
반 안 한다는 것을 나타낼 수 있습니다

91
00:05:17,550 --> 00:05:20,510
파이썬의 기본 파일이 아니더라도

92
00:05:20,510 --> 00:05:22,350
사용자가 직접 만든 클래스

93
00:05:22,350 --> 00:05:30,940
나 타입을 직접 타이핑 해 줄 수 있습니다

94
00:05:30,940 --> 00:05:34,900
만약에 저희가 조금 더 타입을 엄밀하게 정의하려면

95
00:05:34,900 --> 00:05:38,680
예를 들어 스트링만 담는 리스트를 표시하고 싶다면

96
00:05:38,680 --> 00:05:42,490
이렇게 하면 되지 않을까요

97
00:05:42,490 --> 00:05:45,470
실제로 이렇게 하면 오류가 발생 하게 됩니다

98
00:05:45,470 --> 00:05:47,190
왜냐하면 저기 있는 리스트는

99
00:05:47,190 --> 00:05:49,530
파이썬은 기본적인 타입이고

100
00:05:49,530 --> 00:05:52,040
어떠한 인자도 받지 않기 때문에

101
00:05:52,040 --> 00:05:57,880
이렇게 하면은 오류가 발생 하게 됩니다

102
00:05:57,880 --> 00:06:04,860
만약에 더 나아가서 인트와 스트링 리스트 혹은 문자로

103
00:06:04,860 --> 00:06:08,860
가실 수 2 순서로 값을 담는 유플

104
00:06:08,860 --> 00:06:14,830
혹은 문자를 키아 파이트 값을 가진 딕셔너리 아니라면은 제네릭함수

105
00:06:14,830 --> 00:06:19,440
아 클래스 실제로 저희가 실제 코드를 잘 때

106
00:06:19,440 --> 00:06:21,380
자주 사용하는 것은 이런 건데

107
00:06:21,380 --> 00:06:25,470
이런 것들은 어떻게 변할까요

108
00:06:25,470 --> 00:06:26,520
파이썬 3.7

109
00:06:26,520 --> 00:06:29,010
추가된 탈피라는 모듈을 사용

110
00:06:29,010 --> 00:06:33,220
해서 이 문제를 해결할 수 있습니다

111
00:06:33,220 --> 00:06:36,010
타이핑 모두 에서 만든 리스트와 슈플

112
00:06:36,010 --> 00:06:39,070
그리고 딕셔너리에서 더 자세하고

113
00:06:39,070 --> 00:06:43,790
엄밀한 타입을 정의할 수 있습니다

114
00:06:43,790 --> 00:06:46,160
승만호 형아는 리스토어 트레이닝

115
00:06:46,160 --> 00:06:49,500
앤트풀 순서로 값을 갖는 큐플

116
00:06:49,500 --> 00:06:53,750
혹은 스트링 키를 가지고 블럭 값을 갖는 딕셔너리

117
00:06:53,750 --> 00:07:01,740
는 이렇게 정의할 수 있습니다

118
00:07:01,740 --> 00:07:06,570
만약에 여러 개 값을 담고 싶다면 어떻게 해야 될까요

119
00:07:06,570 --> 00:07:09,190
예를 들어 이렇게 리스토어

120
00:07:09,190 --> 00:07:11,720
리스트안에 스트링과 int'L 모두 다 무슨 일 있어

121
00:07:11,720 --> 00:07:16,130
학생 경우는 이렇게 하면 아마 될 거 같지만

122
00:07:16,130 --> 00:07:18,850
실제로는 오류가 발생하였습니다

123
00:07:18,850 --> 00:07:21,900
오류를 잘 읽어 보면은 타입

124
00:07:21,900 --> 00:07:24,000
인자가 하나 만들어야 되는데

125
00:07:24,000 --> 00:07:28,440
두개가 들어왔다고 알림 알려 주고 있죠

126
00:07:28,440 --> 00:07:32,550
그래서 저희는 타이핑에 있는 유니온 타입 을 사용 해서

127
00:07:32,550 --> 00:07:36,040
여러 개 타입을 하나의 타입으로 묶어 줄 수 있습니다

128
00:07:36,040 --> 00:07:37,760
이렇게 되면은 여기 있는 마이

129
00:07:37,760 --> 00:07:39,810
리스트는 스트링과 인트

130
00:07:39,810 --> 00:07:45,920
못 참을 수 있는 리스트가 됩니다

131
00:07:45,920 --> 00:07:47,420
다른 정적타입언어 에서

132
00:07:47,420 --> 00:07:49,490
종종 볼 수 있는 롤러블 타입은

133
00:07:49,490 --> 00:07:51,260
이렇게 구현할 수 있습니다

134
00:07:51,260 --> 00:07:53,800
파이썬은 널 계신 너희 있으니

135
00:07:53,800 --> 00:08:02,880
저렇게 유니온의 너는 넣어 주면 됩니다

136
00:08:02,880 --> 00:08:05,660
조금 더 간단하게 옵션은 타입을 사용하면은

137
00:08:05,660 --> 00:08:09,150
방금 전까지 똑같은 타입을 만들 수 있습니다

138
00:08:09,150 --> 00:08:13,280
여기 있는 마일드와 마인리스트 두는 완전히 똑같이 스크린간

139
00:08:13,280 --> 00:08:19,620
오늘 모두 담을 수 있는 리스트가 됩니다

140
00:08:19,620 --> 00:08:22,380
만약에 같은 여러 번 사용해 된다면

141
00:08:22,380 --> 00:08:23,990
어떻게 해야 될까요

142
00:08:23,990 --> 00:08:25,340
이렇게 코드도 짧고

143
00:08:25,340 --> 00:08:28,650
타입이 간단하다면 별로 문제가 되지 않겠지만

144
00:08:28,650 --> 00:08:31,700
더 복잡한 타임 인 경우는 매번 타이머

145
00:08:31,700 --> 00:08:36,000
적어주 게 너무 고통스러울 거죠

146
00:08:36,000 --> 00:08:38,220
이런 경우에는 뉴타입 이라는 타이핑

147
00:08:38,220 --> 00:08:39,810
뭐 들어있는 함수를 사용하면

148
00:08:39,810 --> 00:08:44,130
간단하게 사용자 정의 타입을 정의할 수 있습니다

149
00:08:44,130 --> 00:08:51,780
아까보다 훨씬 더 깔끔한 코드가 되었죠 이

150
00:08:51,780 --> 00:08:55,440
예제는 덕 타입을 인정을 받는 제네릭함수 입니다

151
00:08:55,440 --> 00:08:56,860
시퀀스란 타입들

152
00:08:56,860 --> 00:08:58,480
그러니까 리스트나 큐플

153
00:08:58,480 --> 00:09:03,660
스트림 같은 자료 형들의 컨테이너 S-590 받고

154
00:09:03,660 --> 00:09:08,540
첫 번째 반환해주는 제네릭함수 를 구현한 것인데요

155
00:09:08,540 --> 00:09:11,430
저기 있는 카이바가 타입

156
00:09:11,430 --> 00:09:15,130
바로 서는 안티가 제네릭을 나타냅니다

157
00:09:15,130 --> 00:09:21,120
예를 들어 퍼스트 하우스에 나가 인티저 리스트가 들어왔다면

158
00:09:21,120 --> 00:09:28,250
반환값은 인티저 가 됩니다

159
00:09:28,250 --> 00:09:30,670
만약에 이제 내리기 에서 입력 받는 타임

160
00:09:30,670 --> 00:09:31,840
마저 재환 하고 싶다면

161
00:09:31,840 --> 00:09:37,310
은 타이머 를 통해 함수 변수 타입 변수를 3학년 때

162
00:09:37,310 --> 00:09:41,380
허용한 타입을 인자로 옮겨 주면 됩니다 이 경우에는

163
00:09:41,380 --> 00:09:44,440
잉크 또는 플릇 플릇

164
00:09:44,440 --> 00:09:52,610
박스 로 이루어진 슈퍼스 데이터만 인도로 받게 됩니다

165
00:09:52,610 --> 00:09:55,140
제네릭 클래스는 타이핑해 있는 제네렉

166
00:09:55,140 --> 00:09:59,640
이라는 베이스 클래스를 상속받아 구현할 수 있습니다 이 예제는

167
00:09:59,640 --> 00:10:11,820
간단한 스탭 클래스를 나타냅니다

168
00:10:11,820 --> 00:10:14,430
함수를 위한 타이핑이 없이 있습니다

169
00:10:14,430 --> 00:10:17,810
컬러 버리는 타입을 사용하면 됩니다

170
00:10:17,810 --> 00:10:18,890
clover 첫 번째

171
00:10:18,890 --> 00:10:23,770
인자는 값으로 받을 함수에 파라미터의 타임 목록

172
00:10:23,770 --> 00:10:28,450
이공 두 번째 인다는 값으로 받을 함수에

173
00:10:28,450 --> 00:10:30,280
반은 타입입니다

174
00:10:30,280 --> 00:10:32,230
이렇게 해서 이제 변수

175
00:10:32,230 --> 00:10:37,070
apns-123 나는 함수를 입력받고

176
00:10:37,070 --> 00:10:38,160
저 이제 애플을 사용

177
00:10:38,160 --> 00:10:48,830
해서 대신 함수를 호출할 수 있습니다

178
00:10:48,830 --> 00:10:50,610
비동기함수 역시 지원합니다

179
00:10:50,610 --> 00:10:53,700
기존 함수처럼 크게 다르지 않게

180
00:10:53,700 --> 00:11:03,310
그냥 일반적으로 사용하면 됩니다

181
00:11:03,310 --> 00:11:06,280
지금까지 여러 여자들 알아봤는데요

182
00:11:06,280 --> 00:11:11,520
만약에 이렇게 명시된 타입과 들어오는 타입의 값이 다른 경우는

183
00:11:11,520 --> 00:11:16,000
어떻게 될까요

184
00:11:16,000 --> 00:11:21,800
파이썬으로 그냥 이 코드를 실행해 보면 아주 잘 작동합니다

185
00:11:21,800 --> 00:11:23,790
어 왜 잘될 거야

186
00:11:23,790 --> 00:11:25,390
우리는 분명히 아까

187
00:11:25,390 --> 00:11:29,300
변수에는 인티드 라고 써 놨는데 말해 줘

188
00:11:29,300 --> 00:11:31,350
사실 기본적으로 타이핑

189
00:11:31,350 --> 00:11:36,720
모주란 하이 변수가 어떤 타일을 것이다라고 타입을 알려주기만

190
00:11:36,720 --> 00:11:41,260
아직 실제로 이거를 제안하거나 그러진 않습니다

191
00:11:41,260 --> 00:11:43,640
그래 가지고 여기에

192
00:11:43,640 --> 00:11:47,510
탑 마이 파이라는 정적타입 검사기를 부쳐 줘야 실제로

193
00:11:47,510 --> 00:11:52,120
우리가 원하는 결과를 얻을 수 있습니다

194
00:11:52,120 --> 00:11:58,820
와이파이는 pip 를 통해 간단하게 설치할 수 있고요

195
00:11:58,820 --> 00:12:03,480
설치한 다음에는 와이파이에 정적타입 검사를 할 파일이나

196
00:12:03,480 --> 00:12:07,590
폴더 목록을 인자로 넘겨 주면 됩니다

197
00:12:07,590 --> 00:12:09,570
예를 들어 하나의 파일썬

198
00:12:09,570 --> 00:12:12,510
코드만 검사하고 싶을 때는 이렇게 마야

199
00:12:12,510 --> 00:12:17,820
여기에 하나의 폴더를 더 추가해서 하나의 파일과 하나의 폴더

200
00:12:17,820 --> 00:12:19,710
통째로 검사하고 싶다면

201
00:12:19,710 --> 00:12:24,210
이렇게 여러 개를 넣어 주면 됩니다

202
00:12:24,210 --> 00:12:28,440
그래서 아까 보여 드린 잘못된 코드를 와이파이를 통해

203
00:12:28,440 --> 00:12:31,950
테스트를 보면은 이렇게

204
00:12:31,950 --> 00:12:36,760
타일 관련 오류를 잘 잡아 주는 것을 볼 수 있습니다

205
00:12:36,760 --> 00:12:38,920
인터 타입 변수의 문자를 들어오고

206
00:12:38,920 --> 00:12:42,110
트랙리스트 다른 타입의 데이터가 있다고

207
00:12:42,110 --> 00:12:44,410
오늘 비 옵니다

208
00:12:44,410 --> 00:12:47,570
또한 삽입할 때도 스트링이 아닌 바이트타입

209
00:12:47,570 --> 00:12:50,930
2타입 데이터를 삽입 한다고 오류를 끼워줍니다

210
00:12:50,930 --> 00:12:57,690
저희는 이렇게 예상치 못한 버그를 예방할 수 있습니다

211
00:12:57,690 --> 00:13:02,360
어이 코드는 와이파이가 실제로 어떻게 처리할까요

212
00:13:02,360 --> 00:13:08,690
잘 될 거 같네요 사실 이 코드는 오류입니다

213
00:13:08,690 --> 00:13:12,930
왜냐면 와이파이는 가장 처음 돼 있던 값에 타입을 그 변수에

214
00:13:12,930 --> 00:13:15,040
그 객체의 타입으로 보기 때문에

215
00:13:15,040 --> 00:13:19,550
처음 일에 대해서 변소 X 의 타입은 인트가 되고요

216
00:13:19,550 --> 00:13:21,390
그다음에 수정 일을 하기 때문에

217
00:13:21,390 --> 00:13:22,910
잘못된 타입의 같이 들어가서

218
00:13:22,910 --> 00:13:27,730
이거든 오류가 월요일에 보게 됩니다

219
00:13:27,730 --> 00:13:32,850
기존의 파이썬처럼 객체가 여러 가지

220
00:13:32,850 --> 00:13:36,830
여러 동적인 타입을 받고 싶다고 할 때는 1층에 있는 애니타임

221
00:13:36,830 --> 00:13:39,410
이라고 타이핑을 줘야 됩니다

222
00:13:39,410 --> 00:13:42,290
이렇게 되면은 기존 파이썬의 객체처럼

223
00:13:42,290 --> 00:13:50,580
통닭 가게 됩니다

224
00:13:50,580 --> 00:13:52,550
와이파이는 기본적으로 되게

225
00:13:52,550 --> 00:13:55,860
많은 부분에 대해서 뜻은 하게 검사를 해주고

226
00:13:55,860 --> 00:14:00,300
사용자가 세부적으로 어떤 부분에 대해서 좀 더 크게 검사하고

227
00:14:00,300 --> 00:14:04,220
어떤 거는 느슨하게 검사 했지 설정하게 느낍니다

228
00:14:04,220 --> 00:14:10,120
그래가지고 기본적으로 잉크랑 쓰레기랑 비교를 하거나

229
00:14:10,120 --> 00:14:18,170
혹은 그런 경우에는 실제로 오류를 띄워 주지 않기 때문에

230
00:14:18,170 --> 00:14:20,610
여러분이 직접 컨피그파일 설정

231
00:14:20,610 --> 00:14:22,920
만들어서 설정을 해야 되고요

232
00:14:22,920 --> 00:14:26,140
한 프로 스탠의 패키지 뭐 드릴 텐데

233
00:14:26,140 --> 00:14:28,890
그 패키지 모듈마다 각각 다른 설정으로 설정

234
00:14:28,890 --> 00:14:32,250
해 줘 마이크로 하게 설정해 줄 수 있습니다

235
00:14:32,250 --> 00:14:36,270
오늘 이게 발표가 저거 살짝 빨리 끝났는데요

236
00:14:36,270 --> 00:14:39,240
48평 여러분에게 와이파이가 할 수 있는

237
00:14:39,240 --> 00:14:41,160
모든 세세한 부분을 다 하나하나

238
00:14:41,160 --> 00:14:45,150
G4 하기보다는 이런 게 있고 이렇게 사용할 수 있고

239
00:14:45,150 --> 00:14:46,400
그래서 쓰면 이래서 좋다

240
00:14:46,400 --> 00:14:51,700
라는 것을 알려 드리기 위한 목적으로 발표회 받는 거라서

241
00:14:51,700 --> 00:14:55,430
돈을 더 조금 더 자세한 부분은 와이파이도 엄마가 돈

242
00:14:55,430 --> 00:14:59,930
저를 보시면서 각자의 프로젝트에 맞는 설정을 찾아

243
00:14:59,930 --> 00:15:02,680
검사를 하시면 더 좋을 것 같습니다

244
00:15:02,680 --> 00:15:08,390
직접 오시면은 실제로 하나도 어렵지 않습니다

245
00:15:08,390 --> 00:15:11,390
아까 간단한 마이파이 예제를 보여드렸는데요

246
00:15:11,390 --> 00:15:16,790
아까는 콘솔 터미널에서 와이파이 바이너리를 사용해 검사 했지만

247
00:15:16,790 --> 00:15:19,620
와이파이는 비민 아이맥스

248
00:15:19,620 --> 00:15:25,230
혹은 요즘 자주 많이 쓰는 VS 코드 파이참 같은 아이디

249
00:15:25,230 --> 00:15:26,680
인아텍 3리터 맞아

250
00:15:26,680 --> 00:15:31,280
이제 다른 언어에 린터 처럼 플러그인을 지원해 줍니다

251
00:15:31,280 --> 00:15:36,940
그래서 와이파이 깃허브에서 가시면은 좀 더 자세한 정보와

252
00:15:36,940 --> 00:15:38,950
조금 더 편리하게 사용할 수 있는 여러가지

253
00:15:38,950 --> 00:15:43,650
플러그인이 있으니까 확인해 보시면 좋을 것 같습니다

254
00:15:43,650 --> 00:15:47,140
오늘 발표는 여기까지입니다 들어 주셔서 감사합니다
