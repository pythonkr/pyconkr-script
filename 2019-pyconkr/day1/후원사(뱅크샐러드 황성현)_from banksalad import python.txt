            <PYCON KOREA 2019>
                   [뱅크샐러드]
     *** 3시 45분에 시작합니다. :) ***

-발표 시작하도록 하겠습니다. 저는 발표를 맡게 된 황성현입니다. 반갑습니다. 
(박수)
이 세션이 후원사 세션임에도 불구하고 생각보다 많은 분들이 와주셔서 깜짝 놀랐습니다. 옆에 104호에서도 되게 유용하고 좋은 발표가 있으니 혹시 듣다가 지루하신 분들은 104호 세션을 들으셔도 좋을 것 같습니다. 
저를 소개하는 걸로 발표를 시작해보려고 합니다. 저는 2014년부터 파이썬을 사용을 해왔었고요. 그리고 2014년부터 뱅크샐러드에 합류해서 5년째 뱅크샐러드를 함께 만들고 있습니다. 
뱅크샐러드 초기에는 이것저것 가리지 않고 자질구레한 엔지니어링 업무부터 서버나 이런 것들을 개발을 해왔고요. 지금은 전반적인 시스템을 디자인하거나 마이크로서비스를 어떻게 구성할지 등등의 설계를 주로 하는 역할을 담당하고 있습니다. 
그리고 앞서 말씀을 드렸듯이 이 컨텐츠는 후원사 세션인 관계로 다량의 관계를 포함하고 있을 수 있습니다. 
그래서 이 점 좀 미리 양해의 말씀을 드리도록 하겠습니다. 

말이 나온 김에 뱅크샐러드가 뭐냐에 대해서 후원사의 광고의 시간이 잠시 있겠습니다. (웃음) 
<광고 영상>
혹시 사운드가 들리세요? 갑자기 사운드가 없는 영상이 돼버렸는데... 예, 아무튼 이런 식으로 뱅크샐러드는 다양한 금융상품들을 사용자가 직접 머리아프게 비교하지 않아도 나에게 가장 맞는 좋은 금융상품을 골라주는 기능들을 제공을 하고 있고요. 그리고 내가 가지고 있는 금융자산들, 돈관리에 필요한, 혹은 내가 가지고 있는 은행계좌나 아니면 카드, 증권사 계좌 등등의 다양한 금융상품을 한 데 모아서 볼 수 있는 기능을 제공하는 앱 서비스입니다. 
그래서 여기 화면이 나오는 것처럼 이런 형태로 구성이 되어 있습니다. 광고 시청 감사드립니다. 

그러면 본격적으로 좀 발표를 시작을 해볼게요. 뱅크샐러드가 왜 파이콘에 스폰서로 후원을 했느냐가 궁금하실 수 있을 것 같아요. 저희는 대부분의 서버 비즈니스 로직 개발을 파이썬을 이용을 하고 있습니다. 
그래서 이후에도 후술을 하겠지만 저희 서비스의 70% 이상이 파이썬으로 순수하게 작성이 되어 있고요. 그건 뒤에 가서 조금 더 자세하게 이야기를 하도록 하겠습니다. 
그리고 현재 서버개발자 분들이 약 20명 정도 계신데요. 그 20명 전원이 파이썬을 능숙하게 사용하고 계시는 회사입니다. 
그리고 또한 저희가 이름은 뱅크샐러드지만 회사 사명은 레이니스트예요. 그래서 레이니스트 깃허브 닷컴을 들어가시면 저희가 파이썬 관련된 작고 소소하지만 유용한 오픈소스들을 몇 개 운영하고 있습니다. 
그리고 저희가 만든 오픈소스뿐만 아니라 파이썬 생태계 전반적으로 많이 사용되는 라이브러리들을 저희가 회사차원에서 기여를 한 바 있기 때문에 이번에 파이콘을 후원하게 되었습니다. 
그래서 오늘 발표는 이런 내용을 다루려고 해요. 제가 발표자 프로필을 소개하면서도 말씀을 드렸지만 뱅크샐러드가 초기부터 어떤 기술과 관련된 의사결정들을 내려왔었는지 그거를 조금 에피소드단위로 짤막짤막하게 공유를 드리면서 지금 돌이켜 보니 어떤 건 잘 선택을 했던 것 같고 어떤 것은 다시 돌아가보면 이런 선택을 할 것 같다는 저나 회사의 견해를 말씀드리려고 하고요. 
그리고 그 과정에서 어쩌다 고르게 된 파이썬을 왜 지금까지도 잘 쓰고 있는지. 그리고 현재 그러면 저희는 파이썬을 어디에 어떻게 쓰고 있는지를 간단하게 소개하려고 합니다. 

그래서 약간 타임머신 컨셉으로 구성을 해봤어요. 2015년으로부터 썰을 풀도록 하겠습니다. 
그래서 처음에 2015년에 뱅크샐러드에 사람들이 모였을 때, 그러니까 뱅크샐러드라는 걸 만들려고 사람들이 6명 정도가 모였고 개발자가 둘 정도 있었습니다. 그래서 "우리 뭘 만들지?" 하고 이야기를 하다가 "이런 거 만들어보면 어떨까?" 해서 카드를 추천하는 서비스에 대한 아이디어가 나왔어요. 
우측 화면이 현재 저희 뱅크샐러드 웹사이트의 기능을 스샷을 찍어온 거거든요. 
그래서 이 카드추천 서비스는 뭐냐. 내가 원하는 카드의 종류를 필터로 입력할 수 있고요. 그리고 내가 한 달에 예를 들면 뭐 스타벅스에 5만 원 정도 쓰고 대중교통에 10만 원 정도 쓰고 이렇게 내가 알고 있는 나의 소비패턴들을 직접 인풋을 넣으면 그걸 바탕으로 카드혜택들을 실제로 계산을 하는 거예요. 
그래서 예를 들면 스타벅스 10% 할인카드가 있으면 아주 간단하게 이야기 해서 월에 5만 원 정도 쓰면 월에 5천 원 정도 혜택을 받는 거잖아요. 그래서 이런 식으로 계산을 해서 가장 정확한 카드를 추천해주면 어떨까? 라고 생각을 하게 되었습니다. 
그래서 이런 아이디어를 가지고 저희가 이런 서비스를 한번 만들어보자고 결정을 했는데 당시에 개발자가 두 명이었고 저희 개발자 둘은 처음 만나서 어색한 사이였어요. 그래서 각자 "아... 파.. 파이썬 좋아하세요? 다른 언어는 좋아하세요? 아, 네.." 이런 식으로 어색한 시간을 보냈고요. 
그래서 당시에 우연히 모인 개발자 두 명이 파이썬을 쓰고 있었고 좋아했었어요. 그래서 파이썬을 고르게 됐는데 당시에 생각은 그냥 이런 생각까지는 아니었지만 지금 생각해보면 언어를 잘못 골라서 서비스가 잘 안 돼서 이 스타트업이 망할 확률과 그냥 서비스를 잘 못 만들어서 사용자들이 안 쓰는 서비스를 만들어서 망할 확률을 따져보면 훨씬 더 후자가 높았던 것 같아요. 
그래서 그냥 뭐 파이썬 때문에 망할 리가 있겠냐는 생각으로 저희가 편한 언어인 파이썬을 골랐습니다. 
그래서 이렇게 조금 친해진 후에 그러면 어떤 서버프레임워크로 만들까요? 어떤 식으로 만들까요?에 대해서 이야기를 하기 시작했어요. 
그래서 우선은 저 말고 다른 개발자 분께서 장고를 많이 익숙하게 쓰시는 분이었어요. 그래서 장고로 뚝딱 한번 만들어보자고 해서 간단하게 프로토타이핑을 해봤으면 좋겠다고 이야기를 해주셔서 그러면 한번 만들어보자고 결정을 하고 장고로 카드추천을 만들기 시작을 했습니다. 
그런데 당시에 저희 데이터베이스상에 카드가 2,000개 정도 있었고 정확하게는 기억이 안 나지만 2,000개의 카드혜택 데이터가 20만 개에서 30만 개 정도 있었고 카드 중에 경우의 수를 고려해야 되는 카드들도 있다 보니까 실제로 저희가 불러와야 되는 데이터의 수는 100만 개, 200만 개 정도 됐었어요. 지금보다는 절반 정도밖에 안 되는데도 실제로 처리할 데이터 양이 꽤 많았습니다. 
그래서 저희가 장고로 만든 프로토타입에서 배운 건 카드추천을 받으려고 만들었는데 카드데이터를 불러오다가 추천을 못했어요. 그래서 이 문제는 저희는 되게 뭐 복잡한 알고리즘 내지는 수학연산의 문제인 줄 알았는데 우선 엔지니어링적으로 해결해야 되는 건 어떻게 하면 DB풀을 많이 줄일 거냐, 이 구조를 만들어야 겠다는 것을 알게 되었습니다. 
그래서 DB 문제를 해결하기 위해서 DB에서 늘 데이터를 가지고 오는 게 아니라 카드혜택은 생각해보니까 한 달에 한번 정도 바뀔까 하는 유형의 데이터였어요. 어떤 게시판의 글처럼 자주 수정이 일어나고 코멘트가 달리는 게 아니라 한번 금융사에서 혜택을 고시를 하고 나면, 그런 과정들을 통해서 혜택이 변경되는 데 조금 시간이 걸리는 형태의 데이터였기 때문에 꼭 데이터를 실시간으로 불러와야겠다는 니즈가 많이 없었어요. 
그래서 저희가 생각을 했던 게 우리는 일단 어떻게 카드의 혜택을 계산할지도 모르는데 카드를 불러오는 방법도 모르니 카드를 불러오는 걸 굉장히 간단한 형태로 만들어서 어떻게 하면 카드의 혜택을 개선할 수 있을까? 라는 문제에 집중을 해보자고 의논을 했습니다. 
그래서 바로 결심을 했던 게 그러면 DB에서 더 이상 카드 데이터를 불러오지 말고 서버 어플리케이션에 처음에 떴을 때 딱 한번만 최초에 모든 데이터베이스에서 데이터를 가지고 온 다음에 그걸 인메모리에 띄우자. 혹은 그걸 캐시 형태로 저장을 해서 매번 캐시에 접근을 할 수 있도록 하자, 이런 여러 아이디어들이 있었어요. 
즉 직접 매뉴얼하게 항상 DB를 가지고 오는 횟수를 줄이고자 했던 거죠. 
그런데 여기서 저랑 다른 개발자 분이랑 의논을 했던 점이 래디스나 이런 걸 둬서 그래도 조금 엔지니어답게 하자. 글로벌변수를 만드는 건 정말 안 좋을 것 같다. 
그리고 글로벌로 모듈 레벨의 상수를 만들어놓고 이걸 DB로 활용하는 것 자체가 굉장히 안티패턴이라는 건 인지를 하고 있었어요. 
그런데 과연 이 안티패턴 때문에 망할까? 아니면 이 안티패턴을 피하고자 실시간으로 데이터를 처리하는 것에 집중해서 한두 달을 날리는 게 우리의 상황에 맞나? 왜냐하면 당시에는 저희가 회사에 마땅히 매출도 없고 그냥 뭔가 잘해보고자 모였던 사람들이 모여있던 상황이기 때문에 그런 생각을 많이 했던 것 같아요. 
그래서 일단은 이 문제를 굉장히 간단하게, 그리고 간소하게 바꾸기 위해서 안티패턴임을 앎에도 불구하고 글로벌한 변수를 그냥 쓰고 아무런 데이터베이스에 접근을 하지 말자고 결정을 했습니다. 그래서 하루라도 빨리  이게 동작하는지, 그리고 사용자들한테 나갔을 때 사용자들이 과연 이 UX를 이해를 하는지. 
혹은 좀 설득이 되는 UI인지. 이런 것들을 알고 싶었던 게 큰 것 같아요. 그래서 어떻게 결국 했냐 하면 앞서 말씀드린 대로 서버 앱이 처음에 떴을 때 글로벌한 딕셔너리에 모든 카드 데이터들을 다 집어넣었어요. 그래서 그냥 카드의 아이디 같은 게 키가 되는 거죠. 
그래서 이런 식으로 하니까 메모리는 엄청나게 먹는 서비스가 됐지만 일단 한번 다 올리고 나면 접근이 빨라요. 그래서 그때부터는 이 데이터들을 이용해서 어떻게 하면 정확하게 개선할 수 있을지에 대한 집중을 할 수 있었습니다. 
그래서 어떻게 저떻게 해서 개선을 드디어 완료를 했어요. 그리고 서비스를 론칭을 했습니다. 물론 아무에게도 알리지 않았죠. 그냥 일단 저희끼리 론칭을 하고 자축을 했습니다. 
그런데 일단 한번 출시를 해보니까 그래도 어떻게 알고 오신 건지 너무 궁금하게도 한 달에 한 100명 정도는 쓰시더라고요. 그래서 그 버전으로 사용을 해봤을 때 카드 하나가 추천이 되는 데 약 10초 정도가 걸렸어요. 
그래서 10초를 기다리면 "웹사이트가 꺼졌나?"를 의심할 때쯤에 카드가 나와서 추천이 되는 거예요. 그래서 이분들을 가지고 어쨌든 저희가 지표를 볼 수 있었어요. 그래도 100명이라는 사용자가 그렇게 데이터적으로 유의미할까? 싶기는 하지만 어쨌든 100명이 들어왔을 때 몇 명이나 다음 스텝으로 넘어가서 카드 정보를 보려고 해? 라는 지표들을 얻을 수 있게 됐죠. 
그래서 사용자는 매우 적지만 적어도 하루하루 뭔가를 배울 수 있었고 그래서 그냥 매일 들어와서 저희가 했던 건 "이 버튼 이렇게 바꿔볼까요?" 아니면 뭐 "이 로고가 조금 더 좋지 않을까요?" 이런 식으로 자잘자잘한 전환률을 높이고자 하는 실험들과 출시를 함으로서 알게 된 수많은 버그들을 잡는 데 시간을 많이 썼습니다. 
그런데 이런 식으로 계속 조금씩 개선을 해나가다 보니까 비록 10초나 걸리는 훌륭한 산물은 아니지만 어쨌든 전환률이 조금씩 올라가기 시작했고 이 정도면 뭔가 사업을 해볼만 하다는 느낌이 오기 시작했어요. 
그러니까 절대 숫자를 봤을 때는 이걸로 사업을 하는 걸 결정할 수치는 아니었는데 잘하면 계속 올릴 수 있겠다는 막연한 생각이 들었던 것 같습니다. 
그래서 당시에 그러면 조금 더 많은 사용자들이 잘 쓸 수 있도록 만들어야겠다. 이제 한번에 10초씩 걸리는 연산을 하는 서버는 잘 아시겠지만 한 달에 100명 이상 들어오게 되면 그냥 뻗을 게 분명하거든요. 한번 요청을 보낼 때마다 10초씩 걸리는 서버는 너무너무 불안정하고 너무 운영비용이 많이 드는 서버입니다. 
그래서 어떻게 하면 성능을 빨리 만들 수 있을까를 고민을 했어요. 
그래서 지금 그러면 카드추천이 왜 10초씩이나 걸리지? 이 10초를 얼마큼에 할애하고 있는지를 프로파일링을 해보니까 DB는 아무 문제가 아니었어요. 왜냐하면 당연히 글로벌딕트였고 그냥 키로 접근하면 되기 때문에. 그리고 그 키가 결국은 카드가 키이기 때문에 2,000개 정도밖에 안 됐거든요. 
그래서 어떤 데이터를 가져오고 처리하는 부분에서는 전혀 성능 부하가 없었는데 그 데이터를 가지고 왔을 때 너무 오래 걸렸어요. 그거를 저희가 계산을 해서 이 사람의 예상 혜택금액을 알아내는 데까지 너무 오래 걸렸습니다. 
그래서 우리의 연산형태를 튜닝을 해야겠다. 어떻게 하면 이 알고리즘을 조금 더 낫게 만들 수 있을까를 고민을 해봤어요. 
파이썬이 일반적으로 다른 언어들에 비해서 느리다고 표현을 하는데 파이썬이 느린 연산의 형태는 제가 생각했을 때 크게 두 가지가 있는 것 같아요. 첫 번째로는 수리연산들이 있어요. 그러니까 깡으로 어떤 숫자들을 많이 곱해야 되고 행렬에 대해서 연산을 해야 되고 이런 유형의 연산들은 파이썬이 아니라 파이썬으로 만들어진 라이브러리들을 이용해서, 예를 들면 넌파이나 넌바 같은 걸 이용하면 성능을 많이 해결할 수 있어요. 
다만 저희가 만들고 있는 카드추천 프로그램 같은 경우에는 순수하게 깡으로 코루프를 많이 돌아야 하는 형태였기 때문에 이건 수리연산 라이브러리들을 이용해서 성능이 좋아질 수는 없는 문제였어요. 
그러다 보니까 그냥 조금 더 알고리즘을 잘 만들어서 연산횟수를 줄여야 했고 그냥 깡으로 언어의 성능이 좋아야만 했어요. 
그래서 이런 유형의 문제들을 풀다 보니까 두 가지가 있었어요. 첫 번째로 알고리즘을 우리가 잘못 짠 거 아닐까? 했을 때 앙시 저희 회사에 계셨던 분이 굉장히 고스펙의 알고리즘 전문가였기 때문에 이분은 범인이 아니다. 분명 범인은 다른 것이다. 그래서 파이썬을 믿은 나를 믿은 우리 모두의 책임이라고 판단을 하고 저희가 어떻게 할지를 고민하기 시작했습니다. 일단 이걸로 사업을 해보기로 마음먹었기 때문에 어떻게든 스케일의 문제는 해결했어야 했어요. 
그래서 방법은 파이썬을 해봤으니까 다른 언어로 다시 짜자. 그런데 당시에 저와 어색했던 개발자 두 명은 파이썬 외에는 능숙하게 쓰는 언어가 없었어요. 그리고 저희 둘 다 알고리즘 대회 출신이나 익숙한 사람들이 아니었기 때문에 과연 이 복잡한 알고리즘을 처음 써보는 언어로 잘 표현을 할 수 있을지 많이 두려웠어요. 
그런 환경에서 다른 언어들을 고려를 할 경우에는 저희가 뭔가 앞으로 나아가는 데까지 최소 세 달의 보폭은 필요한 거예요. 
그리고 아마 세 달로 추정을 했지만 보통 추정은 두 배 정도 틀리니까 6달 정도 필요했을 수 있겠죠. 
그렇다면 저희의 2015년의 결과가 굉장히 지금이랑 달라졌을 것 같아요. 그래서 저희가 최대한 파이썬을 사용하는 방향으로 방법을 찾았습니다. 
그러다 시도를 한 게 싸이썬이었어요. 아주 간단하게만 설명을 하자면, 갑자기 설명이 좀 어려운데 C랑 C++ 같은 걸 이용해서 파이썬을 퓨어파이썬으로 되어 있는 많은 영역을 C기반으로 쉽게 바인딩하도록 도와주는 라이브러리가 싸이썬이고요. 하나의 언어라고 생각을 하셔도 됩니다. 특정한 문법들이 존재를 하고 그게 파이썬과 크게 다르지는 않아요. 
그런데 한 가지 명확한 특징은 내가 개선하려고 하는 타입을 명확히 지정할 수 있어요. 그래서 타입추정에서 오는 오버헤드를 많이 낮췄습니다. 
그래서 싸이썬을 적용을 해봤고요. 기본적으로 파이썬 코드가 싸이썬에서 그대로 돌아가요. 아무것도 안 해도 돌아갑니다. 
그리고 아무것도 안 하고 싸이썬으로 돌리기만 해도 조금 빨라져요. 그래서 한 20% 정도 빨라지니까 이거 좀 될 것 같은데 싸이썬 한번 파볼까 해서 저희가 갑자기 싸이썬을 공부를 하기 시작했고요. 
그래서 핵심이 되는 로직, 정말 반복적으로 많이 실행되는 연산들을 싸이썬으로 옮겨오는 걸 먼저 시작했어요. 그리고 싸이썬으로 옮겼을 때도 저희가 원하는 만큼 성능이 올라오지 않는 것들은 저희가 직접 해당함수 하나만 C로 다시 짜서 C바인딩을 하거나 이런 식으로 파이썬의 형태를 최대한 유지하면서 어떻게 하면 부분적으로 성능을 올릴 수 있을까에 많이 집중을 했습니다. 
그래서 저희가 얻은 건 원래 10초에서 11초 걸리던 카드추천이 평균적으로 4초 정도로 많이 떨어졌고요. 인풋이 복잡하지 않은 카드들에 대해서는 굉장히 값들이 빨리 나오기 시작했어요. 
아마 이건 사용자가 꽤 적었기 때문에 가능했던 것 같아요. 그런데 어쨌든 저희가 원했던 한번 추천을 하는 데 10초, 11초가 걸리는 것보다는 한번 압도적으로 빨라지고 훨씬 운영비용이 낮아진 거였거든요. 
그래서 안정적인 서비스는 여전히 어려울 수는 있겠지만 그래도 이 정도면 서비스를 사람들한테 참을 만한 UX를 제공하고 참을 만한 혜택들을 주면 해볼만 하겠다는 판단을 저희가 할 수 있었습니다. 
그리고 다른 언어를 골랐을 때에 비해서 훨씬 더 빨리 정답을 얻을 수 있었던 것 같아요. 
그래서 이런 식으로 만들어진 서비스를 바탕으로 마케팅이라는 걸 시작을 했습니다. 원래는 부끄러워서 지인들한테도 말 안 하고 다녔거든요. 뭐하냐고 하면 그냥 프로그래밍 공부한다고 했는데 이제 홍보도 하고, 그리고 실제로 마케터 분들이 입사를 하시면서 키워드마케팅 같은 것도 시작을 했었습니다. 
그리고 이 마케팅을 통해서 아주 최초의 작은 매출들이 발생을 했고 저희가 가지고 있는 서비스 지표나 당시에 발생했던 매출들을 바탕으로 가능성을 믿어주고 첫 번째 투자를 유치할 수 있었습니다. 

그래서 2015년을 지금 돌이켜 보면서 제가 요약을 하고 싶었던 내용들은 이렇게 이 한 꼭지인 것 같아요. 
첫 번째로 저희가 당시에도 말씀드렸듯이 글로벌로 딕트를 해서 그걸 DB로 쓰는 게 안티패턴이라는 건 알고 있었고 더 좋은 방법은 대략 알고 있었습니다. 
즉 안정적이고 성능이 좋은 식으로 서비스를 만드는 방법들은 존재해요. 그리고 그걸 찾을 수 있어요. 혹은 다른 사람들에게 들을 수 있거나. 
그렇다고 해서 이게 쉽다는 건 아닌데 비교적 그 방식이 명확하다고 저희는 생각을 했어요. 왜냐하면 적어도 답은 있고 그 답대로 하는 게 굉장히 어려우니까. 
예를 들면 전교1등을 하는 방법은 되게 명확하잖아요. 시험에서 100점을 맞으면 돼요. 그런데 그게 굉장히 어려울 뿐이죠. 
그래서 저희는 이런 문제라고 느꼈는데, 반면에 사용자들이 쓰게 만드는 서비스, 어떻게 하면 카드추천을 많이 받을 수 있게 할까? 라는 문제는 누구한테 물어볼 수도 없었고 명확한 방식이 있지 않았어요. 
그래서 저희는 "아, 우리가 앞으로 헤쳐나가야 되는 문제들, 우리가 만드는 제품이라는 게 풀고자 하는 문제의 유형은 답이 없는 불확실성이 큰 문제들이구나."라는 것을 2015년을 통해서 많이 조직적으로 알게 된 것 같아요. 
그래서 결국은 우리가 앞으로 더 나아가기 위해서는 우리한테 필요한 전략은 더듬더듬 방향을 조정하면서 가려는 접근을 해야 되고 그렇다면 어떻게 하면 방향을 빨리 조정할 수 있을까? 어떻게 하면 우리가 잘못된 방향으로 갔을 때 "어, 그 방향 아니다!" 라는 피드백을 빨리 받을 수 있을까? 하는 게 앞으로 저희의 의사결정에 굉장히 큰 팩터로 작용했습니다. 

그래서 2016년으로 넘어와서 이제 카드추천 서비스는 만들었고 아직 불안정하지만 저희가 계속해서 실험을 해볼 수 있었어요. 
그런데 당연히 사람이 욕심이 끝이 없고 사람들이 들어왔을 때 어느 정도 매출이 나니까 더 많은 사람들이 카드추천을 받았으면 하는 거죠. 그러면 그런 방법이 뭐가 있을까를 고민을 해봤을 때 들어오는 사람들도 늘어야 되고요. 들어왔을 때 카드를 최종적으로 발급받는 사람들까지 많아야 돼요. 
그래서 양과 전환률 자체는 높이는 게 저희의 고민이었는데 당시에 약간 실리콘밸리에서 이 단어가 유행했어요. 파괴적 혁신. 그래서 저희도 한번 파괴적 혁신 아이디어가 뭘까를 고민을 해보다가 더 이상 카드를 찾지 말게 하자. 사람들이 카드를 찾지 않아도 카드를 추천할 수 있는 환경을 만들자, 우리가! 이런 식으로 갑자기 파괴적인 아이디어가 나왔습니다. 
그래서 사람들의 소비데이터를 바탕으로 항상 좋은 카드가 이미 계산되어있고 너는 고르면 돼, 이런 느낌의 아이디어가 있었어요. 
그래서 2016년에 뱅크샐러드 앱을 처음 만들어보게 됩니다. 당시에 고민했던 게 그러면 소비데이터가 있어야 카드혜택을 계산을 하는데 그걸 어떻게 얻지? 누가 입력을 할까? 이런 고민을 했던 거죠. 
그래서 당시에 이런 비슷한 게 없나 찾아보니까 구글플레이스토어에서는 굉장히 많은 가계부 서비스들이 있었어요. 그리고 그 가계부 서비스들이 사용자들이 매뉴얼하게 어떤 본인의 소비를 입력할 수도 있지만 당시에 날아오는 카드결제 승인문자 같은 걸 자동으로 기록해주는 형태가 많이 있었습니다. 
그래서 그러면 우리도 이거 만들자. 한번 만들어보자고 했고 IOS는 어떻게 하지 하는 이야기가 당연히 나왔는데 일단 나중에 생각하기로 했고. 
안드로이드로 만들어봤는데 잘 안 되면 뭐 어떻게 하냐, 왜 또 벌써 뽑냐, 이런 이야기들이 나왔습니다. 
그래서 잘 될지 안 될지 모르기 때문에 일단 안드로이드로 만드는 데 집중을 했어요. 그리고 앱도 정말 최소 스펙으로 만들어서 약 두 달간 후다닥 개발하고 출시까지 뭐 나름의 내부 테스트도 해보고 내부에서 사용하면서 조금씩  개선작업을 거치면서 3달 정도 걸렸어요. 
그래서 뭔가 문자를 읽어와서 나의 지출내역을 깔끔하고 뭔가 예쁘게 보여주는 앱을 만드는 데 성공을 했다고 판단을 했어요. 
그리고 지금 이 우측에 UI가 약간 그냥 평범한데, 평이한데 하실 수 있지만 당시에는 2015년이었고 2015년의 안드로이드에서 이 정도 UI 퀄리티면 정말 힙하다는 느낌이 있었거든요. 저희는 그렇게 생각을 했습니다. 
그런데 이 버전을 내고 알게 된 건 첫 번째로 앱을 정말 잘 사용하시는 얼리어답터 분들이 있었어요. 정말 헤비하게 쓰시는 분들이 있었는데 이분들은 저희를 통해서 카드를 추천받습니다. 그리고 그 카드를 실제로 쓰고 잘 사용하세요. 
그런데 또 이런 사람들이 정말 없다. 거의 없다는 걸 알게 됐습니다. 
그래서 왜 그럴까 생각을 해봤는데 저희가 애초부터 이 앱을 만들게 된 기획의도 자체가 더 많은 사람들이 카드추천을 받고자 했던 의도였어요. 그래서 카드를 추천하려고 만든 가계부 앱, 말 자체도 이상하지 않으세요? 
그런데 당시에는 저희가 워낙 여기에 매몰되어 있다 보니까 이게 이상한지 판단을 못했습니다. 
그래서 저희는 요새 이런 기획들을 공급자 중심의, 그러니까 사용자 중심이 아니라 공급자 중심의 욕심기획이라고 부르고 있어요. 
그래서 저희의 2016년 버전이 딱 이렇지 않았나 라는 걸 저희가 알게 됐습니다. 
그래서 저희가 판단을 하게 된 게 1.0이 정말 망하고 나서 카드추천은 일단 버리자. 우리 이거 너무 욕심인 것 같다고 판단을 했어요. 
그래서 뱅크샐러드 앱에 카드추천이라는 기능이 없는 시간이 꽤 길었습니다. 
그래서 카드추천이고 뭐고 생각하지 말고 일단은 가계부 앱으로 사람들이 정말 잘 쓰는 앱을 만들자. 거기서부터가 우리가 시작해야 되는 시작점인 것 같다고 판단을 했습니다. 
그래서 매해 겨울마다 반디앤루니스나 이런 서점들 가보시면 가계부가 굉장히 많거든요. 오프라인 가계부들 굉장히 많아요. 그래서 그것들도 막 저희가 보기 시작했고요. 
그다음에 다른 가계부 앱들은 어떻게 구성이 되어있는지 저희도 직접 써보면서 많은 가계부 앱들을 조사하는 데 집중을 했습니다. 
그리고 테크크런치나 이런, 지금은 꽤 많은 스타트업 매체들을 보면 너무 힙하고 멋있는 서비스들이 많아보여요. 그래서 이런 것들을 원천적으로 차단을 하고 어떻게 하면 정말로 좋은 가계부 서비스를 만들 수 있을까를 많이 파고들었고요. 
그래서 또 우연히 아는 분들을 통해서 정말로 가계부를 거의 전공한 듯한 가계부만 10년씩 써오신 분들이 있어요. 그래서 그분들을 만나서 "왜 선생님은 앱을 안 쓰십니까?" 하는 것부터 묻기 시작해서 이분들이 원하는 가계부가 뭔지를 직접 만나서 듣기 시작했고 이때 헤비유저 분들을 30명 정도 만났던 것 같아요. 
그래서 저희 UX디자이너들의 당시의 하루는 출근한다, 인터뷰장소로 간다, 인터뷰한다, 퇴근한다. 이거의 반복이었거든요. 
그래서 정말 많은 분들의 의견을 들을 수 있었고 감사하게도 시간을 내주셔서 기획의 핵심이 되는 아이디어들을 많이 주셨던 것 같아요. 
그래서 이런 사용자인터뷰와 버전1.0이 왜 망했는지에 대한 회고를 통해서 이번에도 똑같이 카드문자 기반으로 만들고 아예 새로운 앱을 만들자. 
기존 기획에 얽매이지 말자고 판단을 해서 당시에 2016년에 약간 힙하게 저희의 새로운 안드로이드 앱을 만들기 시작했고요. 물론  서버는 1.0 때 만들었던 파이썬 서버를 계속 유지보수 하면서 쓰기 시작했습니다. 
이것도 3, 4달 정도에 완료를 했고요. 저번 앱에 비해서 스펙이 늘어난 건 아닌데 한번 망하고 나니까 조금 많이 조심스러웠던 것 같아요. 그래서 중간중간 사용자들과 가계부 선생님들에게 버전을 보내드리면서 보시기에 어떤지 의견을 많이 구했던 것 같습니다. 
그래서 2016년에 다행히 약간은 해피엔딩으로 끝났던 것 같아요. 그래서 2016년에 한번 말아먹고 다시 내놓은 뱅크샐러드 앱이 꽤 괜찮은 지표의 앱이 되었습니다. 
그리고 처음부터 이렇게 냈던 건 아니고 내놓고 왜 다 나가는지에 대해서 다시 분석을 하다 보니까 점점 저희가 원하는 대로 나오기 시작했는데요. 

그래서 저희가 2016년을 거치면서 알게 됐던 건 일단 사용하면 꽤 많은 사용자가 계속 사용하는 서비스를 만드는 데까지는 왔구나라는 걸 알게 됐습니다. 
그리고 가계부를 만드는 걸 집중한 후에 카드추천을 붙여봤어요. 그랬을 때 어느 정도 예전에 비해서 많은 사용자들이 쓰고 있기 때문에 그 궁합이 그렇게 나쁘지 않고 사용자 입장에서 꽤나 직관적이며 가계부 사용자들이 원하는 가계부의 모습을 이제는 조금은 알겠다는 정도의 판단이 있었습니다. 

그래서 2017년에 저희가 또 욕심이 한 번 더 커져요. 그러면 우리가 가계부 사용자들이 어느 정도 만족하는 서비스는 만들었는데 더 많은 사람들이 가계부를 쓰면 어떨까? 혹은 그렇게 우리가 만들 수는 없을까? 를 고민을 하기 시작합니다. 
그래서 가계부를 사용하지 않는 사람들도 우리의 사용자로 만들 수 있는 전략이 있을까? 그게 있다면 뭘까? 를 고민하기 시작했어요. 
그래서 우선은 저희 앱이 지금 가지고 있는 한계들을 생각을 해봤는데 먼저 첫 번째로 카드내역만 보여줘요. 그래서 체크카드를 쓰는 분들은 효용을 많이 느끼지 못했고요. 
그래서 카드결제 문자 기반이 아니라 금융사 데이터를 우리가 직접 가지고 와서, 왜냐하면 대부분의 사람들이 은행계좌가 있고 카드를 쓰니까 그 데이터를 그냥 그대로 보여주면 좋을 텐데, 라는 아이디어를 가지고 있었어요. 
그래서 2017년의 상황을 이렇게 정리를 해보면 저희가 당시에 알고 있었던 거는 카드추천을 잘 하는 방법은 알고 있었고요. 비록 그게 5초가 걸릴지언정. 
그리고 괜찮은 가계부를 만드는 방법은 알고 있었습니다. 
그런데 저희가 모르는 건 사용자의 금융데이터를 누구한테 어떻게 받아서 어떻게 보여주지? 이걸 아주, 그러니까 기획적으로도 몰랐고요. 기술적으로도 저희가 몰랐어요. 
그래서 이걸 몰랐고 그거를 어떻게 하면 데이터를 불러오는 데 성공한 후에 데이터를 잘 보여주게 하지? 그리고 어떻게 하면 그걸 바탕으로 더 좋은 서비스를 만들지에 대해서는 저희가 아무것도 몰랐습니다. 
그래서 2017년에 저희가 세웠던 전략은 우리가 모르는 것들을 빨리  아는 데 집중하자. 저희가 모르는 불확실성을 빨리 제거하는 쪽으로 우리 개발전략을 세워야 된다고 판단을 해서 기존에 저희가 해왔던 앱에서 제공했던 기능들을 전부 다 배제하고 의도적으로. 그냥 새로운 필드에서 다시 만들기 시작을 했어요. 
뭐에 집중을 했냐 하면 우리가 모른다고 생각했던 금융사의 데이터를 가지고 오는 것에 되게 집중을 한 버전으로 앱을 만들기 시작했습니다. 어떻게 하면 금융사의 데이터를 가지고 와서 사용자에게 잘 보여줄 수 있지? 이 질문에 대한 답을 찾고 싶었어요. 
그래서 기존에 잘 운영하던 뱅크샐러드 앱의 서비스를 잠정적으로 중단을 하고 새로운 금융사의 데이터를 불러올 수 있는 앱을 만들기 시작했고 이건 SMS 문자를 기반으로 하지 않아도 되기 때문에 IOS 앱도 충분히 만들 수 있겠다고 생각을 해서 IOS 개발자분들을 찾다가 내부 인원을 IOS로 돌리기 시작하시기 바랍니다. 
"스위프트 관심 있으세요?" 이런 식으로. 
그래서 2017년에 저희가 가지고 있던 전략들은 이제 어느 정도 굵직굵직한 비즈니스 가설은 검증을 했으니 안정적인 확장과 서비스가능성을 고려해보자. 
그래서 저희가 2015년에 짰던 형태로 파이썬을 쓰지 않고 조금 더 안정적인 형태로 엔지니어링을 해보자고 판단을 했고요. 
당시에 저희 내부에 인터널한 마이크로서비스들이 많아지기 시작했어요. 그래서 한창 마이크로서비스 초기에 다양한 서비스들로부터 내부 API로부터 값을 받아오지 않아서 직접 접근을 한다던가 이런 식으로 안티패턴이 많이 늘어났기 때문에 내부API 호출을 잘 할 수 있는 프레임워크를 찾기 시작했고 그래서 그때부터 어씽크IO 기반의 서버를 써보기로 판단을 했습니다. 
그리고 내부에 DB 전문가가 없으니까 우리 데이터베이스를 유지보수하는 데 시간을 쓸 자원도 사람도 없기 때문에 최대한 문제가 안 일어날 수 있게 쓰자고 판단을 했습니다. 
그래서 그것도 몽고DB를 사용을 했고요. 

그래서 이제 저희가 만들기 시작했던 앱은 여러분이 지금 다운받으시는 그 뱅크샐러드 앱을 지금까지 만들고 있습니다. 
그래서 현재로 돌아와서요. 왜냐하면 저희가 이게 아직 한 단락이 안 끝났기 때문에, 얼마나 잘하고 있는지, 회고점들이 뭐가 있는지는 아직 정리가 안 됐어요. 
그래서 주요하게 생각했던 비즈니스 가설들을 실험을 하고 있다고 판단을 해주시면 좋을 것 같고요. 
그리고 어느 정도 금융 데이터를 불러와서 저희가 원하는, 사용자들이 들어왔을 때 꽤 많은 사용자들이 남는 서비스를 만드는 데 성공을 했으니 이걸 조금 더 넓은 도메인으로 넓혀서 정말 경제 인구들 모두가 돈관리라는 걸 하게 될 텐데 그때 돈관리에 쓸 수 있는 유용한 서비스를 만들자, 그 방향으로 나아가자는 판단 하에 이런 저런 실험들을 하고 있습니다. 

그래서 현재 뱅크샐러드의 서비스적인 내용은 그렇고요. 그러면 저희는 지금 어떤 구조로 구성이 되어 있냐. 
아까 저희가 왜 뱅크샐러드가 파이콘을 후원했냐는 항목에서 말씀드린 것처럼 지금 70% 이상의 코드가, 제가 급해서 깃허브 기준으로 파이썬 레포 몇 개 이런 식으로 따온 수치인데요. 
아마 실제로 돌아가고 있는 서비스를 기준으로 하면 이것보다 높을 수 있을 것 같아요. 그래서 70% 이상의 서비스 내지는 코드가 파이썬으로 작성이 되어 있고 주로 거의 대부분의 서버들을 다 파이썬으로 작성을 하고 있습니다. 그래서 그 범위는 단순하게 CRUD를 담당하는 서버부터 꽤 복잡한 것까지 파이썬에 위임하고 있는데요. 
이렇게 되면 그러면 나머지 30%는 왜 굳이 파이썬으로 안 했느냐가 궁금하실 수 있는데 그 외의 언어는 다 각자의 사정이 있어서 도입이 된 언어들이라서요. 
관련해서 예를 들면 카드추천 같은 경우에는 저희가 싸이썬을 썼음에도 한번 호출당 4에서 5초 정도의 한계를 넘을 수가 없었거든요. 
그렇다고 해서 저희가 거기서 더 C++로 작업하기에는 넉넉한 상황은 아니었어요. 너무 어려운 난이도였고 거기를 딥다이브할 수는 없어서 카드추천은 예를 들면 조금 더 적합하다고 생각하는 스칼라라는 언어로 다시 만들기도 하고 이런 과정들이 있다 보니까 다른 언어들도 중간중간 사용이 되었습니다. 
그래서 스칼라로 재개발한 내용은 작년 파이콘에서 제가 했던 발표를 참고하시면 조금 더 자세한 내용을 들을 수 있습니다. 

그리고 저희가 대부분의 로직을 파이썬으로 처리를 하고 대부분의 서버를 파이썬으로 만든다고 했는데 저희가 '심지어'라는 항목으로 뭐뭐를 가져왔냐 하면, 저희가 금융사와 데이터를 많이 받아요. 
그런데 금융사와의 통신하는 방식이, 아시는 분들도 많으시겠지만 Http 호출을 통해서 받아오는 방식이 아니라 소켓을 열고 전문통신이라고 하는, 픽스트 랭쓰 바이트라고 하더라고요. 영어로. 그래서 그런 바이트를 주고받는 방식으로 요청을 하고 받기도 하고 하는데요. 
이걸 대부분의 한국 금융회사가 자바로 처리를 하고 있어요. 그래서 한국에 이 전문통신을 잘 하도록 지원하는 라이브러리들이 자바 쪽에 생태계는 굉장히 많고요. 또 좀 유용하고 쉽게 쓸 수 있는 것들이 있는데 파이썬 생태계에는 아예 없었어요. 저희가 찾아봤을 때는. 
그래서 조금 더 저희가 전문통신을 앞으로 할 일도 많을 거고 점점 핀테크라는 생태계가 넓어짐에 따라서 이런 니즈들이 많이 생길 것 같은데 이걸 오픈소스로 만들자고 해서 레이니스트 깃허브에 들어가보시면 저희가 만든 게 있거든요. K포맷이라고. 
그래서 이걸 이용해서 저희가 내부적으로도 파이썬으로 전문통신을 쉽고 편하게 할 수 있도록 만들고 있습니다. 
그리고 심지어 최근에 론칭한 서비스에서 카드를 등록하고 결제하는 걸 출시를 했어요. 그래서 그 기능을 위한 카드결제서비스도 파이썬으로 개발을 했고요. 
이건 감사하게도 아이엠포트라는 서비스가 파이썬을 지원을 합니다. 그래서 조금 수월했고요. 
그리고 아직은 공개할 수 없는 비밀의 서비스도 "헐, 이것도 파이썬으로 했어?"라고 할만한 무언가가 있는데 이것도 100% 파이썬으로 했습니다. 
그래서 파이썬을 구석구석 많이 쓰려고 노력을 하고 있고요. 
그리고 저희가 굉장히 많은 도메인과 서비스들이 존재해요. 그래서 거대한 마이크로서비스 아키텍쳐로 운영이 되고 있는데 좋은 MSA 환경은 기능단위로 서비스가 잘게 나뉘고 그리고 그런 파편화에서 오는 운영의 어려움을 시스템적으로 커버할 수 있는 게 좋은 MSA를 할 수 있는 환경이라고 생각하는데요. 
새로운 서비스를 만드는 게 쉽지 않으면 결국 MSA를 하더라도 기존에 만들었던 서비스에 코드를 덧대는 방식으로 많이 운영을 하게 되더라고요. 
그래서 약간 오손도손 서버판 이런 모습이 되기도 해요. 
그래서 이렇게 되면 서비스가 많이 전반적으로 비대해지고 이걸 운영하고 유지보수하는 데에 비용이 굉장히 커집니다. 그래서 MSA를 적용하는 의미가 많이 퇴색되더라고요. 

또한 사람들이 늘어나고 도메인도 늘어나고 코드레퍼도 늘어나고 하다 보니 코드를 읽을 일이 매우 많아지고요. 그러다 보니까 유의미한 코드리뷰가 되지 않는 것을 발견하게 되었습니다. 
또한 파이썬의 특정 프레임이나 라이브러리를 잘 쓰는 분들의 노하우가 쉽게 공유가 효율적으로는 못한다는 걸 발견했어요. 이게 구전해서 되거나 아니면 문서 형태로 위키화 해서 꼭 읽어야만 전수되는 형태로 되다 보니까 과연 우리가 이런 노하우가 많은 분들의 노하우를 잘 활용하고 있는 건가 하는 생각이 들어서 파이썬 프로젝트 템플릿도 오픈소스로 운영하고 있는데요. 
사실 저희가 내부적으로 쓰고 있는 거를 그냥 공개하는 것에 불과해요. 그래서 PR이나 이슈 같은 거 보시면 그냥 저희 내부 대화들이 많은데 어쨌든 여러분도 사용하실 수 있게 공개가 되어 있고 공개한 지도 꽤 됐던 것 같습니다. 
그래서 쿠키커터라는 도구를 이용해서 제너럴하게 파이썬 프로젝트를 만들 때 쉽게 갖다 쓸 수 있는 게 있고요. 
그리고 저희가 특히나  자주 사용하고 있는 새닉이라는 것에 접목시킨 것도 운영을 하고 있습니다. 

그리고 이제 조금만 빠르게 진행을 하겠습니다. 그러면 뱅크샐러드는 앞으로도 계속 파이썬을 쓸 거냐? 저 개인의 의견이지만 앞으로도 계속 쓸 것 같아요. 
왜냐하면 여러 이유가 있겠지만 저희는 여전히 빠르게 성장 중인 조직이고 지금도 계속 저희 조직이 나아가는 방향, 그리고 가지고 있는 전략의 방향이 어떻게 하면 불확실한 걸 빨리  배울까, 학습에 포커스가 맞춰져 있어요. 그래서 이 체제를 유지하는 한 파이썬이라는 거는 굉장히 매력적인 언어가 될 것이고 저희가 일하는 방식 자체도 저희가 인원이 120명 정도 되는데 그 안에서도 5명에서 10명 단위의 작은 팀들을 이루어서 작은 스타트업들이 뱅크샐러드라는 하나의 울타리 안에서 업무를 진행하기 때문에 결국은 2015년에 제가 고민를 했던 내용들의 고민을 다시 각각의 작은 그룹들이 고민을 하고 그러면 파이썬이 적합하지 않을까 합니다. 
그래서 시간이 조금 부족해서 더 많은 정보를 볼 수 있는 것을 정리를 해놨어요. 
그래서 내일 있을 다른 세션을 들으시는 것도 방법이고 그리고 저희가 콘샐러드라는 사내 세미나를 공개적으로 운영하고 있거든요. 유튜브에 있으니까 조금 더 자세한 내용을 보실 수도 있습니다. 
그리고 당연한 이야기지만 앞서 언급한 것보다 훨씬 더 정보는 여기에 들어오시면 됩니다. 그래서 이렇게 많은 직군의 분들을 뽑고 있으니 저희에게도 관심가져주시면 감사하겠습니다. 
그러면 긴 발표 들어주셔서 감사드립니다. 감사합니다. 
(박수)

-(사회자) 다시 한 번 발표해주신 발표자분께 박수 한번 부탁드립니다. 
시간이 종료되어서 혹시 질문이 있으시면 발표자 분께 개인적으로 질문을 해주시기 바라고요. 
지금부터 쉬는 시간을 갖도록 하겠습니다. 감사합니다. 