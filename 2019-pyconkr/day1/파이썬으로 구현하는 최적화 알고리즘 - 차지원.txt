https://youtu.be/795qp7wuI1k

@차지원 님 강연 내용@
-안녕하세요? 이번 시간에는 차지원 님께서 파이썬으로 구현하는 최적화 알고리즘 최적화 환경 구축 길잡이라는 제목으로 25분간 발표해주시겠습니다. 그럼 큰 박수 부탁드리겠습니다.
-안녕하세요? 발표 맡은 차지원입니다. 오늘 발표 내용은 파이썬으로 최적화 알고리즘 구현하는 데 있어서 환경 구축이 큰 어려움이 될 수 있습니다. 도움이 되고자 발표를 준비했습니다. 간단하게 최적화에 대해서 먼저 이야기해야 할 것 같습니다. 최적화란 말 굉장히 많이 사용하는 단어인데 기업들이 본인들이 한정된 자본으로 최대한의 수익을 올릴 수 있는 전략을 결정하는 데 많이 사용합니다. 저는 고려대학교 대학원에서 최적화기법을 연구하고 있는 차지원입니다.
오늘 이야기는 제가 연구실에서 배웠던 것들이 있는데 이런 대학원생으로서 최적화를 구현하고 연구하던 내용들을 적응하는 데 많은 어려움이 있었는데 오픈소스를 쌓아야 한다든지 이런 점에서 어려움이 있었는데 그런 시행착오를 발표자료에 녹여내고자 노력했습니다. 전력망을 어떻게 구현하는지 요약해놓았습니다. 발표구성은 다음과 같고요. 오늘 발표의 가장 최적화된 분들은 이분들이 아닐까 싶어요. 알고리즘을 어느 정도 알고 계시고 자바, 뎁스 다뤄본 분들이 파이썬을 통해서 구현하는 데 관심이 있거나 최적화 알고리즘에 성공했는데 오픈소스를 쓰고자 하는 분에게 도움이 될 것 같습니다. 아니더라도 발표 잘 들어주시면 감사하겠습니다. 먼저 간단하게 짚고 넘어가자면요.
기법도 많고 모형도 다양한데요. 저희가 이런 모든 것들을 다루기에는 시간이 부족하고 2차식 계획법에 집중했습니다. 최적화 되게 어렵다고 생각하는데 한 번쯤 겪어봤을 거예요. 이런 예제 보신 적 있나요? 내가 어떻게 몇 개의 제품을 생산해야 최대의 이익을 얻을지 풀어봤을 겁니다. 먼저 목적함수 그리고 제약식 이렇게 두 가지 크게 구분할 수 있는데요. 목적함수란 내가 현재 상황에서 최적화하고 싶은 가장 핵심 대상 비용 최소화, 수익의 최대화를 목표하고 있고 미니마이즈만 표현하고 있지만 맥시마이즈 두 가지 구성이 가능합니다.
제약함수란 지금 현재 상황에서 제가 가지고 있는 제약적인 조건들을 모두 이루고 있습니다. 현실적으로 봤을 때 내가 쓸 수 있는 대상이나 반드시 써야 하는 자재의 수량, 이런 것들이 다 수식으로 표현되면 그게 제약함수가 되고 제약함수를 구성할 때는 등식으로 구현하거나 부등호를 쓸 수 있습니다.
마지막으로 각 식을 구성하고 있는 변수, 계수, 상수들이 있겠는데요. 이런 변수들이 정수가 될 수 있고 바이너리가 될 수 있고요. 말씀드렸던 세 가지 구성요소를 말씀드린 이유가 최적화 문제는 여러분이 어떻게 문제를 유형하는지에 따라서 접근해야 하는 방법이 달라지기 때문입니다. 지금 표에서 나타나는 것처럼 변수가 정수화돼야 하는지 문제 유형이 달라지고 유형에 따라서 구축해야 할 게 달라집니다. 유형을 난이도 순대로 랭킹을 매겼는데 가장 쉬운 형태의 최적화는 LP입니다. 1차식으로 다 나타나는 간단한 구조를 가지고 있습니다.
점점 뭔가 추가되고 묶일 수록 어려워지고 오픈소스를 구현한다면 LP가 제일 좋아요. 오픈 소스에서는 제공하지 않는 경우도 있습니다. 따라서 여러분이 문제를 구성할 때는 LP냐 아니면 비선형으로 가냐 트레이드 오픈을 해야 합니다. 현실에서 많은 게 비선형이다 보니까 이런 문제가 와닿고 비선형문제를 선형화하는 데는 수학적인 테크닉이 필요합니다. 몇 가지간단한 최적화에 대한 백그라운드를 돌아봤고 이제 본격적인 파이썬 환경 구성을 보겠습니다. 여러분이 컴퓨터에서 파이썬으로 최적화를 구현하려면 크게 세 가지 가 필요합니다.
제가 최적화 라이브러리를 뎁스 다양하게 돌아봤는데 그중에서 파이썬이 다루기 좋은 이유는 외부 호환성이나 데이터 다루기 좋은 여러 가지 보조적인 서브파티가 있기 때문에 파이썬이 라이브러리 구성에 있어서 재미있었습니다. 그다음으로는 모델링 라이브러리를 통해서 솔버와 파이썬을 통해서 유저가 소통하는데요. 앞에서 살펴본 복잡한 수식을 코드로 바꿔주는 건 모델링 라이브러리입니다. 실제 수식을 개선하는 부분은 솔버라는 엔진이 있는데 이 엔진들은 C나 C 내장함수로 구현돼 있어요. 대부분 솔버들은 빠른 솔버일수록 비싼 값을 주고 쓰고요. 만약에 여러분이 모델링 라이브러리를 쓰지 않는다면 각각의 솔버가 API를 지원하는지 봐야 합니다. 그리고 여러분이 마찬가지로 적합한 솔버를 구현한다면.
왼쪽에 있는 수식을 코드화하는 거라고 말씀드렸습니다. 상황에 맞게 선택해서 쓸 수 있는데요. 쿼드라틱 프로그램을 다루는 B가 있다. 각각 호출하는 것에 따라 선택할 수 있기 때문에 코드의 재사용성이나 유지보수 측면에서 강점이 있습니다. 먼저 구현이 가장 중요하겠죠. 여러분이 실제 수식을 코드화하는 데 좀 더 편리한 라이브러리가 좋은 라이브러리일 겁니다. 괄호 안에는 해당 모델링 구현 방법을 대표적으로 지원하는 모델링 라이브러리들입니다. 이제 복잡한 내용들이 나오는데요. 안전벨트 잘 매시고요. 왼쪽에 보면 수식들이 나오죠. 목적함수의 경우에는 CX의 형태로 추천할 수 있습니다. 계수들을 뽑아서 C로, 변수 X를 뽑아서 XR 매트릭스를 만들고  마찬가지로 아래에 있는 제약식들은 노란색으로 표현된 것처럼 부등식의 경우에는 GXH의 형태로 뽑아내야 합니다. 이렇게 뽑아낸 형태를 코드를 바꿀 때는 왼쪽과 같이 바로 삽입이 가능합니다. C의 경우에는 매트릭스 2, 1, A의 경우는 1, 1 이렇게 정의가 됐는데 보고 있는 건 모델링 라이브러리를 사용했습니다. 쿼드라틱 프로그램의 경우에는 제곱식이 들어가기 때문에 조금 더 복잡합니다. X1의 제곱, X2의 제곱. 4, 2가 되고 1차식은 P와 Q, 2차식과 1차식이 추출되고 아래 제약식은 마찬가지로 구현했습니다. 마찬가지로 CVXOPT로 모델링하면 이렇게 됩니다. 반드시 다이아몬드로 구성하게 되는 키포인트가 있고 나머지는 동일합니다. 이런 매트릭스 형태가 굉장히 직관으로 이해하기 어렵습니다. 왼쪽의 수식도 모르는 채 매트릭스만 보면 어떤 내용인지 이해하기 어렵고요. 많은 좋은 모델링 라이브러리는 심볼릭 형태를 제공합니다. 왼쪽을 좀 더 직관적으로 여기 보시는 것처럼 X1과 X2는 10, 각각 심볼릭하게 넣어줄 수 있고 에러가 났을 때 어떤 제약식에서 문제가 났는지 제약식마다 이름을 지어줄 수 있습니다. 단점이라면 오픈소스 라이브러리는 LP만 지원하다 보니까 심볼릭을 지원하면 쿼드라틱도 지원하는 건 드뭅니다. 사전에 캐치하지 않고 인터넷 속도가 좋더라고 라이브러리를 쓰면 시행착오를 저처럼 겪을 수 있습니다. 또 다른 오픈소스 라이브러리인데 CVXPY로 구현한 프로그램입니다. 앞서 살펴봤던 것과 다르게 심볼릭으로 구현 가능합니다. 심볼릭 둘 중 하나 선택한다면 저는 초심자의 경우 심볼릭을 추천합니다. 유지 보수가 편리하고 직관적으로 이해할 수 있기 때문에 개발 난이도도 낮습니다. 문제가 커지면 메모리 관리에 문제가 생길 수 있습니다. 이게 정말 큰 최적화 문제의 경우에는 억 개까지도 가는데요. 문제 구성 단계에서 메모리가 부족할 수 있습니다. 그렇게 되면 부득이하게 여러분은 매트릭스를 쓰셔야겠죠. 
여러분이 이제 솔버와의 호환성 부분을 설명 드릴 텐데요. 저는 저의 실사용 리뷰를 통해서 간단하게 정리를 해드리자면 여러분이 쓰시는 솔버가 사업용이다, 정말 훌륭한 솔버를 쓰고 싶다면 해당 솔버가 제공하는 인터페이스가 있어요. 그걸 쓰는 게 가장 좋은 방법입니다. 하지만 여러분이 여의치 않게 오픈소스를 써야 한다면 저의 리뷰가 참고된 표를 참고하면 좋겠습니다. 왼쪽 6개가 실제 써봤던 거고 매트릭스와 심볼릭 지원 여부, 쿼드라틱을 지원하는지 어떤 솔버를 지원하는지 정해놨습니다. 
정말 잘 모르겠다면 저는 CVXOPT를 추천합니다. 
최적 전략이 달라져 버리면 큰 문제지 않습니까? 어떤 식에 관련된 솔버를 쓰는 게 중요하고 최적화 문제 내가 풀고 싶은 쿼드라틱 프로그램을 지원하는지 봐야 합니다. 정말 다양한 소프트웨어 라이센스가 있지만 강조하고 싶은 건 GNU GPL입니다. 최적화 분야에 있어서는 많은 소프트웨어들이 GNU GPL을 쓰고 싶습니다. 기업에 있고 오픈되지 않기를 원한다면 이 프로그램을 피하는 게 좋겠습니다. 최근에는 완화된 LGPL 형태로 나오게 됐는데요. 위키피디아에 검색하면 솔버들이 다양하게 있어요. 왼쪽에 프로그램 유형별로 쓸 수 있는 솔버가 정리돼 있는데 제가 실제로 써봤던 그리고 흔히 말하는 좋은 솔버라는 걸 체크해봤을 때 제 주관적인 의견을 담아 다음과 같이 정리했습니다. 제가 밑줄친 이유가 많은 스텝 오버플로우나 GPL 써라고 하는데 GNU GPL이라서 기업에서 쓰기에는 어려움이 있습니다. 대안적인 오픈소스를 추천드리면 CLP CBC 가볍기 때문에 쓰기 좋고 OSQP는 ADMM을 쓰려면 이쪽입니다. 상업용 소프트웨어는 다음과 같이 있습니다. 여러분 상황이 만약에 예산 제한 없이  실용성이 중요하다면 씨플렉스가 좋습니다. 인더스트리 스탠다드라고 해서 너의 솔버는 C플렉스 썼냐, 내가 졌다 하는 경우도 있거든요. 중요한 프로젝트는 씨플렉스가 좋습니다. 학생의 경우에 구로비를 추천드립니다. 아카데믹 지원 정책이 강력해서 1년씩 무제한으로 쓸 수 있습니다. 미래를 길게 보고 준비한다면 또는 스타트업은 오픈소스를 써야겠죠. 외부에 배포할 일이 없으면 GLPK도 좋습니다. 실제 제가 구현한 간단한 최적화 예시들을 보여드릴 텐데요. 예시도 전력 시장을 중심으로 설명드리겠습니다. 니콜라 테슬라 님인데 너무 잘 만들어서 여러분이 쓰고 있는  총 수요랑 발전량은 양이 매치가 돼야 합니다. 만약에 2개의 양이 언밸런스하게 되면 주파수 불안정 때문에 큰 문제가 있죠. 그래서 현업에서는 각 발전기의 최적 발전량을 결정하는 최적화 문제를 매일 풀고 있습니다. 간단한 예시로 3개의 발전기를 예시로 공급하는 예시를 만들었고 내가 가지고 있는 발전기의 설비 상황을 먼저  봐야겠죠. 제약식으로 들어갈 겁니다. 그다음에 내가 생산하는 전체 발전량이 공급하고 싶은 수요량과 같아야 할 겁니다. 목적함수에는 비용 최소화, 같은 전기를 공급한다면 좀 더 전기를 싸게 공급하는 게 좋겠죠. 왼쪽부터 발전비용을 넣었고 전체 비용을 최소화하는 게 저희의 목적이 될 겁니다. 그리고 저희의 제약 상황을 정리해보면 발전량은 최대 용량보다 발전량이 무리가 되고 최소 용량을 지켜줘야 하고 수급은 말씀드린 바와 같습니다. 예시는 발전량을 P0부터 P2까지 정리했고 값이 다 양수이기 때문에 논네거티브 툴을 넣었습니다. 발전기마다  가지고 있는 게 있는데 CVIP 같은 경우는 제약식을 리스트 형태로 받을 수 있기 때문이 하나하나 심볼릭으로 넣었습니다. 보시는 것처럼 P0은 500 이상 1000 이하여야 한다고 돼 있고 수급제약은 CP 썸 형태로 목표 수요량과 비교했고 목적함수는 발전단가를 곱해서 더했고 보시는 것처럼 하나하나 추가하게 되면 변수가 수십만 개 그리고 정말 많아질 경우 일일이 세기 어려울 겁니다. 리스트에 곱의 형태로 간단하게 제약식을 적습니다. 실제 제가 OSQP라는 솔버를 통해서 문제를 풀어보면 다음과 같습니다. P값이 사이에 나와 있고 달성하고 싶었던 1400메가와트를 충족시키고 있습니다. 같은 문제를 제가 말씀드렸던 것처럼 솔버만 바꿔서 풀어봤는데요. 보시는 것처럼 왼쪽에 있는 2개의 솔버는 같은 결과를 내놨지만 오른쪽의 2개 솔버는 미묘하게 값이 다릅니다. 발전기 3개 짜리 문제임에도 불구하고 더 커지면 간극이 커진다. 현실에서 비용은 단가로 나오지 않고 2차 곡선으로 나오게 됩니다. 심화예제로 쿼드라틱 프로그램을 구현해보자면 목적함수를 왼쪽과 같이 간단하게 구현했던 LP를 오른쪽의 형태로  제곱식을 추가해주게 됩니다. 그렇게 되면 발전기의 발전량에 변화가 있는 것도 확인할 수 있습니다. 정말 이렇게 간단한 문제들이면 내가 손으로 풀 수 있겠다 생각할 수 있고 대학원에서는 손으로 푸는 것도 공부합니다. 현실에서는 변수가 많고 다뤘던 간단한 LP 형태가 아니라 비상업적인 것도 다뤄야 해서 어려운 문제가 있습니다. 다음과 같은 참고자료를 사용했고 저희가 간단했지만 간단한 예시지만 올려놨으니 참고하면 좋겠습니다. 이상입니다. 감사합니다. 
-발표해주신 차지원 님 감사합니다. 지금부터 질의응답 시간을 가지겠습니다. 가운데 마련된 스탠딩 마이크 앞으로 질문해주시면 됩니다. 원활한 질의응답을 위해서 질문은 한두 개만 말해주시기 바랍니다. 질문하실 때 질문하시면 책이 4권 정도 있으니까 질문 많이  부탁드리겠습니다. 
-정말 간단한 질문인데요. 차이가 커지면 어떤 솔버를 사용하는지 상황에 따라서 어떤 솔버가 채택되는지. 
-상황에 따라서 어떤 솔버를 쓴지 결정하는 방법 말씀하는 거죠? 제가 참고자료로 넣었던 리포트 같은 경우는 어떤 솔버가 실용성이 좋은지 벤치마킹을 참고하면 좋고 실제로 자기들이 썼을 때 추천해주는데 그런 내용도 참고하면 좋겠습니다. 
-판단 기준이. 
-판단 기준이 최적화 문제를 풀 때 수학적 내용이지만 설명드리겠습니다. 2개의 대상 결과가 차이가 적을수록 좋은 결과라고 이야기하는데 솔버에 따라서 듀얼리티 갭이 조금씩 달라요. 
-발전기랑 수요 늘어날수록 혹시 지금 문제를 실제로 푸실 때 
-물론 제약식을 어떻게 선형하는지에 따라서 다른데요. 전체 하루 전에 24시간에 대해서 인지하고 이때는 굉장히 간략화된 LP 형태로 문제를 풀게 됩니다. 저희 연구실 기준으로는 30분 이상 소요가 되거든요. 