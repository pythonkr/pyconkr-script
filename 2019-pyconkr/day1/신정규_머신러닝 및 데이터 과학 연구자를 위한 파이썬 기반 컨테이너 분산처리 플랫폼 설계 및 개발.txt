           <PYCON KOREA 2019>
[머신러닝 및 데이터 과학 연구자를 위한                  파이썬 기반 
컨테이너 분산처리 플랫폼 설계 및 개발]

    *** 4시 40분에 시작합니다 :) ***

-시작해보겠습니다. 아이고, 힘들어. 
안녕하세요? 오늘 발표를 하게 된 신정규입니다. 우와~ (웃음)(박수) 
네! 오늘 발표를 하게 될 내용은 제가 처음 파이콘에서 발표를 했던 4년 전의 내용과 제목이 거의 같습니다. 
제목은 '머신러닝 및 데이터 과학 연구자를 위한 파이썬 기반 컨테이너 분산처리 플랫폼 설계 및 개발'인데요. 
4년 전과 마찬가지로 여기에 삽질이라고 들어갑니다. 

그래서 오늘 소개드릴 내용은 2015년도에 이런 걸 만들어봐야지 했던 애들이 도대체 그 사이에 어떤 일을 했고 무엇을 만들었느냐 등등에 대해서 리뷰를 쭉 할 거예요. 
사실은 이걸 테마를 하나씩 잡고 발표자료를 자세히 만들려고 했었는데 만들다 보니까 너무 슬프더라고요. 
뒤에 내용을 보시면 아, 저래서 슬펐겠구나 하고 생각하실 수 있을 겁니다. 
그래서 슬픈 내용들을 빼고 비교적 가볍게 가지만 여러분들이 왜 슬펐는지 알기 위해서 참조할 수 있는 것들을 같이 제공해드리는 식으로 가려고 합니다. 
그래서 그동안의 소회도 같이 다룰 예정이에요. 
저희 입장에서는 4년만에 일종의 하나의 챕터를 끝내는 느낌인데요. 그러니까 2챕터의 시작을 하기 위해서 1챕터의 마무리를 짓는 식으로 시작을 했습니다. 

4년 전에 무슨 일이 있었냐 하면 저랑 제 학부 동기랑 오픈소스 수업을 하면서 만난 다른 분이랑 세 명이서 발표를 했어요. 연구자 및 교육자를 위한 계산 및 분석 플랫폼 설계라는 거를 2014년 4월부터 열심히 프로토타이핑을 해서 2015년 8월에 "야, 파이콘이라는 데가 있다더라. 발표를 하러 가보자." 해서 당시 프로토타입을 가지고 발표제안서를 내고 발표를 했습니다. 
당시에 발표자료는 여기에 올라와 있습니다. 

거기 내용 중에 세 번째 페이지가 이런 내용인데 세 명 다 학교에서 석박사를 하고 마친 사람들이다 보니까 학계가 변하는 속도가 사회나 기술이 변하는 속도를 전혀 따라가지 못한다는 느낌을 받았어요. 
그래서 학계는 도제 시스템으로 돌아가는데 기술 그 자체는 21세기의 속도로 가고 있다. 이렇게 가다가는 결국 인간은 노예가 되지 않겠는가? 기계의 노예가 되기 전에 기계의 속도를 인간이 따라잡을 수 있는 보조장치를 만들어보자, 이런 느낌으로 인간이 관여하는 분야의 발전속도가 다른 것에 비해서 느려지기 때문에 그 속도를 올려보자는 생각을 해서 뭔가 사람이 하는 잡일들을 자동화하는 연구에 관한 일들을 자동화하는 걸 만들자고 했습니다. 
그래서 뭔가 훈민정음, 한글창제 하는 마음으로 열심히 했죠. 그런데 큰 차이점이 있다면 세종대왕님은 400년 가는 멋진 한글을 만들어서 저희에게 넘겨주셨지만 저희는 뒤에 발표를 들으시면 아시겠지만 4년 동안  뭔가 손대면 톡 하고 터질 것만 같은 코드베이스를 만들어냈습니다. 
(웃음) 
그래서 이 목표를 이루기 위해서 코드들이 돌아가는 환경을 표준화 하고 대규모 코드로 확장을 해서 돌릴 수 있게 해서 논문을 쓴 사람들도 결국 그 논문을 구현한 다른 사람들이 돈을 버는 대신 논문을 쓴 사람이 쉽게 스케일업이 되어서 쉽게 돈을 벌 수 있는 구조를 만들어보자. 
그래서 논문을 뒤집으면 곰국인데 곰이 되어서 재주만 부리지 말고 논문을 쓰는 사람도 돈을 벌 수 있는 플랫폼이 되게 만들어보자고 생각을 했어요. 
그래서 리프로듀서빌리티라는 것을 핵심에 놓고 그게 가능한 프로그램을 만들어보자. 컴퓨터 파워가 많이 필요한 건 빅데이터, 딥러닝을 잘 지원하게 만들어보자. 
그래서 논문용 코드를 실제 서비스까지 확장할 수 있게 하는 클라우드 샌드박스 서비스를 만들어보자는 게 그 당시의 주제였습니다. 
주로 내 잘못도 있지만 파이썬이나 라이브러리의 잘못 때문에 슬픈 이야기가 주를 이뤘었죠. 

그래서 천릿길도 한걸음부터 이렇게 써놨었는데 4년이 지나고 나니까 이게 정말 천 리였다는 걸 알게 됐어요. (웃음) 
천 리만 가면 괜찮은 것 같습니다. 
그래서 발표는 저희가 잘 끝냈습니다. 파이콘에서는 보기 힘들게 발표자 두 명이 주거니받거니 하면서 슬픈 이야기를 한 다음에 "야, 이제 우리가 컨테이너 기반의 고밀도 분산처리 플랫폼이랑 사용자 편의기능 구현에 대해서 프로토타입을 발표를 했으니까 나머지는 6개월이면 어떻게 되지 않겠냐?"라고 이야기를 하면서 맛있는 중국집에서 오리고기를 먹었죠. 
그래서 프로토타입도 만들었으니까 다 만든 것 같은 느낌이었던 거예요. 
시작이 반이라는 이야기도 있잖아요. 시작을 했으니까 반쯤 이룬 것 같은 기분이었던 거죠. 
그리고 사실 보면 프로토타입이 제일 세잖아요. 알고 계신가요? 그게 안 센 경우는 아이언맨밖에 없어요. 나머지는 다 프로토타입이 제일 셉니다. 
사실 아이언맨도 잘 보시면 맨 처음 동굴에서 만든 프로토타입은 성능이 별로인데 바로 다음에 만든 건 금으로 만들었잖아요. 
어쨌든 그래서 제일 좋은 거 만들었으니까 이제 자잘한 일만 해결하면 되겠지 하고 생각을 했었죠. 그런데 몰랐죠. 

어느새 시간이 흘렀어요. 그래서 4, 년, 후가 되었습니다. (웃음) 
그래서 이제 오늘 이야기거리에 대해서 이야기를 할 텐데 권불10주. 이게 다 사자성어입니다. 권력이 10주를 가지 않는다는 거죠. 
이런 식으로 지어봤어요. 원래 제가 학교에서 배웠던 의미와 지금 생각하는 의미가 달라진 단어들인데 여기에 대해서 어떻게 달라졌는지를 설명을 하려고 합니다. 
이건 만들던 중에 저희끼리 주고받았던 거고요. 
들어가기 전에 겉으로 보이는 몇 가지만 간단하게 말씀드리면 이 프로그램 이름은 소르나였고 지금은 백앤드AI라고 부릅니다. 구글에서 지어줬어요. 
그리고 2016년 말에 오픈소스화를 했습니다. 그래서 지금은 오픈소스로 되어서 버전이 6개가 나온 상태예요. 그리고 상도 몇 개 받았고 롱텀소프트 버전도 드디어 나왔습니다. 19.03인데 롱텀이 저희 생각에는 1년인데요. (웃음) 
하지만 1년이면 굉장히 오래 지원해준다고 할 수 있죠. 
여기서 머신러닝하는 분들이 쓰시는 거는 18주 기준으로 일어나거든요. 그러니까 52주, 길지 않습니까? 거의 3배에 달하는 길이니까요. 
짜잔 했는데요. 이게 나중에 끝날 때쯤에는 짠 하고 보이실 겁니다. 

시작을 해봅시다. 그 이후에 알게 됐고, 혹은 변했기 때문에 알게 된 첫 번째는 권불10주입니다. 이 바닥은 10주가 사이클이에요. 석 달씩 가는 게 없습니다. 뭐든지 빠른 세상이었어요. 
우선 하드웨어는 2년마다 리프레싱이 되고 드라이버가 바뀝니다. 새로짜야 되죠. 
그리고 파이썬도 4년이라고 했었잖아요. 이게 파이콘 다섯 번째 발표인데 파이썬도 되게 빨리 바뀌어요. 제가 3.4로 시작했는데 지금 3.8 나오고 있잖아요. 
그런데 우분투도 LTS 있고, 도커 엔진만 해도 6개월마다 바뀌거든요. 
그런데 뭐 적응만 되는 거 같으면 새버전이 나오는데 이거는 또 6주마다 새버전이 나옵니다. 그래서 다다음주면 또 베타가 나오고 그다음 주면 RC1이 나옵니다. 
그리고 되게 재미있는 로고들이 있죠. 이런 게 잔뜩 박혀있고 디프리케이트라고 해서 앞에 사라질 명령어라고 태그가 붙어있는 건 버전이 세 번 올라가면 사라지거든요. 그러니까 18주 후에 사라지는 함수들이 막 존재합니다. 
그래서 여러분이 재작년 코드를 깃허브에서 받으시면 작년 걸로는 안 돌아갈 거고 올해 초 거를 1.14에서 돌리면 많은 코드들은 안 돌아갑니다. 

용어를 먼저 설명을 할게요. 제가 말을 하다 보니까 느끼는 건데 갑자기 파이썬 나오고 도커 나오니까 무슨 이야기인지 간단하게 설명을 해보겠습니다. 
용어가 어렵지는 않아요. 첫 번째로 배워야 될 건 베어입니다. 곰! 이죠. 
참고로 제 예전 별명이 곰이었는데 그래서 저희 가족이 곰돌이가족이라고 합니다. 저랑 은진 씨 둘 다 공돌이었기 때문에 곰이었다가 곰돌이가 됐고요. 
얘는 메탈베어입니다. 얘는 베어메탈입니다. 
여러분이 집에 가서 여러분이 가지고 계시는 PC나 아니면 전산실에 들어가면 있는 이런 애들을 베어메탈이라고 불러요. 또는 베어메탈 서버라고 하죠. 
그리고 이런 애들을 왕창 모아놓은 걸 클러스터라고 합니다. 
하지만, 하지만은 아니지만. 저는 물리학과 출신이기 때문에 추상화를 되게 좋아해요. 그래서 추상화를 하면 이렇게 보였던 걸 이렇게 바꿔보겠습니다. 똑같이 보이죠. 
베어메탈이고요. 클러스터는 이렇게 그릴 수 있을 겁니다. 
그런데 클러스터 안에 들어가 있는 이 베어메탈 컴퓨터들이 그대로 사용되는 경우는 요새는 별로 없습니다. 그래서 가상머신이라는 걸 얹어요. 
그러면 이런 식으로 돌아가고 이 가상머신들은 별도로 운영체제들을 가지고 별도의 컴퓨터처럼 돌아갑니다. 안에 있는 애들은 밖에서 무슨 일이 일어났는지 몰라요. 자기가 가상세계에 있다는 것도 모릅니다. 
완벽하게 격리된 환경을 제공하고 있고 하드웨어 레벨에서도 이런 것을 제공해주고 있기 때문에 속도도 굉장히 빨라진 상태죠. 
그리고 안에서는 독립된 운영체제들이 돌아갑니다. 
그러니까 베어메탈에 어떤 운영체제가 깔려있는지에 상관없이 어떤 것은 우분투로 돌아갈 수도 있고 하죠. 
이런 애들을 모아서 클러스터를 만들고 왕창 만들어서 노는 시간, 또는 놀지 않는 시간에라도 돈을 받고 서비스를 해주는 애들을 보통 클라우드라고 부릅니다. 
그래서 여러분들이 돈을 많이 내면 대디케이티드라는 이런 하나만 들어간 서버를 주고 그렇지 않으면 이런 것을 하나씩 받게 되죠. 
그런데 최근 한 5년 동안  시대가 많이 바뀌었습니다. 원래 컨셉으로만 있었던 반가상화 기술이 굉장히 많이 발전을 했거든요. 여기 계신 분들도 대부분 들어보셨을 컨테이너 기술입니다. 
이 기술의 역사는 굉장히 오래됐는데 대중화는 6년 정도 된 것 같아요. 

그래서 베어메탈에 OS를 설치하고 컨테이너레이어를 하나를 깔아서 이 위에서 실행되는 애들은 서로  자기가 진짜 머신에서 돌고 있다고 생각하는데, 그리고 진짜 그런 겁니다. 그런데 이 컨테이너 레이어에서 일종의 앨리어스를 제공해줘서 가상화를 이루는 거예요. 
그러니까 나는 PID 1, 2, 3번으로 돌고 있다는 건데 이 레이어를 통해서 얘는 뭐 10001번부터 10003번까지 이런 식으로 실제로는 이 OS상에서 돌아가지만 컨테이너라는 단위에서는 별도의 환경에서 돌아가고 있다고 착각하도록 만드는 기술입니다. 
그리고 실제로 클라우드 상에서 서비스가 될 때는 컨테이너가 들어간 VM환경의 여러 개 위에 베어메탈을 얹어서 서비스를 하죠. 
그래서 쉐어드 같은 경우에는 이런 식이고 대디케이티드는 베어메탈에서 그대로 운영체제를 하나 빼고 컨테이너를 올리는 식입니다. 

그래서 컨테이너는 커널을 제외한 부분들을 격리하는데 그 격리는 컨테이너 레이어를 통해서 이루어지고요. 
가장 초반에 나왔던 건 LXC고요. 그 기반으로 나온 다양한 솔루션들이 있었습니다. 도커라거나. 그러다가 컨테이너에 관련된 기술들을 공유하는 파운데이션이 생기고 runC라는 표준을 하나 만들게 됩니다. 
그래서 이렇게 반가상화된 환경에서 이제 컨트롤그룹이라는 걸 사용을 해서 리눅스에서는 컨테이너를 구현을 합니다. 

그래서 현재의 클라우드는 대충 이런 식으로 생겼어요. 클라우드 위에 베어메탈들이 잔뜩 들어있고 그 위에 VM이 들어있어서 이거를 그대로 제공해주는 경우, 이걸 보통 인스턴스라고 부르죠. 
또는 컨테이너를 이렇게 왕창 얹어서 서비스하기도 합니다. 또는 그냥 머신에 서비스하기도 하죠. 

이렇게 복잡해지게 되면 이런 VM를 띄우는 것 자체도 복잡해지기 때문에 이런 VM이나 스토리지를 생성하고 삭제하고 배치하는 역할을 하는 리클라우드매니저가 있습니다. 여러분이 아는 오픈소스는 오픈스택 같은 것들이 있죠. 
그리고 이런 것들을 묶어서 있는데요. 이런 VM들을 만들고 지우고 하는 인프라 스트럭처를 자유롭게 만드는 애들을 이아스라고 합니다. 
그리고 이런 애들이 제공이 된 상태에서 컨테이너를 만들거나 삭제하는 것도 복잡하기 때문에 그런 것도 자동화를 하거나 삭제하고 배치하고 업그레이드하는 걸 자동화해주는 여러 도구들이 있는데 그런 것들을 보통 컨테이너 오케스트레이터라고 합니다. 

자, 용어설명 다 됐습니다. 이제부터는 이 용어들에 대해서 설명 다시 안 할거예요. 시작해보겠습니다. 
10주마다 바뀐다고 했는데 여러분들이 많이 아는 것들부터 보죠. 2019년도는 아마 루틀리스 컨테이너가 대세가 될 걸로 보입니다. 기존에 도커를 쓰고 있는데 도커 기술이 갖는 가장 큰 문제점은 루트 권한을 요구한다는 거였어요. 
그래서 그걸 악용해서 온갖 종류의 해킹이 가능했습니다. 그래서 계속 패치들이 올라오죠. 컨테이너를 띄우는 애가 루트라서 가능한 몇 가지 트릭들이 있어서 마음만 먹으면 서버를 죽이는 게 어렵지 않습니다. 
생각만으로 해보면 진짜로 돼요. 
그렇기 때문에 작년부터 사실 제안을 했지만 올해 떠오르고 있는 애들이 이런 애들입니다. 
그다음에 이런 컨테이너 솔루션 자체도 저희가 시작했을 때는 구글보그라는 게 처음 나왔는데 이게 요즘  있죠. 여기에 일단 저희도 끼워넣었습니다. 
그래서 이렇게 솔루션이 있고 계속 나오고 있어요. 도커가 있는데 왜 계속 나오냐 하면 도커는 생각보다 불안정한 프로그램입니다. 
그래서 여러분이 우분투를 쓴다면 LXD 기반의 가상환경을 접하게 될 거고요. 
그다음에 판맨 같은 경우는 IBM이랑 레드햇이 밀고있습니다. 

그다음에 2015년부터 4년 사이의 큰 변화는 마이크로서비스가 늘었다는 겁니다. 어플리케이션을 작은 단위로 쪼개고 통신 프로토콜을 잘 정리해서 시스템 자체를 더 플루이드하게 만드는 거예요. 이런 경우에 버전업도 빨리 할 수 있고 지속적 통합도 할 수 있죠. 
그리고 또 기반 언어들도 계속 바꿀 수 있습니다. 마이크로서비스는 각 모듈들의 언어가 통일될 필요는 없거든요. 모듈마다 다 달라도 되니까요. 
그래서 계속 언어도 바뀌고 프로토콜도 다양하게 등장하게 유명해지고 보급되게 되죠. 

그다음에 또 큰 변화는 비동기가 있습니다. 2015년도만 해도 파이썬에서의 비동기는 그렇게 널리 쓰이지 않았었고 노드 쓰는 사람들은 프로미스가 빨리 보급되길 제발제발 하던 시대였고요. 콜백 지옥을 벗어하기 위해서. 
io를 기다린다는 측면에서는 시스템을 이렇게 안정적으로 설계를 할 수가 없게 되어서 굉장히 많은 비동기 io기반의 서비스들이 늘어나게 되고 언어레벨에서도 지원을 합니다. 
여러분이 아는 대부분의 언어들은 비동기IO를 지원을 해요. 
그리고 그렇지 않은 것들은 라이브러리 형태로 지원을 하고 있죠. 

이제부터 그러면 고생 얘기를 해봅시다. 저희가 미리 알았으면 이거 안 하고 다른 걸 했을 것 같습니다. 
몰랐기 때문에 이 일을 시작을 했는데요. 2015년도 슬라이드 그림을 하나 가져와볼게요. 설계를 했어요. 우와! 이거만 있으면 만들 수 있을 것 같았습니다. 
그래서 인터페이스는 뭐 장고의 폴리머 붙이고 일렉트로 위에 얹고 파이썬 3.3 얹고 아래는 아마존 쓰면 되지 않겠느냐! 
기존설계를 했죠. 여기부터 조금  복잡해졌는데 매니저가 전체를 관리하게 되고 에이전트라고 해서 VM이나 아니면 베어메탈에 설치된 그 컴퓨터를 관리하는 애들을 이 매니저가 관리를 하게 되고요. 
그다음에 그 에이전트들은 자기가 또 관리하는 다양한 종류의 워크로드들이 있겠죠. 파이썬도 있고 여러 가지가 있을 겁니다. 
그래서 우리 클라이언트들은 매니저한테 뭔가 리퀘스트를 보내면 매니저가 잡을 분배를 해주는 거죠. 그리고 설치된 것들이 너무나 차이가 많이 날 수가 있기 때문에, 예를 들면 구글클라우드에 설치된 거 하나, 아마존 웹서비스에 설치된 거 하나 이런 식으로 그걸 나누기 위한 스케일링그룹이라는 개념이 들어갔습니다. 

그리고 이걸 복잡하게 설계를 하기 시작하면 이런 걸 해야겠다고 롤을 나눴죠. 2016년에. 그래서 클라이언트들은 해보니까 저희는 파이썬만 지원하면 될 줄 알았는데 자바 사용자가 엄청나게 많았어요. 
그래서 클라이언트를 자바로 만들고 그러고 나서 인텔리J 쓰는 사람들이 야, 인텔리J 지원해야지 왜 파이썬 기반인데 파이참을 기반 안 하냐고 하는데 파이참은 자바로 써져 있습니다. (웃음) 
어쩌라는 거지? 생각을 하다가 결국 자바SDK로 만들게 되고 뭐 그런 거죠, 다. 
그런 식으로 SDK 막 만들고 이제 통신을 하게 만들고요. 이 매니저라는 애는 사용자 관리도 해야 되고 통계관리도 해야 되고 업그레이드 관리도 해야 되니까 여러 종류의 데이터베이스나 키밸류 스토리지를 사용을 하고요. 
그리고 통신을 해서 명령을 내리면 얘가 알아서 잘 보완처리도 하고 컨테이너별로 자원도 절약해주고. 
그다음에 어떤 애가 스토리지가 필요하다고 하면 그걸 동적으로 붙여주는 역할도 하고 이 스토리지는 인터페이스를 만들어서 다양한 프로토콜을 지원하는 아답터를 만드는 식으로 지원을 했습니다. 
예를 들면 삼바도 있을 수 있고 NFS도 있을 수 있고 하니까요. 뭐가 들어올지 모르는 거죠. 
사실 저희가 처음 개발할 때만 해도 이런 고민을 안 해도 돼요. 스택이 정해져있고 우리가 정하면 되니까요. 
그런데 이 모든 고민은 오픈소스를 하기 시작하면서 시작됐습니다. 
어디에 깔릴지 모르는 거예요. 저희는 기본적으로 우분투만 사람들이 쓸 거라고 생각했는데 되게 많은 사람들은 샌텀OS를 쓰고 있었어요. 그런 것처럼. 
어쨌든 여기까지 설계를 하고, 2016년도니까 이걸 만들면 되겠지 하고 신이 났어요. (웃음) 
예! 이제 만들면 되겠다! 

그리고 이제부터 여기에 일거리산이 쌓입니다. 
자, 2015년도에 저희가 만들기 시작했다고 했잖아요. 2015년 8월만 해도 저희가 딥러닝에 관심이 있었지만 당연히 카페를 지원하는 걸 생각을 했습니다. 
그런데 머신러닝을 하려면 카페랑 티아모를 지원해주면 되지. 그리고 속도가 필요하니까 줄리아도 돌려주자. 그리고 매트랩사용자들은 비싸니까 옥타브로 돌려주고. 리패스트도 돌려주고. 바이올로지컬 뉴런 모델링 하는 사람들을 위해서 뉴런도 돌려주고, 이거만 되면 준비는 완벽해! 이렇게 생각했어요. 
그런데 이게 8월이라고 말씀을 드렸잖아요. 그런데 12월이 됐더니 탠서플로우가 나왔어요. (웃음)  
그런데 이게 한번에 짜잔 하고 잘 나왔으면 모르는데 GPU 지원이 된다고 하고 열어보니 나중에 계속 뭔가 추가가 되는 거예요. 
그런데 문제는 이 구현체가 버전마다 다 다릅니다. 그래서 저희는 처음에는 탠서플로우를 매번 패치를 했어요. 저희가 원하는 방식으로 돌아가게 만들려고. 
그런데 이것도 빌드체인이 맨날 바뀌는 겁니다. 
그런데 어쨌든 엔비디아 GPU를 컨테이너에 붙이는 것부터 시작했는데 엔비디아도커를 사용하게 됐죠. 
이게 어떤 일이 생기냐 하면 블리딩엣지라고 해서 가면 안 되는 곳이 있거든요. 그런데 저희가 항상 거기서 뭔가를 하다 보니까 엔비디아도커도 커미터가 되고 비동기IO라고 했잖아요. 그거는 메인테이너가 되어버렸어요. 그런 식으로 되는 거예요. 
게다가 이 텐서플로우는 수동으로 패치했다고 했는데 하위호환성을 별로 생각을 안 합니다. 너무나 빨리 생태계가 변하고 있기 때문에 1.3에서 1.4 올라갈 때는 호환성 깨지고 또 깨지고 1.10에서 올라갈 때도 깨지고. 
이게 단순히 사용자 코드가 바뀌는 게 아니라 빌드체인이 계속 바뀌어요. 
그리고 엔비디아도커도 계속 바뀝니다. 왜냐하면 도커도 계속 바뀌거든요. 
그러니까 버전2가 나왔는데 버전2는 runC 기반이고 쿠다도 우리가 8일 때 시작했는데 9, 10, 10.1이 나왔는데. 여러분, 상식적으로 10.1하고 10은 호환되어야 하는 거 아닙니까? (웃음) 
더 웃긴 건 쿠다 10.1이랑 쿠다 10.1업데이트1이랑 호환성이 깨집니다. 
그런데 또 도커는 엔비디아도커 없이도 엔비디아를 잘 지원을 해요. 
그런데 문제는 저희는 하위호환을 해야 하는거죠. 
그런데 이제 파이토치도 나오더라고요. 2017년 1월에 나왔는데 사람들이 엄청나게 좋아하는 거예요. 
얘는 다행히 처음에는 GPU를 처음에는 지원을 안 했어요. 
그런데 골치아픈 게 모든 명령어 줄이 GPU에서 나온 결과를 CPU를 통해서 메모리를 다시 한 번 복사를 합니다. 그래서 여러분들이 프로그래밍 할 때는 되게 편하잖아요. 프린트로 찍어볼 수 있으니까. 
그런데 구현하는 입장에서는 그렇기 때문에 사람들이 파이썬 패키지랑 파이토치 패키지를 막 섞어서 써요. 탠서플로우는 그런 게 좀 적었거든요. 호환이 안 되니까. 
그래서 이걸 다시 호환하는 게 굉장히 큰 문제가 됐습니다. 
여기는 오늘 생략하겠지만 예를 들면 CPU가 되게 많은 머신에서 예를 들어서 CPU가 52개인 머신에서 4개만 할당을 하면 도커한테는 4개를 할당했는데 안에서 사용하는 다른 라이브러리들은 밖에 있는 CPU개수를 52개로 읽어가는 거예요. 
그러면 "야, 나는 이거 2개로 쓰레드 하면 되겠네." 해서 4개 할당한 곳에 104개를 띄우는 문제들이 생기는 거죠. 
그래서 결국 나중에 저희가 오버로딩을 했는데요. 그래서 그다음에는 파이토치도 크게 안 달라요. 버전마다 구현체가 다릅니다. 

자, 여기까지는 이제 전초전이었고요. 저희가 4년 동안  뭐했는지에 대한. 하지만 시간이 얼마 안 남았으니까 속도를 점점 내보겠습니다. 
이제 병렬화 문제가 있습니다. 실제로 해보니까 GPU가 놀아요, 여러분. 내가 아무리 GPU 코딩을 잘한다고 해도 여러분이 그걸 50% 이상 쓰려면 꽤 공부를 많이 해야 합니다. 헬로월드 찍으면 2%도 안 돌아요. 
그래서 모델병렬화를 하든 데이터병렬화를  하든 해야 되는데 그게 싱글로드에 멀치GPU나 그런 경우에는 탠서플로우가 자체적으로 지원해주는 데이터세팅이 있기 때문에 그런 것에 맞춰서 스토리지쪽에서의 캐시레이어를 새로만들어주거나 해야 합니다. 
특히 저희가 만드는 오픈소스는 어디 깔릴지 알 수가 없으니까요. 

또 여기는 또 너무 앞서 가서 문제인데 다른 것도 있죠. 연구분야 사람들이 이렇게 라이브러리 바꾸는 거 잘 안 좋아합니다. 이번에 파이썬이 3로 넘어갈 때 걸린 시간을 생각해보면 되는데. 
그러니까 우리는 지금 파이썬3를 개발하고 있는데 파이썬2 기반도 지원해야 하고 심지어 탠서플로우에 어떤 툴은 최근까지도 파이썬2에서만 돌아갔어요. 
이제 저희가 돌려주는 워크로드들이 파이썬2도 있고 3도 있고 없는 애들도 있잖아요. 
그런 애들에 대해서 파이썬 버전이 다 다른 문제들이 생겼습니다. 그래서 컨테이너 안에서 돌아가는 애의 통계를 뽑든 실행을 하든 통신이 필요한데 그래서 인터페이스를 만드는 게 큰 해결과제가 되었습니다. 
그래서 처음에는 제로MQ기반으로 만들자. 그래서 제로MQ로 만약에 옥타브컨테이너라고 하면 옥타브로 받아줄 수 있는 걸 만들었어요. 
그래서 지원언어가 15개를 넘어가는 순간 이건 아니라는 생각이 들었습니다. (웃음) 

예를 들면 이건 옥타브의 일부이고 얘는 하스켈이에요. 비슷해보이나요? 다른 툴이잖아요. 
하다가 도저히 못하겠다는 걸 알게 됐습니다. (웃음) 
이건 아닌 것 같았어요. 
그래서 커널 언어라는 걸 구현하게 되고 얘는 파이썬 컨테이너를 밖에서 만들어서 컨테이너가 생성되는 시점에서 이미지 두 개를 슈퍼포즈하는 식으로 돌아가는 애예요. 
그래서 얘가 우분투인지 어떤 건지만 생각을 해주면 되는 식으로 구현을 했습니다. 문제는 이제 이렇게 하면 장점은 백앤드AI의 에이전트 자체는 파이썬3.0으로 가도 되고 안에서 뭐가 되든 상관이 없는 거예요. 
왜냐하면 항상 파이썬구현체가 컨테이너 안에 두 개가 있는 거니까요. 

그래서 언어마다 이렇게 개별구현 하다가 주피터 기반은 주피터 기반의 커널스펙만 하면 되는 걸로 바뀌었죠. 
그런데 이것조차도 문제가 생기는 게 리미트를 항상 구현시켜줘야 하는 거예요. 그래서 인베디드하는 식으로 통째로 압축해서 구현을 했어야 했습니다. 정확히 업그레이드죠. 그래서 지금은 훨씬 더 간단하게 하게 됐고요. 

제가 말이 빠르고 설명이 점점 없어지는 이유는 10분이 남았기 때문입니다. 그래서 이런 곳에서 확인해보실 수 있고요. 하다 보니까 심장이 터질 것 같지만 여러분, 심장은 터지지 않습니다. 다 할 수 있습니다, 하면. (웃음) 

그리고 마지막으로 눈 찍는 게 굉장히 어렵다는 걸 알게 됐고요. 
저희가 그래프를 언어별로 지원을 해줘야 되니까 라이브러리들이 있으면 좋은데 그게 쓸데없는 게 많아서 자체적으로 짰어야 했습니다. 
즉 인증이 구현된 걸 만들어야 했기 때문에요. 

하다 보니까 네트워크 안 되는 데 깔아달라는 데들이 생각했어요. 보안이 중요한 곳에. 그래서 PIP 로컬로 설치하려고 했더니 PIP 자체가 네트워크 하는 거 알고 계셨어요? 
그래서 이런 것들을 설치하는 빌더를 만드는 과정을 또 거쳐야했습니다. 인스톨러 안에서 프리셋을 만들고 이런 패키지를 만들기 위한 패키저가 있고 이 패키지를 만들기 위해서 사용하는 빌더라는 애가 있는 거죠. 
그리고 이렇게 만들어진 걸 에이전트가 10개, 20개가 될 수도 있잖아요. 그래서 결국 배포자동화를 해야 하니까요. 
예를 들어서 오프라인 환경에 20개 깔아줘, 하면 어떻게 하겠어요? 

그리고 문서화가 있는데 아까 사용하는 언어가 많아지다 보니까 다양한 언어에 대한 셋들이 생기는데 이게 파이썬은 잘 되는데 다른 언어들은 안 되는 경우가 있습니다. 
특히 자바를 신경을 많이 썼는데 이거는 업데이트가 하도 안 돼서 요즘은 잘 안 돌아가요. 그래서 별도 문서화를 하도록 해야 했었죠. 

그리고 마지막으로 고민했었던 눈에 해당하는 것은 사실 코드가 아니죠. 문서화나 GUI나 오프라인 빌드 같은 거는 본체랑은 상관이 없는 일이잖아요. 배포에 대한 거지. 그게 더 어렵더라고요. 
하나 더 알게 된 건 이건 비교적 최근이에요. 올해 알게 된 거예요. 5년차가 되어서야. 
저희는 이런 인터페이스를 가지고 있어요. 이렇게 쭉 치면 됩니다. CPU 한 개... 뭐 이런 식으로 치면 업로드해서 돌아가고 이런 식으로 굉장히 상세합니다. 
완벽하다! 완전 최고다! 라고 생각하고 있었는데 사람들이 GUI가 필요하다는 거예요. 
저희는 대부분 연구자들이었기 때문에 GUI를 써본 적이 없거든요. 그래서 설치도 다양하게 되었는데 왜 필요하냐고 이야기하는데 예전에는 그렇죠, 하다가 결국 "아니, 그래서 있어요? 없어요?" 라는 사용자를 만나게 된 거죠. 
그래서 GUI를 만나게 되었습니다. 2019년 2월부터 열심히 했는데 시간이 없으니까 빨리 넘어가겠습니다. 
웹컴포넌트를 썼고요. 웹은 따로 구현하기가 힘드니까 그대로 써보자. 그런데 문제는 웹은 크롬에서 안 돌아갈 수도 있잖아요. 인터넷익스플로러11로 하면 어떻게 하죠? 

그래서 코어설계를 이렇게 하고... 그리고 시스템이 엄청 규모가 큰 데는 장고 기반으로 만들고요. 

그다음에 이거를 이제 대규모로 웹상에서 서빙을 하기 위해서는 컨트롤서버라는 파이썬 구현체를 만들었고요. 점점 빨라져야겠네요. 그다음에 이런 식으로 파이썬서버를 제공하고 있고, 그다음에 이게 실제로 계산하는클러스터가 바로 노출되는 걸 막기 위해서 매니저프록시를 구현을 했습니다. 이 매니저프록시가 콘솔 서버 안에 구현이 되어 있고요. 
그다음에 안에서 실행되는 프로그램들을 프록싱하기 위한 것도 있습니다. 앱에서는 이게 앱 안에 들어있고 웹에서는 별도의 서비스로 돌아갑니다. 그래서 대충 이런 GUI를 만들고 이런 식으로 눌러서 실행버튼을 누르면 실행이 됩니다. 
그리고 이건 등록된 노드들을 보여주는 거고요. 
그다음에 이제 허브 같은 경우는 전체 클러스트가 두자리수를 훨씬 넘어가는 경우를 위해서 만든 버전입니다. 

이렇게 했더니 이제 고가용성이 필요하대요. 왜 매니저가 세 벌씩 존재하지 않냐는 거죠. 그래서 여러 모드가 있어야 돼서 대장을 정해주고 그다음에 실제로 앱을 실행할 때 서비스하기 위한 프록시터널링을 만드는데 기존에는 사용자 컴퓨터 쪽에 다 있었는데 여기에 뭐 깔기가 싫다. 웹에서 돌아가게 해줘, 해서 이런 외부 어댑터를 별도로 만드는 과정도 안 거치게 하기 위해서 임의의 프록시를 만들었습니다. 그래서 터널링을 설계를 하고 실제 동작을 구현한 다음에... 
제가 이걸 40분에 발표하려고 했다니, 미쳤던 것 같습니다. (웃음) 
그래서 클라우드와 폐쇄망에서 다른 구현체를 가지고 있고요. 

자, 다행히 시간 맞출 수 있으니까 걱정하지 맙시다. 이렇게 쌓아놨어요. 일거리산이라고 말씀드렸잖아요. 그래서 6개월이면 될 것 같다고 생각을 했었죠, 처음에. (웃음) 
그런데 해보니까 그렇게 4년이 흘렀습니다. 
그래서 이제 이 첫 번째 페이지 1이 끝나는 시기에 온 것 같아요. 
(웃음) 
네, 그렇습니다... 

그래서 홍익인간으로 GPU가상화 부분이 있는데 이건 그냥 빨리 넘어가도록 할게요. 중요하지 않으니까 넘어가겠습니다. 

그래서 이걸 통해서 재미있는 거 발견한 건 있어요. 멀쩡한 GPU를 하나를 가상화해서 4개로 만들어서 싱글코드를 4개로 만들어서 하나로 돌리면 후자가 더 빠릅니다. 웃기죠? 왜냐하면 여러분의 코드는 GPU를 갈굴만큼 잘 짜여져 있지 않기 때문에 나눠서 멀티로 돌리는 게 싱글로 돌리는 것보다 더 빠릅니다. 
그리고 GPU가 어떤 것에 붙어있는지도 중요하고요. 

그래서 오늘 이야기한 건 이런 내용이고요. 이바닥은 10주마다 바뀌더라. 문제를 해결해봐야 해결이 안 된다는 거. 눈찍는 게 중요하다. 그리고 우리가 고생했던 거 남들이 하게 하지 말자. 
이렇게 정리했는데, 이게 통곡의 벽이죠. 아까 앞에서는 짜잔했는데 이제 짠해보이지 않으십니까? (웃음) 

그래서 여기 있는 이런 유니콘, 목표는 이런 유니콘이었겠죠. 모든 회사들이 그렇겠지. 그런데 이런 게 되지 않기 위해서 열심히 노력하고 있는 중입니다. 

마지막으로 저희가 컨트리뷰톤을 하고 있는데 이 링크로 들어오시면 참여하실 수가 있어서 25일까지 참여를 받고 9월에 여러분이 저희와 함께할 수 있을 겁니다. 
여기까지 들어주셔서 감사합니다. 
(박수)
언젠가 3시간짜리 세션을 한 번 더 해보는 걸로 하겠습니다. (웃음) 

-(사회자) 다시 한 번 발표해주신 발표자 분께 박수 한번 부탁드리겠습니다. 
(박수)
발표는 시간은 종료가 돼서 혹시나 질문사항이 있으시면 발표자 분께 개인적으로 질문 부탁드리고요. 
103호 지금 바로 라이트닝토크 진행될 예정입니다. 그래서 라이트닝토크에 참여하실 분들은 바로 이 자리에 있어주시면 되겠습니다. 감사합니다. 