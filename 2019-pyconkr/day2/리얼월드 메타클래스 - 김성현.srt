1
00:00:01,080 --> 00:00:03,300
안녕하세요 리얼월드 메타클래스

2
00:00:03,300 --> 00:00:06,830
라는 제목으로 발표하게 된 김성현 이라고 합니다

3
00:00:06,830 --> 00:00:13,980
간단하게 제 소개를 하고 넘어 저는 지금 마이뮤직테이스트

4
00:00:13,980 --> 00:00:16,470
나는 회사에서 백엔드개발 하고 있고

5
00:00:16,470 --> 00:00:18,090
저는 이제 펜션에서 타입힌트

6
00:00:18,090 --> 00:00:21,110
레이싱카 열흘 즐겨 사용하는 유저입니다

7
00:00:21,110 --> 00:00:22,670
그리고 항상 저는

8
00:00:22,670 --> 00:00:24,250
클린코드를 만드려고 노력하고 있는

9
00:00:24,250 --> 00:00:27,470
개발자 중에 한 명입니다

10
00:00:27,470 --> 00:00:30,780
일단 오늘 발표할 주제는 다음과 같습니다

11
00:00:30,780 --> 00:00:33,690
일단 메타클래스 가 무엇인지 알아보고

12
00:00:33,690 --> 00:00:36,700
파이썬에서 구체적으로 무슨 역할을 하고

13
00:00:36,700 --> 00:00:38,510
어떻게 활용할 수 있으며

14
00:00:38,510 --> 00:00:42,530
이미 어떻게 화정동 있는지 알아 볼 것입니다

15
00:00:42,530 --> 00:00:44,360
참고로 이 내용은 정리되어있고

16
00:00:44,360 --> 00:00:47,380
블로그 포스트 그다음에

17
00:00:47,380 --> 00:00:52,830
소스 코드는 깃허브로 통해 곰이 되고 있습니다

18
00:00:52,830 --> 00:00:56,780
일단 제가 이 발표 지드래곤 이유를 말씀드리자면

19
00:00:56,780 --> 00:01:00,130
많은 사람들이 메타클래스 라는 곳에 존재 자체가 모르거나

20
00:01:00,130 --> 00:01:01,900
또는 이름은 들어봤는데

21
00:01:01,900 --> 00:01:03,780
몰라 무서워 등등을 생각하면서

22
00:01:03,780 --> 00:01:06,520
잘 모르시는 분들도 많을 거라고 생각합니다

23
00:01:06,520 --> 00:01:09,600
그 전에는 그런 분들을 위해 메타클래스 란 무엇인지

24
00:01:09,600 --> 00:01:15,030
그리고 왜 필요한지 부터 시작해 보도록 하겠습니다

25
00:01:15,030 --> 00:01:17,220
일단 클래스를 알아보기 위해서는

26
00:01:17,220 --> 00:01:21,500
파이썬 핵심이 데이터모델에 대해서 알아 봐야 합니다

27
00:01:21,500 --> 00:01:24,450
파이썬에서 모든 것은 데이터를 최상원

28
00:01:24,450 --> 00:01:27,490
객체로 이루어져 있습니다

29
00:01:27,490 --> 00:01:33,390
캡처로 이루어졌다면 환자는 어떤 방식으로 취소할까요

30
00:01:33,390 --> 00:01:36,230
파이썬은 데이터를 아이덴티티와 가

31
00:01:36,230 --> 00:01:38,430
그리고 타입이라는 세 가지 요소를 안넣기로

32
00:01:38,430 --> 00:01:42,480
초상화 시킵니다

33
00:01:42,480 --> 00:01:45,730
아이덴티티란 객체의 수명 동안 유일하고

34
00:01:45,730 --> 00:01:47,650
불편함이 보장되는 정수이며

35
00:01:47,650 --> 00:01:50,500
아이리 함수를 통해 얻을 수 있는 값입니다

36
00:01:50,500 --> 00:01:52,040
사실상 메모리에서의 2

37
00:01:52,040 --> 00:01:57,780
파이썬 객체 주소를 되면 같이 기도합니다

38
00:01:57,780 --> 00:02:01,170
그리고 값은 말 그대로 객차가 가지는 값으로

39
00:02:01,170 --> 00:02:03,170
객체의 타입에 따라 불편할 수도 있고 가

40
00:02:03,170 --> 00:02:06,680
변할 수도 있습니다

41
00:02:06,680 --> 00:02:08,220
그리고 마지막으로 타입은

42
00:02:08,220 --> 00:02:10,250
객체가 지원한 연산들을 정리하고

43
00:02:10,250 --> 00:02:12,350
예를 들어 길이를 갖고 있나 등

44
00:02:12,350 --> 00:02:15,510
그 타입의 개체들이 가질 수 있는 가능한 값들을 정리하면서

45
00:02:15,510 --> 00:02:19,680
객체의 특성을 정리합니다 이 객체 타입은 타입

46
00:02:19,680 --> 00:02:21,250
한솔 통해 얻을 수 있으며

47
00:02:21,250 --> 00:02:25,600
객체 A 타입은 보통 불편합니다

48
00:02:25,600 --> 00:02:27,200
메타 클래스를 알아보기 위해서는

49
00:02:27,200 --> 00:02:31,740
우리는 이 객체의 3가지 요소 중 타입이라 한번에 집중해야합니다

50
00:02:31,740 --> 00:02:34,640
8시에는 수많은 별들 있습니다

51
00:02:34,640 --> 00:02:36,550
인트 스트링 플롯

52
00:02:36,550 --> 00:02:39,230
컴플렉스 불리언 런타임

53
00:02:39,230 --> 00:02:44,740
일립시스 이밖에도 타입들이 파이썬에서 존재합니다

54
00:02:44,740 --> 00:02:48,640
그리고 파이썬에 기본적인 촬영을 가지는 객체들은 내장타입

55
00:02:48,640 --> 00:02:51,680
의하여 정리됩니다

56
00:02:51,680 --> 00:02:55,090
하지만 우리는 파이썬 프로그램 안 되면서

57
00:02:55,090 --> 00:02:58,350
대부분의 경우에는 이 기본적으로 제공하는 타입들이

58
00:02:58,350 --> 00:02:59,920
우리가 만드는 프로그램의 비즈니스

59
00:02:59,920 --> 00:03:02,250
로직을 초상화에는 부족하기 때문에

60
00:03:02,250 --> 00:03:05,800
우리는 보통 새로운 타입 저녁입니다

61
00:03:05,800 --> 00:03:07,440
바로 우리가 흔히 사용하는 클래스라는

62
00:03:07,440 --> 00:03:12,630
키워드를 사용해서 말이죠

63
00:03:12,630 --> 00:03:16,060
우리는 클래스로 클래스 를 통해 정리한 타입으로

64
00:03:16,060 --> 00:03:18,280
새로운 객체를 정의할 수 있습니다

65
00:03:18,280 --> 00:03:19,490
간단히 말하자면

66
00:03:19,490 --> 00:03:21,220
파이썬에서 모든 개체들은

67
00:03:21,220 --> 00:03:26,160
어떤 타입의 의사일정이 된다는 뜻이죠

68
00:03:26,160 --> 00:03:29,290
그런데 이게 메타클래스 도대체 무슨 상관이 있을까요

69
00:03:29,290 --> 00:03:31,430
맨 처음에 파일의 모든 것들은

70
00:03:31,430 --> 00:03:35,960
객체로 이루어졌다고 말한 것을 기억하실겁니다

71
00:03:35,960 --> 00:03:37,250
모든 것이 개체로 이루어져있다

72
00:03:37,250 --> 00:03:38,210
모든 것

73
00:03:38,210 --> 00:03:42,550
모든 것이 라면 어떤 것까지 대체로 말하는 것일까요

74
00:03:42,550 --> 00:03:45,840
파이썬 데이터 오늘 운세는 다음과 같이 적혀 있습니다

75
00:03:45,840 --> 00:03:49,270
폰노이만의 프로그램 내장식 컴퓨터 모델을 따르고

76
00:03:49,270 --> 00:03:50,940
또 그 관점에서 코드

77
00:03:50,940 --> 00:03:55,620
역시 개체로 표현됩니다 라고 적혀 있습니다

78
00:03:55,620 --> 00:03:57,920
코드 염색체 코드가 괴롭혔는데

79
00:03:57,920 --> 00:04:02,040
아니 언뜻 보면 이해가 잘 가지 않는 문제입니다

80
00:04:02,040 --> 00:04:04,730
하지만 이 말은 그렇게 어려운 것이 아닙니다

81
00:04:04,730 --> 00:04:09,850
우리가 짠 코드들은 변수 그리고 함수 그리고 클래스로 이어졌습니다

82
00:04:09,850 --> 00:04:15,940
함수 클래스 등 폰을 이런 모든 요소들이 바로 교체했습니다

83
00:04:15,940 --> 00:04:19,040
방금 보시면서 이해가 잘 안 되시는 분들 계실겁니다

84
00:04:19,040 --> 00:04:21,900
함수가 일급객체란 사실은 많은 파이썬

85
00:04:21,900 --> 00:04:25,780
파이썬 가이드문서 스토리에서 언급하고 있는 사실입니다

86
00:04:25,780 --> 00:04:27,610
하지만 객체를 만드는 게 클래스 E

87
00:04:27,610 --> 00:04:30,070
클래스 가격 계란이 당연히 이해가 안 되는 게

88
00:04:30,070 --> 00:04:32,640
보통 정상입니다

89
00:04:32,640 --> 00:04:36,690
다른 어머 에서는 클래스는 대부분 객체를 생성하는 코드 좋아

90
00:04:36,690 --> 00:04:40,190
그저 바이트코드 일부분입니다

91
00:04:40,190 --> 00:04:41,660
일단 파이썬 클래스

92
00:04:41,660 --> 00:04:44,080
클래스 가격 체인지 알아보기 위해서는

93
00:04:44,080 --> 00:04:46,330
그 방법은 간단합니다

94
00:04:46,330 --> 00:04:48,170
앞에서 소개한 E 클래스

95
00:04:48,170 --> 00:04:49,940
객체 세 가지 조건을 만족한다면

96
00:04:49,940 --> 00:04:54,310
클래스는 객체인 것을 잊지 말 수 있습니다

97
00:04:54,310 --> 00:04:59,610
아이덴티티 그리고 타입을 한번 확인해 보도록 합시다

98
00:04:59,610 --> 00:05:02,170
일단 간단히 클래스를 하나 만들었습니다

99
00:05:02,170 --> 00:05:05,370
아무것도 없는 빈 클래스입니다

100
00:05:05,370 --> 00:05:09,290
우리는 클래스가 ID 함수를 통해 클래스 E

101
00:05:09,290 --> 00:05:14,670
클래스 객체 가치는 메모리 주소를 확인할 수 있습니다

102
00:05:14,670 --> 00:05:18,920
rodin 함수를 통해 어트리뷰트를 가지고 옴으로써

103
00:05:18,920 --> 00:05:22,110
클래스가 값을 가지는 것을 확인할 수 있고

104
00:05:22,110 --> 00:05:23,830
게다가 타입이란 함수를 통해

105
00:05:23,830 --> 00:05:27,700
클래스가 타일도 가진다는 것을 확인할 수 있습니다

106
00:05:27,700 --> 00:05:29,440
그렇습니다 확인해서 클래스는

107
00:05:29,440 --> 00:05:32,380
객체인 것을 확인할 수 있습니다 이 세 가지

108
00:05:32,380 --> 00:05:36,220
요건을 모두 만족 하니까요

109
00:05:36,220 --> 00:05:38,560
이거 점점 더 이해가 잘 안 하시는 분들도 계실

110
00:05:38,560 --> 00:05:41,910
겁니다

111
00:05:41,910 --> 00:05:44,080
김치는 타입을 가신다고 했습니다

112
00:05:44,080 --> 00:05:47,250
그리고 타입은 객체를 정리한다고 했습니다

113
00:05:47,250 --> 00:05:48,950
그런데 클래스의 타입 있다니

114
00:05:48,950 --> 00:05:51,260
이건 타입을 정현파 있다는 말인데

115
00:05:51,260 --> 00:05:55,440
선택 나타나게 당연히 이상한 사실입니다

116
00:05:55,440 --> 00:05:59,610
하지만 이상한 존재가 바로 타일을 정하는 타입 이자

117
00:05:59,610 --> 00:06:06,210
클래스 인스턴스 가장 특별한 클래스 이것이 바로 메타 클래스입니다

118
00:06:06,210 --> 00:06:07,720
이번에는 입 한번

119
00:06:07,720 --> 00:06:08,620
메타클래스 라는 것이

120
00:06:08,620 --> 00:06:11,040
과연 클래스를 정말로 만들어 낼 수 있는지 확인해

121
00:06:11,040 --> 00:06:13,980
보려고 합니다

122
00:06:13,980 --> 00:06:18,900
일단 파티션의 메타클래스 도대체 무엇인지부터 알아야겠죠

123
00:06:18,900 --> 00:06:22,700
친구랑 타이판 설 통해 확인해 보면 말도 안 되는 거 같지만

124
00:06:22,700 --> 00:06:26,600
E 클래스 가지는 타입은 타입입니다

125
00:06:26,600 --> 00:06:28,780
네 바로 우리가 그 타입을 사용할 때

126
00:06:28,780 --> 00:06:30,700
쓰던 바로 그 타입입니다

127
00:06:30,700 --> 00:06:33,400
지킬앤하이드 아니고 이 타입은 객체타입 을

128
00:06:33,400 --> 00:06:34,870
가장 가져오는 간단한

129
00:06:34,870 --> 00:06:37,050
산수가 아니냐고 생각할 수도 있겠지만

130
00:06:37,050 --> 00:06:38,770
놀랍게도 타일에 문자를 보면

131
00:06:38,770 --> 00:06:43,190
타입은 두 가지 역할을 한다고 되어 있습니다

132
00:06:43,190 --> 00:06:44,490
카이리 한 개 인자를 가지고

133
00:06:44,490 --> 00:06:48,620
오실 때는 인자로 주어진 객체타입 클래스를 가져오지만

134
00:06:48,620 --> 00:06:49,680
세계의 인사를 가지고

135
00:06:49,680 --> 00:06:55,330
추울 때는 새로운 타입을 돌려 주는 것을 동작합니다

136
00:06:55,330 --> 00:06:57,600
그리고 다른 타이틀이자

137
00:06:57,600 --> 00:06:59,660
600개를 만들어낼 수 있는 거 같지

138
00:06:59,660 --> 00:07:02,700
메타 클래스를 사용하여 타입을 파일을 사용하여서

139
00:07:02,700 --> 00:07:06,630
5장 열 수 있습니다

140
00:07:06,630 --> 00:07:09,580
그리고 이것은 클래스 문을 사용하여 새 타입을 정현 갖고

141
00:07:09,580 --> 00:07:16,360
완전히 같은 결과를 보여줍니다

142
00:07:16,360 --> 00:07:20,340
파트리 이제 메타클래스 가 무엇인지 파이썬 했어요

143
00:07:20,340 --> 00:07:23,360
메타 클래스가 무엇인지도 분명히 알게 되었습니다

144
00:07:23,360 --> 00:07:25,990
파이썬에서 모든 것은 객체이고

145
00:07:25,990 --> 00:07:28,500
객체를 만든 타입클래스 또한 객체이며

146
00:07:28,500 --> 00:07:30,280
메타 클래스인 기본적인 타입이란

147
00:07:30,280 --> 00:07:35,170
타이베이에 저희 된다는 것을 알 수 있습니다

148
00:07:35,170 --> 00:07:41,660
그렇다면 어떻게 타입이란 타입을 사용해서 새로운 타입을 정리할까요

149
00:07:41,660 --> 00:07:45,990
파이썬 클래스 정의가 실행될 때 다음에 과정들을 통해 이루어집니다

150
00:07:45,990 --> 00:07:48,160
첫 번째로 방법을 결정하고

151
00:07:48,160 --> 00:07:50,720
적절한 메타 클래스를 결정한 후

152
00:07:50,720 --> 00:07:54,360
클래스 네임스페이스 스페이스를 준비하고

153
00:07:54,360 --> 00:07:56,990
네임스페이스 안에서 클래스 바디를 실행한 후

154
00:07:56,990 --> 00:08:01,880
최종적으로 클래스 객체를 생성하는 클래스를 생성합니다

155
00:08:01,880 --> 00:08:03,190
클래스 하느라 생성하고

156
00:08:03,190 --> 00:08:04,500
각 반지를 따라가보면

157
00:08:04,500 --> 00:08:06,750
파이썬이 어떻게 메타 클래스를 사용하여

158
00:08:06,750 --> 00:08:10,720
새로운 파일을 정하는지 알아보려고 합니다

159
00:08:10,720 --> 00:08:14,430
클래스 정리가 들어있는 코드를 실행하면

160
00:08:14,430 --> 00:08:16,720
먼저 파이썬은 시세를 알고 있으면 사용해

161
00:08:16,720 --> 00:08:18,750
메소드를 가지고는 순서인 메소드

162
00:08:18,750 --> 00:08:23,450
리솔루션 오더에 말을 하는 것을 구성합니다

163
00:08:23,450 --> 00:08:26,210
emro 구성되면 클래스 정의를 위한 메타

164
00:08:26,210 --> 00:08:27,590
클래스를 결정합니다

165
00:08:27,590 --> 00:08:29,060
별도로 지정하지 않으면 활성화

166
00:08:29,060 --> 00:08:34,180
자동적으로 기본 메타클래스 타입을 사용합니다

167
00:08:34,180 --> 00:08:37,600
이제 메타폴리스 결정되었습니다 결정되었으며

168
00:08:37,600 --> 00:08:41,150
녹화에서는 메타클래스 에서 네임스페이스를 준비하는 언더바

169
00:08:41,150 --> 00:08:43,360
프리페어드 비트 를 호출하여

170
00:08:43,360 --> 00:08:46,370
바든바든 맵핑으로 네임스페이스를 정리 할 것입니다

171
00:08:46,370 --> 00:08:49,780
만약 언더바 프리페어드 비트가 없다면

172
00:08:49,780 --> 00:08:51,760
파이썬은 기본적으로 빈 순서있는 맵핑

173
00:08:51,760 --> 00:08:56,960
기본적인 직장을 사용할 것입니다

174
00:08:56,960 --> 00:09:00,080
이것은 매핑이란 것만 만족하게 때는 만족하면 되기 때문에

175
00:09:00,080 --> 00:09:02,170
오더데이트 등 딕셔너리

176
00:09:02,170 --> 00:09:07,680
홍대 메소드를 가지는 것들은 아무거나 상관없습니다

177
00:09:07,680 --> 00:09:10,980
저 졌다면 파이썬은 2X2X2

178
00:09:10,980 --> 00:09:13,030
함수를 사용하여 파일을 실행하여

179
00:09:13,030 --> 00:09:15,520
바디 속에 들어있는 함수 정의 변수 할당

180
00:09:15,520 --> 00:09:22,680
그리고 기타 등등을 수행하여 클래스의 네임스페이스를 그거

181
00:09:22,680 --> 00:09:25,490
마지막으로 파이썬 클래스 객체를 완성하는데

182
00:09:25,490 --> 00:09:29,180
일반적인 클래스가 인스턴트를 만들때처럼 파이썬은 메타클래스

183
00:09:29,180 --> 00:09:31,570
온더보더 메뉴 를 사용하여 메타클래스

184
00:09:31,570 --> 00:09:38,960
인스턴스인 클래스 개체를 만들어 됩니다

185
00:09:38,960 --> 00:09:41,460
그리고 파이썬 3.6 이상해서

186
00:09:41,460 --> 00:09:43,060
메타 클래스란 객체를 생성할 때

187
00:09:43,060 --> 00:09:46,670
디스크립터 교체를 수집하여 정해져있다는 원더우먼 더 레인

188
00:09:46,670 --> 00:09:48,690
구글 실행하여 디스크립터

189
00:09:48,690 --> 00:09:53,580
네임스페이스를 연결하는 작업을 수행하기 갑니다

190
00:09:53,580 --> 00:09:56,360
이제 클래스 객체 생성 이모도 완료되었습니다

191
00:09:56,360 --> 00:09:58,110
파이썬 코드 읽어 드린 후

192
00:09:58,110 --> 00:10:00,610
메타클래스 를 사용해 네임스페이스를 정의하였고

193
00:10:00,610 --> 00:10:02,820
네임스페이스에서 바디를 실행했고

194
00:10:02,820 --> 00:10:08,030
그 후 메타클래스 언더바 사용하여 객체를 생성할 수 있니

195
00:10:08,030 --> 00:10:10,130
그러나 베타 클래스는 이것도 한 가지

196
00:10:10,130 --> 00:10:14,010
더 관리 할 수 있습니다

197
00:10:14,010 --> 00:10:17,470
일반적으로 클래스 인스턴스 를 만들 때

198
00:10:17,470 --> 00:10:20,760
우리는 클래스의 언더바 코를 오버라이드 합니다

199
00:10:20,760 --> 00:10:26,780
그런데 메타클래스 언더 반도 바꾸는 어디 있을까요

200
00:10:26,780 --> 00:10:29,270
메타폴리스 언더 반도 봤거든

201
00:10:29,270 --> 00:10:32,990
인스턴스 생성 만들 거 아닙니다

202
00:10:32,990 --> 00:10:35,840
다시 정리하자면 추가적으로 메타 클래스는 클래스

203
00:10:35,840 --> 00:10:37,820
인스턴스 생성 해도 관여하고

204
00:10:37,820 --> 00:10:40,550
메타클래스 언더 반토막 걸은 클래스가 인스턴스를 만들 때

205
00:10:40,550 --> 00:10:45,470
호출됩니다

206
00:10:45,470 --> 00:10:46,790
이제는 이때까지 알아보며

207
00:10:46,790 --> 00:10:49,500
클래스를 한번 활용해볼 시간입니다

208
00:10:49,500 --> 00:10:52,220
앞선 내용에서는 메타클래스 클래스 생성

209
00:10:52,220 --> 00:10:56,870
어느 정도로 어떻게 권현실 알아보았습니다

210
00:10:56,870 --> 00:11:00,420
이제 우리는 앞선 내용을 가지고 메타크릴 상속받은 다음

211
00:11:00,420 --> 00:11:01,460
매직메소드 를 가지고

212
00:11:01,460 --> 00:11:03,050
클래스 생성을 변경하여

213
00:11:03,050 --> 00:11:05,690
몇 시까지 흥미로운 파이썬의 기능대로

214
00:11:05,690 --> 00:11:07,770
보낼 수 있습니다

215
00:11:07,770 --> 00:11:09,330
네임스페이스 주변 언더바

216
00:11:09,330 --> 00:11:12,790
프리페어 객체를 생성하는 온더번드 받아요

217
00:11:12,790 --> 00:11:14,480
그리고 인스턴스생성 인덕원

218
00:11:14,480 --> 00:11:18,660
더마콜 집중할 것은 언더바디 와 언더바 콜 2

219
00:11:18,660 --> 00:11:20,910
메소드들을 집중적으로 변경해 보면서

220
00:11:20,910 --> 00:11:23,790
확인해 볼 생각입니다

221
00:11:23,790 --> 00:11:28,340
언더 banul 클래스 클래스 객체를 검증하는 코드를 삽입하여

222
00:11:28,340 --> 00:11:32,730
클래스가 생성될때 올바르게 생성되는지를 컴파일타임 해도 검사했습니다

223
00:11:32,730 --> 00:11:35,870
대표적인 예로 클래스가 똑바로 되었는지

224
00:11:35,870 --> 00:11:39,030
또는 특정 어떻게 표를 가지고 있는 체크함으로써

225
00:11:39,030 --> 00:11:40,580
클래스가 제가 사게

226
00:11:40,580 --> 00:11:46,500
올바른 방식으로 만들어졌는지 체크할 수 있습니다

227
00:11:46,500 --> 00:11:51,230
첫 번째 알아볼 검사는 상속을 통제하는 것입니다

228
00:11:51,230 --> 00:11:54,630
언덕 위에 두 번째 인제는 부모클래스를 담은 피플

229
00:11:54,630 --> 00:11:56,270
피플 형태입니다

230
00:11:56,270 --> 00:11:58,260
이제 우리가 클래스를 클래스를 상상하면

231
00:11:58,260 --> 00:11:59,280
이제 괄호 치고

232
00:11:59,280 --> 00:12:03,220
거기서 상속받을 클래스를 정의합니다

233
00:12:03,220 --> 00:12:05,690
그 클래스들이 언덕 위에

234
00:12:05,690 --> 00:12:08,540
두 번째 인제로 들어오게 됩니다

235
00:12:08,540 --> 00:12:11,210
그리고 다중상속 시에는 2대 이스케이프

236
00:12:11,210 --> 00:12:15,210
두 가지 이상의 클래스를 담기게 됩니다

237
00:12:15,210 --> 00:12:16,990
이를 이용해 다중상속을 금지하는 메타

238
00:12:16,990 --> 00:12:23,650
클래스 만들어 볼 수 있습니다 이 desalter

239
00:12:23,650 --> 00:12:25,830
2007년 메타클래스 는

240
00:12:25,830 --> 00:12:29,850
이제 두 번째로 들어온 베스트 프렌드 길이를 체크하여

241
00:12:29,850 --> 00:12:32,270
하나보다 크다면 예외발생시키기 고

242
00:12:32,270 --> 00:12:39,480
그렇지 않다면 클래식 클래식 지속하는 그러면 클래스입니다

243
00:12:39,480 --> 00:12:42,770
그리고 이렇게 이거를 메타그로스 정한 클래스를 사용해서

244
00:12:42,770 --> 00:12:43,830
두 개 두 개 이상

245
00:12:43,830 --> 00:12:48,580
다중상속을 활용하면 예배가 발생하게 됩니다

246
00:12:48,580 --> 00:12:55,330
정했던 그리고 당신 사과는 상속을 금지하는 메타클래스

247
00:12:55,330 --> 00:12:58,710
돈 만들어 볼 수 있습니다

248
00:12:58,710 --> 00:13:03,780
메타 클래스는 이제 상속받은 베이스캠프를 검사하여

249
00:13:03,780 --> 00:13:11,950
상속에 한 번 더 됐다면 예배를 발생시키는 메타 클래스입니다

250
00:13:11,950 --> 00:13:13,760
또한 그리고 메타 클래스로

251
00:13:13,760 --> 00:13:15,560
트위터 검색을 해 볼 수 있는데요

252
00:13:15,560 --> 00:13:18,390
또한 우리가 이제 기대한대로 클래스가 작성되었는지

253
00:13:18,390 --> 00:13:20,050
컴파일 타임에 검증하는 검증하기

254
00:13:20,050 --> 00:13:26,030
위한 방법 이 코드는 창고에 모델 검정입니다

255
00:13:26,030 --> 00:13:30,880
메타가 없다면 장소 앱은 시작도 되지 않습니다

256
00:13:30,880 --> 00:13:32,560
만약 메탈을 정하지 않고

257
00:13:32,560 --> 00:13:35,900
모델폼 클래스를 구현하면 애를 발생시킬 텐데

258
00:13:35,900 --> 00:13:37,340
이거를 구현하기 위해

259
00:13:37,340 --> 00:13:40,550
이제 체크 메탈 메탈 클래스를 만들어 봤습니다

260
00:13:40,550 --> 00:13:44,170
이제 클래스는 네임스페이스에서 메탈

261
00:13:44,170 --> 00:13:47,000
하는 항목이 정의되었는지 체크하고

262
00:13:47,000 --> 00:13:51,430
이게 만약 첫 번째로 만들어진 앱스트랙트 클래스가 아니라면

263
00:13:51,430 --> 00:13:56,230
예외를 발생시켰습니다

264
00:13:56,230 --> 00:13:57,750
그리고 메타클래스 사용해서 싱글톤

265
00:13:57,750 --> 00:14:00,350
돈 구해 볼 수 있습니다

266
00:14:00,350 --> 00:14:03,270
화실 싱글톤을 구하는 방법은 파이썬에 많은데요

267
00:14:03,270 --> 00:14:06,460
이제 뭐 데코레이션 사용한 방법도 있고

268
00:14:06,460 --> 00:14:09,290
메타클래스 메타클래스 를 사용하고 있는데

269
00:14:09,290 --> 00:14:11,260
저희는 메타클래스 를 사용하는 방법을 알아보려면

270
00:14:11,260 --> 00:14:13,530
다 아까 전에 말씀드렸다시피

271
00:14:13,530 --> 00:14:17,080
언더바 걸은 이제 메타클래스 사용해서 만들어진 클래스

272
00:14:17,080 --> 00:14:18,410
인스턴스 생성 외관입니다

273
00:14:18,410 --> 00:14:23,160
저희는 코를 오버라이드 처음 한 번만 교체를 생성하고

274
00:14:23,160 --> 00:14:24,360
다음부터는 한번 생선

275
00:14:24,360 --> 00:14:30,520
액체를 돌려주도록 하는 코드를 작성해 볼 예정입니다

276
00:14:30,520 --> 00:14:34,240
이렇게 클래스를 키로 인스턴스별 밀어두고

277
00:14:34,240 --> 00:14:35,720
2채널에서 클래스를 사용해

278
00:14:35,720 --> 00:14:40,070
한번 만들어진 스턴트 를 계속해서 돌려주는 클래스입니다

279
00:14:40,070 --> 00:14:43,100
딕셔너리에 키를 클래스로

280
00:14:43,100 --> 00:14:44,600
값을 2클래스로 이용해

281
00:14:44,600 --> 00:14:48,490
만들어진 객체를 돌려주게 됩니다

282
00:14:48,490 --> 00:14:49,700
간단한 클래스를 만들고

283
00:14:49,700 --> 00:14:52,000
메타 클래스를 아까 전에 제작한 저

284
00:14:52,000 --> 00:14:55,610
싱글톤이란 메타클래스 수정했습니다

285
00:14:55,610 --> 00:14:58,000
이제 캡처를 2번 선생님 왔는데요

286
00:14:58,000 --> 00:15:00,130
보통이라면 다르겠지만 이 메타클래스

287
00:15:00,130 --> 00:15:02,240
사장이 만들어진 클래스의 객체들은

288
00:15:02,240 --> 00:15:07,360
갑씩 일치한다는 것을 알 수 있습니다

289
00:15:07,360 --> 00:15:10,210
그리고 파티에서 언더그라운드 바지를 소개할 때

290
00:15:10,210 --> 00:15:13,960
scream 후기 1일에 잠깐 있었는데

291
00:15:13,960 --> 00:15:15,630
먼저 디스크립터란 게 무엇인지

292
00:15:15,630 --> 00:15:18,540
간단히 소개하자면 프로퍼티 유사하지만

293
00:15:18,540 --> 00:15:20,200
데코레이터 다닌 클래스 기반으로

294
00:15:20,200 --> 00:15:24,380
게터세터 를 구현하는 새로운 프로토 언더밴드

295
00:15:24,380 --> 00:15:26,980
박신혜 이미란 훅은 3.6% 나온 기념으로

296
00:15:26,980 --> 00:15:32,790
그 이전 버전은 디스크립터를 상당히 불편한 사용했습니다

297
00:15:32,790 --> 00:15:36,580
도키도키 데코레이터 일단 디스크립터에 대해서 간단히 설명하자면

298
00:15:36,580 --> 00:15:39,100
도키도키 데코레이터 가 붙은 게 더 세텁 아닌

299
00:15:39,100 --> 00:15:40,820
이렇게 skype 잔고

300
00:15:40,820 --> 00:15:43,520
1필지 형이 같은 모양을 하고 있습니다

301
00:15:43,520 --> 00:15:48,930
그리고 그 필드 보여 디스트릭트 9 번 일정에 기도합니다

302
00:15:48,930 --> 00:15:50,260
이렇게 상대 됐습니다

303
00:15:50,260 --> 00:15:52,670
개통할 때 와 동일한 기능을 하지만

304
00:15:52,670 --> 00:15:54,860
조금 더 깔끔하게 깔끔한 모양을 하고

305
00:15:54,860 --> 00:15:58,290
코드를 작성할 수 있습니다

306
00:15:58,290 --> 00:16:00,450
그런데 3.5 까지는 아까 좀처럼

307
00:16:00,450 --> 00:16:05,750
네임 이라는 네임 이라는 이름의 KM

308
00:16:05,750 --> 00:16:11,490
네임스페이스에서 가져올 키를 지정해서 했습니다

309
00:16:11,490 --> 00:16:13,210
하지만 이것은 별로 좋은 모양이다

310
00:16:13,210 --> 00:16:14,990
왜냐면 같은 내용이 두 번 들어가는 쪽

311
00:16:14,990 --> 00:16:17,980
일종의 중복 이니까요

312
00:16:17,980 --> 00:16:20,200
그래서 파이터는 중복을 제거하기 위해 3.6

313
00:16:20,200 --> 00:16:24,370
포터 언더 원더박스 네이비랑 구글 디스크립터 프로토콜 추가하고

314
00:16:24,370 --> 00:16:26,910
메타클래스 가희 구글 자동으로 트리거에

315
00:16:26,910 --> 00:16:32,960
네임스페이스에서 가져올게 의미 재생해 줘

316
00:16:32,960 --> 00:16:35,820
네임 이라는 항목을 쓰지 않고도

317
00:16:35,820 --> 00:16:40,450
디스켓으로 완성할 수 있는 것이죠

318
00:16:40,450 --> 00:16:42,570
JP 4842 새로운 디스크립터

319
00:16:42,570 --> 00:16:44,470
프로토콜이 소개된지 아닌데

320
00:16:44,470 --> 00:16:45,450
여기에 나오는 9일 날

321
00:16:45,450 --> 00:16:50,200
좀 간단하게 구해 보도록 하겠습니다 이 메타

322
00:16:50,200 --> 00:16:53,390
클래스는 seasonal 가지고 있다면

323
00:16:53,390 --> 00:16:54,540
그 흙을 가지고 있는 어

324
00:16:54,540 --> 00:16:57,570
티베트의 이름을 어떻게 할당된 디스크립터와

325
00:16:57,570 --> 00:17:01,420
네임스페이스 가져올 이름으로 지정해주기 됩니다

326
00:17:01,420 --> 00:17:04,700
이제 저 키별로 이제 갖고 오고

327
00:17:04,700 --> 00:17:07,320
어떻게 밑에 선생님이 있다면

328
00:17:07,320 --> 00:17:09,530
저 키를 이제 홍신애

329
00:17:09,530 --> 00:17:13,470
그 네임스페이스에서 가져오기를 받는 쪽으로 줌으로써

330
00:17:13,470 --> 00:17:15,880
이제 네임스페이스 네임스페이스에서 가져올 수 있도록

331
00:17:15,880 --> 00:17:18,400
합니다

332
00:17:18,400 --> 00:17:19,480
T 스케이트는 다 먹었지

333
00:17:19,480 --> 00:17:23,080
표준가 똑같은 프로토콜로 수를 정했습니다

334
00:17:23,080 --> 00:17:24,010
이연도 만들었을 때

335
00:17:24,010 --> 00:17:27,020
입은 삼촌 돌아가지 않는 기본적인 타일을 매크로사용

336
00:17:27,020 --> 00:17:31,680
일반적 코드라면 이콘은 동작하지 않을 것입니다

337
00:17:31,680 --> 00:17:34,500
하지만 이렇게 메타클래스 레트로 지정한후

338
00:17:34,500 --> 00:17:36,620
디스크를 다 먹었으면

339
00:17:36,620 --> 00:17:38,290
깔끔 되게 중복되는 부분이 없어진지

340
00:17:38,290 --> 00:17:41,200
스케줄을 보실 수 있습니다

341
00:17:41,200 --> 00:17:43,230
그리고 이것은 당연히 멀쩡하게

342
00:17:43,230 --> 00:17:48,200
저희가 생각한 대로 올바르게 작동합니다

343
00:17:48,200 --> 00:17:50,190
이때까지 메타 클래스를 사용하려는

344
00:17:50,190 --> 00:17:53,180
아주 기초적인 방법들에 대해 설명해 는데요

345
00:17:53,180 --> 00:17:55,140
메타폴리스 활용방법은 무슨 묵은 곳이라니

346
00:17:55,140 --> 00:17:59,320
각자 재밌는 것들을 만들고 실수했을 것입니다

347
00:17:59,320 --> 00:18:00,700
이제 마지막 파티입니다

348
00:18:00,700 --> 00:18:03,530
과연 메타클래스 님이 어디서 쓰고 있을까요

349
00:18:03,530 --> 00:18:05,150
사실 친숙한 오픈소스라이브러리

350
00:18:05,150 --> 00:18:07,300
잔고 등 사실 오래전부터

351
00:18:07,300 --> 00:18:10,180
메타클래스 를 코드에서 활용하고 있습니다

352
00:18:10,180 --> 00:18:12,030
과연 어떻게 활용되는지

353
00:18:12,030 --> 00:18:12,770
샐러리와 잔고

354
00:18:12,770 --> 00:18:17,190
예를 들어 확인해 보도록 하겠습니다

355
00:18:17,190 --> 00:18:19,260
첫 번째로 들어 볼 것은 셀러리 2.6%

356
00:18:19,260 --> 00:18:24,220
열심히 일단 셀러리 에 대한 간단한 설명을 드리자면

357
00:18:24,220 --> 00:18:28,440
바로 차량이 어려운 작업을 비동기로 처리하는 작업치료

358
00:18:28,440 --> 00:18:30,400
테스트를 만들어 브로커에 전달하면

359
00:18:30,400 --> 00:18:32,810
뭐가 작업을 처리하는 지영한 것을

360
00:18:32,810 --> 00:18:34,850
결과값을 구조로 만들어져 있는

361
00:18:34,850 --> 00:18:38,430
그런 오픈소스라이브러리 입니다

362
00:18:38,430 --> 00:18:40,620
이때 사용해 보신 분 이라고 알겠지만

363
00:18:40,620 --> 00:18:42,510
테스트를 보통은 데코레이터 만들지만

364
00:18:42,510 --> 00:18:45,280
클래스를 사용해서 테스트를 구매할 수 있는데

365
00:18:45,280 --> 00:18:47,690
이테스트 클래스를 상속받아 테스트를 만들게 되면

366
00:18:47,690 --> 00:18:51,420
자동으로 LA 테스트가 등록해 등록되었습니다

367
00:18:51,420 --> 00:18:54,400
4.0 버전 이전까지는 말해 줘

368
00:18:54,400 --> 00:18:56,270
이제 이 샐러리 라텍스

369
00:18:56,270 --> 00:19:02,230
클래스는 데스크탑이랑 메타 클래스를 가지고 있는데 이 태스크

370
00:19:02,230 --> 00:19:03,870
타이건 새로 구현된 테스크

371
00:19:03,870 --> 00:19:05,680
이제 몇 가지 검증을 거친 후

372
00:19:05,680 --> 00:19:07,820
이름이 없다면 이름을 자동으로 부여하고

373
00:19:07,820 --> 00:19:09,060
현재 맥락에 배정재단

374
00:19:09,060 --> 00:19:14,060
테스트를 자동으로 등록하는 기능을 수행하고 있습니다

375
00:19:14,060 --> 00:19:16,980
다만 샐러리 4부터는 이 기능이 삭제되었으므로 이 코드를

376
00:19:16,980 --> 00:19:17,910
찾아보시려면 샐러리

377
00:19:17,910 --> 00:19:21,630
2.6 또는 4.0 버전 이하의 호텔 찾아보세요

378
00:19:21,630 --> 00:19:24,910
확인하실 수 있습니다

379
00:19:24,910 --> 00:19:26,030
그리고 마지막으로 창고에

380
00:19:26,030 --> 00:19:28,540
메타클래스 에 대해서 소개 보러 갑니다

381
00:19:28,540 --> 00:19:32,270
잔고로 이모 나는 사람들이 계실 정도로 유명한 라이브러리

382
00:19:32,270 --> 00:19:36,330
냉장고에서도 메타클래스 를 많이 활용하고 있습니다

383
00:19:36,330 --> 00:19:37,690
잔고에서 메타폴리스 를 활용한

384
00:19:37,690 --> 00:19:40,130
대표적인 예는 모델과 4입니다

385
00:19:40,130 --> 00:19:42,110
여기서는 폼이 좀더 간다는 얘기 때문에

386
00:19:42,110 --> 00:19:44,370
폼에 대해서 홈에서 쓰이는 메타클래스

387
00:19:44,370 --> 00:19:48,590
메타클래스 에 대하여 확인해 보려고 합니다

388
00:19:48,590 --> 00:19:52,530
봄을 만들 때 상속받는 폼 클래스는 필드 메타클래스

389
00:19:52,530 --> 00:19:59,310
남매 클래스를 상속받고 있습니다 이 메타 클래스는

390
00:19:59,310 --> 00:20:00,000
폼을 정의할 때

391
00:20:00,000 --> 00:20:02,120
사용한 필드를 메타클래스

392
00:20:02,120 --> 00:20:05,290
메타클래스 에서 자동으로 소집합니다

393
00:20:05,290 --> 00:20:09,100
이제 스페이스에서 마이크를 가져오고

394
00:20:09,100 --> 00:20:11,600
필드 필드 하나 사 먹을 상처 받았다면

395
00:20:11,600 --> 00:20:13,520
이제 이 페이지를 자동으로 등록하게 되면

396
00:20:13,520 --> 00:20:17,980
메타클래스 코디입니다

397
00:20:17,980 --> 00:20:20,280
그리고 폼폼 알아봤는데

398
00:20:20,280 --> 00:20:22,320
폼에서 파생되는 모델폼 에 대해서도

399
00:20:22,320 --> 00:20:24,790
메타클래스 는 유용하게 사용되고 있는 사람

400
00:20:24,790 --> 00:20:26,790
되고 있습니다

401
00:20:26,790 --> 00:20:28,530
파티에서 모델 포메이션에서

402
00:20:28,530 --> 00:20:30,240
클래스를 검증하는 설명했는데

403
00:20:30,240 --> 00:20:32,350
사실 거 같은 놈입니다

404
00:20:32,350 --> 00:20:33,170
모델 보면 사용할 때

405
00:20:33,170 --> 00:20:36,610
몇 가지 설정을 말하는데도 클래스로 지정하게 되는데

406
00:20:36,610 --> 00:20:38,610
메타그로스 님의 차 안에서 있는 설정을 보고

407
00:20:38,610 --> 00:20:39,390
폼을 구성합니다

408
00:20:39,390 --> 00:20:45,370
일단 메타클래스 에서 메탈을 추출한후

409
00:20:45,370 --> 00:20:48,370
올바른 형식인지 확인을 합니다

410
00:20:48,370 --> 00:20:50,440
예를 들면 특별히 만들려고 바로 감쌌지만

411
00:20:50,440 --> 00:20:52,890
심플 아프지 않아 G+ 것이

412
00:20:52,890 --> 00:20:54,120
아니 무의미한 그런 식으로 표현

413
00:20:54,120 --> 00:20:56,830
되는 경우가 있을 수 있습니다

414
00:20:56,830 --> 00:20:58,740
그리고 이 장구애비 장구애비

415
00:20:58,740 --> 00:21:02,020
클래스에서는 1종으로 체크한 코드가 있습니다

416
00:21:02,020 --> 00:21:03,520
만약 이게 스트링 인데

417
00:21:03,520 --> 00:21:09,110
특정 값이 아니라면 잘못했다고 알려주는 부분입니다

418
00:21:09,110 --> 00:21:12,820
그리고 모델에는 어떻게 어떻게 밑으로 정의된 폰과 연결

419
00:21:12,820 --> 00:21:17,500
대장 곰오디오에서 잔고 모델에서 필드를 가족이랍니다

420
00:21:17,500 --> 00:21:20,920
모델을 가져와서 필터 교체라고 메탈 필드

421
00:21:20,920 --> 00:21:22,360
좀 이상한 것은 없는지 등등

422
00:21:22,360 --> 00:21:24,530
체크 체크 하는 등의 작업을 한 후

423
00:21:24,530 --> 00:21:30,970
필드를 폰 클래스 하면서 잔고는 모델 컴퓨터를 마무리할 제발

424
00:21:30,970 --> 00:21:32,500
뜨는 여기까지 입니다

425
00:21:32,500 --> 00:21:34,580
그리고 저희 회사에서는 글로벌 음악

426
00:21:34,580 --> 00:21:36,190
팬들의 위한 서비스를 함께 만들어가요

427
00:21:36,190 --> 00:21:38,290
백엔드 개발자 대법서

428
00:21:38,290 --> 00:21:40,350
코어 프레임워크 개발자를 항상 기다리고 있습니다

429
00:21:40,350 --> 00:21:41,730
많이 지원해 주시면 감사하겠습니다

430
00:21:41,730 --> 00:21:45,340
발표를 들어줘서 감사합니다
