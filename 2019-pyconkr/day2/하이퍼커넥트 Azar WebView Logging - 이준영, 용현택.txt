곧 발표가 시작될 예정이오니 빈 자리에 앉아 주시기 바랍니다. 안녕하세요? 이번 시간에는 이준영, 용현택 하이퍼커넥트 아자르 웹뷰 로깅이라는 내용으로 발표를 하겠습니다. 큰 박수 부탁드립니다.
-안녕하세요? 저는 하이퍼커넥트의 CTO 용현택입니다. 오늘 발표는 아자르 웹뷰에 대한 발표입니다. 모바일상에서 웹뷰를 쓰고 있어요. 실제로 앱 개발 중 웹뷰를 사용하다 보면 제대로 동작하는 건지 굉장히 불안하게 되는데요. 그런 환경에서 사용자의 다양한 환경이나 기기에서 제대로 동작하는지 확신하고 문제가 생겼을 때 디버깅을 통해서 로깅하는 발표를 할 거고요.
발표에 앞서 하이퍼커넥트에 대한 소개를 잠시 드리겠습니다. 저희 하이퍼커넥트에는 아자르라는 앱이 유명한데요. 아자르는 어떤 매체에서 21세기 펜팔이라고 하는데요. 1:1 영상으로 전 세계 사람들을 만나서 새로운 친구를 사귈 수 있는 1:1 메신저 플랫폼입니다. 최근에 서비스하고 있는 게 하쿠나라는 1인 방송 라이브 스트리밍 서비스를 하고 있는데요. 기존 방송 서비스와 다르게 소셜 기능을 강조하고 시청자 중 한 명을 초대해서 방송할 수 있는 라이브 스트리밍 서비스입니다. 이런 서비스가 AI 기술을 기반하고 있고 전 세계 사람들을 새로 연결해서 가치를 만들자는 그러한 기조 아래 서비스를 하고 있습니다.
저희 하이퍼커넥트의 성장인데요. 저희는 창업한 지 5년 됐고 매년 빠르게 성장해서 작년에는 매출 1000억을 돌파했고 지금도 계속 성장하고 있습니다. 옆에 보시면 아자르 전 세계 매출 순위인데요. 글로벌 매출 순위 역시 매년 상승해서 1분기에는 전 세계 5위. 카카오 라인보다도 높은 매출 순위를 보여주고 있습니다.
이러한 저희 비즈니스 성장에는 하이퍼커넥트의 기술력이 뒷받침되어서 이렇게 성장할 수 있었는데요. 먼저 모바일 5년 전에 상용화해서 아자르라는 서비스를 상용화했고 230개국에서 다양한 통신상황 네트워크 환경 기기 환경에서의 트러블 슈팅을 겪으면서 더욱 안정적인 품질 영상 통화 서비스를 제공하는 인프라를 구축할 수 있었습니다.
또한 저희 하이퍼커넥트 부스에 가 보시면 지금 기술지원을 하고 있는데요. 아이유 사진 한 장만 있으면 실시간으로 자신의 얼굴을 사진 속의 아이유 얼굴로 바꿔주는 기술을 시현하고 있습니다. 머신러닝 조직이 모바일상에서 돌아가는 AI기술을 확보하고 있습니다. 특히 아자르 같은 경우에는 1:1 영상통화 플랫폼이기 때문에 데이터를 서버로 전송하면 프라이버시 문제가 발생하기 때문에 기기상에서 돌아가는 AI기술을 저희가 확보하고 있습니다.
이 행사가 파이콘인 만큼 하이퍼커넥트에서 파이썬을 어디에서 활용하는지 많이 궁금해할 텐데요. 하이퍼커넥트에서는 데이터 기반으로 의사결정을 많이 하고 있습니다. 대부분의 서비스에서 나가는 픽처들이 예비서비스를 많이 하고 있고 예비 테스트의 결과나 유저 행동의 결과를 분석하기 위해서 데이터 파이프라인을 구축하고 있고 군데군데에 파이썬을 굉장히 많이 사용하고 있고 파이썬 기반의 오픈소스 도구들도 많이 사용하고 있습니다. 머신러닝에서도 텐서 플로우에서도 많이 사용하고 있고요.
데이터 전철이나 마이크로 서비스에서도 파이썬을 많이 사용하고 있습니다. 또한 저희 아자르나 하쿠나 같은 경우는 자바 백엔드로 돼 있는데요. 이외에도 저희가 냈던 수많은 앱이 있었는데 그 앱들 중 많은 서비스가 파이썬 기반의 백엔드를 사용해서 개발됐습니다. 앞으로 개발 중인 많은 서비스 또한 파이썬 백엔드를 기반으로 개발되고 있습니다.
그래서 저희 하이퍼커넥트에서 채용을 지금하고 있는데요. 파이썬 엔지니어뿐 아니라 IOS 안드로이드 자바 백엔드 머신러닝 데이터에 이르기까지 많은 분야 엔지니어를 채용하고 있습니다. 저희 하이퍼커넥트 사무실은 여기서 아주 가까운 곳에 있는데요. 코엑스 타워에 있고 회사에 바리스타가 제공하는 커피, 전문 마사지사가 피로를 풀어주고요.
이러한 복지뿐만 아니라 가장 큰 복지는 훌륭한 동료 엔지니어들일 것 같은데요. 재미있는 프로젝트를 하면서 혁신적인 프로덕트를 개발하는 것이 가장 큰 복지이지 않을까 싶습니다. 다음은 저희 아자르 웹 플랫폼 이준영 님이 웹뷰 로깅에 대한 설명을 드리겠습니다.
-안녕하세요? 저는 하이퍼커넥트에서 웹플랫폼 팀장을 맡고 있는 이준영이고요. 아자르에서 어떻게 로깅했는지 스토리를 설명드리도록 하겠습니다. 백엔드 엔지니어고 근래는 DRF 쪽을 많이 개발했고요. 아자르 어드민이 저희 파이썬 장고로 개발돼 있어요. 이쪽을 맡아서 진행하고 있습니다. 오늘 제가 파이콘인데도 불구하고 로깅 관련 세션을 드리는 이유는 어떻게 보면 굉장히 간과할 수 있는 로깅의 중요성에 대해서 다시 한번 강조하고 싶어서 말씀드리고요. 저희가 CTO로 말씀드렸던 것처럼 굉장히 많은 것을 진행하고 있지만 때로는 바쁘다 보니까 제대로 못하는 상황이 발생하기도 합니다.
우리가 이제는 제대로 로깅하고 있다는 것을 보여드리도록 하겠습니다. 제가 봤던 기존 문제점에 대해서 설명드릴게요. 기존에는 로깅 인프라가 부족했어요. 너무나도 상상하기 쉬운 인프라 구성이었는데 예를 들어서 장애가 나서 로그를 보고 싶어서 SSH로 서버를 접속합니다. 당연히 접속 안 되는 문제가 발생하죠. 디버깅하다 보면 메모리가 부족한 걸 확인해서 볼륨을 늘리고 겨우 접속하다 보면 굉장히 많은 로그들이 디스크를 차지하고 있어서 문제점을 야기합니다.
매뉴얼하고 트래디셔널한 방식으로 로깅했는데 개선하려고 노력했습니다. 웹뷰다 보니까 아키텍처가 복잡해요. 안드로이드 IOS에서 SSR로 접속합니다. 그렇게 넥스테이스로 들어오면 장고로 들어오게 되면 장고가 다시 인터넷 콜로 아자르에 요청합니다. 체인하는 리퀘스트가 많은데 여기서 디버깅의 페이 포인트가 발생합니다. SSR 입장에서 클라이언트 정보를 알 수 없어요. 어떤 디바이스인지 모델 알 수 없는 문제점이 있고 다음 장고에는 또 똑같이 유저 디바이스 클라이언트 정보도 알 수 없어요.
당연히 마지막 아자르 API에서도 에러가 나면 도대체 어떤 사용자가 어떤 경로로 요청했는지 알 수 없는 문제가 발생합니다. 크게 두 가지 문제가 있었어요. SSH로 접속하다 보니까 검색이라든지 펑션 관리하는 것도 쉽지 않았고요. 디버깅 포인트에서 연속성 있는 네트워크 사이에서 트래킹할 수 있는 인포메이션이 부재했어요. 이 두 가지 문제점으로 인해 기존 로깅 인프라랑 정책을 획기적으로 개선해보자고 저희가 진행했습니다. 저희가 잡았던 목표는 크게 네 가지입니다. 누구든지 접속 권한이 있으면 빠르게 접속하고 검색할 수 있게 했고요.
두 번째는 이게 가장 중요하다고 보면서 민감하지만 저희가 특별한 이슈가 생기지 않는 선에서는 굉장히 많은 정보를 로깅하는 거로 저희가 결정해서 정말 많은 걸 저희는 버깅하고 있습니다. 헤더 정보부터 시작해서 리스폰스 바디 저희가 저장하고 환경값 같은 거 스테틱하게 넣어놓은 값도 저장하고요. 저희 로깅만 보면 모든 게 해결될 수 있게 결정했습니다. 부가적인 내용인데요. 기존에는 저희가 바디에 사용했던 걸 커스텀헤드에 넣고 마지막에 있는 트랜젝션 레이어를 구성할 수 있는데요. 첫 번째 SSR에서 리퀘스트 받을 때 유니크한 ID를 생성하고요.
자세한 건 다시 설명드릴게요. 현재 저희는 중앙화는 GCP로 결정해서 사용하고 있어요. 많은 인프라를 사용하고 있긴 하지만 저희의 데이터 의사결정을 하는 데 있어서 저희한테 가장 중요한 기술이 비퀄이거든요. 모든 것을 활용하고 있는데 그전에 스텍 다이버 로깅이라고 GCP에서 제공하는 스테틱을 사용하기로 결정했고요.
단점이라고 제가 생각하는 부분은 조금 얼리 스테이지 같아요. 이 부분이 사실 어떻게 보면 가장 중요한 걸 수 있는데 많은 것을 로깅하고 있어요. 장고에서 사용하는 프로파일 리퀘스트 헤더 데이터. 보시면 저희가 당연히 민감한 데이터 같은 경우에는. 거의 모든 데이터를 남김으로써 나중에 디버깅할 때 활용할 수 있게끔 구축했습니다. 그리고 저희는 특이하게도 로컬 환경에서도 로깅을 하고 있어요. 아시겠지만 로컬 환경인데도 불구하고 여러 가지 인터넷 콜을 하다 보면 타사 서비스를 요청하고 그런 경우에는 저희가 로깅으로 확인해서 디버깅 용이하기 때문에 로컬 환경에서도 로깅하고 있고요.
보시면 서버 유저 같은 경우를 유저 이름으로 찍어서 보시면 상단에 제 이름으로 필터링한 거 볼 수 있어요. 로컬 환경인 경우 여러 명이 동시에 개발하면 당연히 중첩될 수 있겠죠. 하지만 제가 보낸 로그만 필터링해서 보는 게 유용하다고 생각합니다. 아웃바운드도 로깅하고 있어요. 굉장히 많은 네트워크 콜 그다음에 많은 마이크로서비스 콜을 하게 될 텐데 인터널한 API 인퀘스트를 남기고. 리스폰스 바디가 어떻게 들어왔는지 저장하고 있습니다.
부가적인 커스텀 헤더인데요. 고무적이라고 생각했던 건 플레인 유저 정보를 클라이언트분들이 커스텀헤드로 활용하기 시작했어요. 사용자의 플레인하다고 생각할 수 있는,나라 정보 같은 걸 굳이 ORM을 사용해서 DB 콜하는 의존성을 제거해서 리스폰스 타임을 줄이는 데도 결과적으로 효과도 저희가 얻었고요.
통계적인 것도 저희가 얻었어요. 저희가 웹뷰를 많이 사용하다 보니까 파편화 문제가 심각하거든요. 안드로이드 같은 경우는 심하잖아요. 웹뷰는 더 심해요. 왜냐하면 웹뷰 브라우저를 업데이트 안 할 수도 있다 보니까 파편화가 심한데. 아이러니하게도 저희가 통계를 제대로 집계하고 있지 않았기 때문에 타팀 IOS팀에 가서 접속하는 저희 브라우저 OS 정보는 어떤가요? 반문하는 안 좋은 상황이 있어요. 여러 가지 통계 데이터도 저희가 활용하고 있습니다.
이건 아까 말씀드렸던 트랜젝션 레이어인데요. 안드로이드랑 IOS에서 리퀘스트를 처음에 날립니다. 가상의 레이어를 하나 만들었어요. 특별한 건 아니고요. 단순히 유니크한 트랜젝션 ID를 만듭니다. 그다음에 장고로 리퀘스트하고 장고가 아자르 API 요청할 때마다 헤더값을 포워딩하고 디버깅할 때는 예를 들어서 하나의 트랜젝션 ID를 가지고 검색하면 사용자 시나리오를 알 수 있게 됩니다.
저희가 아이템 보관함이라는 게 있어요. 사용자가 이 페이지에 들어와서 할 수 있는 에이젝스 콜이 있겠죠. 같은 트랜젝션 ID를 공유합니다. 센트리에서 찾을 수 있어요. 이걸 가지고 저희가 비코리에서 검색하게 되면 그 사용자가 어떤 페이지에서 들어왔고 시간 순서대로 확인할 수 있습니다. 굉장히 많은 걸 이걸 통해 얻게 됐는데요. 추가적으로 말씀드릴게요.
장고에서 로깅한 거에서 조금 더 말씀드리면 여러 가지 제약 조건으로 인해 빨리 로깅을 개선해야 하는 상황이었기 때문에 싱크하게 로깅하고 싶지만 많은 인프라를 세팅하고 싶지는 않았어요. 장고에서 리퀘스트 피니싱이라는 게 있는데. 두 번째로는 시그널 핸들러에서는 리퀘스트랑 리스폰스를 아규먼트로 받지 않아요. 리퀘스트 클래스 데이터 안에다 저희가 활용하게 되고 나중에 제대로 삭제되지 않는 리퀘스트를 삭제하면 좋지 않을까 하는 아이디어도 있었습니다.
리퀘스트 파이썬 라이브러리 많이 사용하잖아요. 중요한 게 두 가지라고 생각하는데 타임아웃이라는 아규먼트가 중요하다고 생각해요. 특히 마이크로서비스 하는 회사에서는 타임아웃 아규먼트를 넣어줘야 한다고 생각하고요. 정상적으로 인셉션 처리하는 걸 고민했고 저희가 케이스별로 로깅을 따로따로 하는 그렇게 저희가 개발하게 됐습니다.
저희가 그래서 얻은 게 뭐냐면 디버깅 시간이 굉장히 많이 줄었어요. 라이브 장애 혹은 스테이지에서 장애가 나고 문제가 생겼을 때 어디서부터 뭘 봐야 할지 명확하게 알게 됐어요. 문제가 생기면 센트리에서 보고 사용자의 시나리오별로 모든 게 다 확인이 가능하기 때문에 저희가 디버깅 시간과 장애를 아는 데 굉장히 많은 도움을 얻었습니다. 또한 중간에 네트워크콜이 가게 되죠. 저희도 다른 팀에 가서 혹시 이 API 몇 분 몇 초에 날렸는데 확인할 수 있을까요? 그런 걸 협의하게 되잖아요. 아자르 같은 경우는 어마어마한 트래픽을 받고 있기 때문에 모든 걸 로깅하지 않거나. 저희가 필요한 로깅을 찾기 어려운 경우가 발생했어요. 그런 걸 대비해서 많은 것을 저희 쪽 의존성 있다고 생각하는 부분은 저희가 로깅해서 의존성이 적어졌어요.
반대로 타팀에 저희는 이 퀘스트는 정상인 거 같은 데 다른 거 봐 주세요. 효율적인 커뮤니케이션을 하게 됐습니다. 저희가 전체적으로 이런 로깅을 개선하면서 배웠던 건 로깅은 사실 아무리 강조해도 지나치지 않은 것 같아요. 로깅은 너무 중요하다고 생각하고요. TMI라고 생각할 수 있겠지만 그리고 로깅할 때 혹은 인프라를 구축할 때 귀찮아 할 수 있고 이렇게까지 해야 하나 생각 들 수 있는데 디버깅하면서 장애 대응하면서 저희가 볼 수 있는 건 로깅밖에 없다고 생각하거든요. 잘 활용하면 여러분의 퇴근시간을 단축할 수 있는 환경이라고 생각합니다.
중간 정도의 로깅 인프라를 개발했는데 어떻게 저희가 로깅할 건지 전략적인 것도 초반에 생각하는 게 좋다고 생각합니다. 부가적인 건데 타팀과의 의존성 말씀드렸잖아요. 확실히 우리 팀이 할 수 있는 건 우리가 하고 타팀이 할 수 있는 건 타팀이 하는 게 좋은 것 같아요. 아무래도 의존성이 생긴다는 건 좋은 건 아니라고 생각하기 때문에. 저희가 이후에는 사실 조금 더 개발 외적이기는 하지만 통계 관련 활용하고 있습니다.
저희가 다이나믹한 스태튜스 페이지를 자체적으로 개발하려고 하고 있어요. 지난 5분 동안 특정 API에 대해서 200, 400, 500대 비율은 어떻게 되는지 사내에서 사용할 수 있는 거. 그걸 저희가 배포 직후 적극적으로 활용해서 본다든가 그런 식으로 저희는 개선하려고 노력하고 있습니다. 마지막으로 저희가 적극적으로 파이썬 개발자를 채용하고 있어요. 저희팀이랑 같이 아자르 어드민 개발하실 분, 머신러닝 유기적으로 개발하고 있는 게 있어요. 전사에 사용할 수 있는 리포트, 리뷰 시스템을 개발하고 있는데 저희가 워낙 큰 서비스다 보니까 굉장히 많은 수요가 있거든요. 이런 거 리포팅 리뷰 백오피스를 같이 개발할 파이썬 개발자들을 적극 채용하고 있습니다. 관심 많이 가져 주시고요.
마지막으로 발표 관련해서 질문 받도록 하겠습니다.
-질문해주실 분은 중앙에 있는 스탠딩마이크에 오셔서 질문 짧게 부탁드립니다. 감사합니다.
-발표 잘 들었습니다. 두 가지 질문 드리고 싶은데요. 하나는 새니타이즈를 할 때 개별 장고 뷰별로 리스폰스가 다르잖아요. 미리 다 정해놓고 뷰마다 그걸 어디 명세화해놓고 적용하나요?
-지금은 사실 웹뷰 API가 많지 않아서 비효율적이기는 하지만 키값을 많이 가지고 있어요. 리스폰스를 가지고 싹 다 검사합니다. 새니타이즈에 해당하는 값이 있으면 밸류를 새니타이즈 사용하는 방식을 사용하고 있고요. 뷰별로 구분돼 있지는 않습니다. 저희가 아직 레벨이 깊은 상태가 아니라서. 정확히 말씀드리면 TXID가 리퀘스트 헤더로 들어왔기 때문에 따로 달고 다니지 않고 필요하면 리퀘스트를 꺼내 사용하는데 아까 말씀드렸던 것처럼 저희가 글로벌 쪽으로 가져올 수 있게끔 세팅해놨어요.
-발표 잘 들었습니다. 저는 하규태라고 하고요. 저도 두 가지 정도 여쭤보려고 하는데 첫 번째는 사실 로깅을 아자르 같은 큰 서비스로 운영하다 보면 로깅에서 사소하지만 중요한 문제가 로그 로테이션 어떻게 할 거냐잖아요. 거기에 대해서 특별한 아자르 서비스에서 방식이 있을까요?
-안타깝게도 저는 웹뷰 쪽만 담당하다 보니까 아자르에서 어떻게 로테이션하는지는 잘 모르고요. 저희 팀은 지금은 스텍 드라이버로 이동하고는 진행하지 않고 있고요. 모든 로그를. 따로 로테이션하거나 그렇지 않습니다. 스트리밍 형식으로 전송하고 있기 때문에 분리하고 있지 않습니다.
-두 번째는 사실 로컬에서 발생한 로그도 수집한다고 하셨잖아요. 그런 경우 네트워크 오버헤드가 많이 걸릴 수도 있을 것 같은데 그런 거 관련해서는 문제가 없으셨는지.
-부가적으로 데이터가 많이 쌓일 수 있는데 스택 드라이버 적재가 정확히는 기억 안 나는데 보름 정도 되고 있고 로컬 같은 경우는 아카이브하지 않아요.
-로깅한다고 그러면 로깅을 통해서 성능 문제나 이런 걸 대응하고 있는지 여쭤보고 싶고요. 대응한다면 웹뷰 같은 경우는 특히 성능 쪽으로 문제가 많이 있을 텐데 어떻게 해결해가시는지 간단히 묻습니다.
-성능 관련된 건 첫 번째 답변을 드리면 저희가 아자르라는 서비스가 크고 리퀘스트가 많은데 아자르 웹뷰 페이지는 엄청나게 많지 않아요. 성능 문제까지 발생하는 정도의 문제는 사실 겪지 못했고요. 다만 저희가 장고 쪽에서는 큰 문제가 없었는데 넥스트 J에서는 사실 성능 이슈가 발생하고 있었어요. 저희 쪽에서 필요 없는 스테틱한 거 뺐고 부가적으로 유저 에이전트 헤더값을 활용해서 필터링한다든가 그런 식으로 하고 있는데 훨씬 큰 트래픽 받는 상황은 아니다 보니까 경험하지는 못했습니다.
-두 번째 질문은 성능 문제를 겪었다면 어떻게 해결하는지 그런 거 물어봤는데 아직 겪고 있지 않다고 하니까 없는 것 같습니다.
-부가적으로 다른 이야기이기는 하지만 여러 가지를 활용할 수 있는 환경이다 보니까 GCP 같은 걸 활용할 수 있게 된 것 같아요. 성능 문제가 발생했으면 신중하고 다르게 고도화된 시스템을 활용하지 않았을까 생각합니다.
-로그 추적하고 수집하는 프로그램을 직접 다 개발하셨는데 배제한 이유가 웹뷰에서 안 됐기 때문에 배제하고 직접 검토하셨는지.
-정확히 어떤 걸 말씀하시는 거죠?
-로깅을 추적하기 위해서 웹뷰에서부터 코어까지 어떤 로그가 어떻게 연결되고 그걸 어떻게 하기 위해서 시스템을 개발하셨는데 마이크로서비스에서 사용하는.
-그런 것까지 검토하지 않았고 저희 입장에서는 빠른 시간 내에 효율적으로 로깅을 확인할 수 있는 인프라를 갖추려고 저희가 리서치했던 거고 말씀하셨던 라이브러리까지는 고려하지 않았습니다. 저희가 굉장히 작고 유연한 팀이다 보니까 저희가 고려했던 AWS 저희 웹뷰에서는 충분한 레벨로 커버 가능할 거로 생각했기 때문에 이렇게 구축하게 됐습니다. 발표 들어주셔서 감사하고 하이퍼커넥트 관심 많이 가져주시면 감사하겠습니다. 감사합니다.
-발표 시간이 종료되어서 세션을 마무리하도록 하겠습니다. 지금까지 발표해주신 하이퍼커넥트 용현택, 이준영 님께 큰 박수 부탁드립니다. 추가로 더 궁금하신 분들은 스폰서 부스 하이퍼커넥트 부스를 찾아주시면 되겠습니다. 지금부터 11시 55분까지 쉬는 시간을 갖겠습니다.