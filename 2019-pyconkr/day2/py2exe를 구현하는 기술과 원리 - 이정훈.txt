https://youtu.be/RFCvDYY-VDM

-안녕하세요? 발표를 시작하도록 하겠습니다. 이번 세션에서는 이정훈 님께서 파이2exe를 구현하는 기술과 원리 발표를 해주시겠습니다. 모두 큰 박수 보내주시기 바랍니다.
-안녕하세요? 발표 시작하도록 하겠습니다. 파이썬은 인터프리터 언어죠. 이게 의미하는 바는 파이썬 코드를 실행하기 위해서는 파이썬 스크립트를 실행해줄 파이썬 런타임이 필요하다는 얘기가 됩니다. 그래서 보통 파이썬으로 작성한 코드를 수행하기 위해서는 다음과 같은 절차들이 필요합니다. 일단 적절한 버전의 파이썬 런타임이 사용자 PC에 설치돼야 하고 필요한 패키지가 설치돼야 합니다. 보통 PIP로 설치할 텐데요. 뭐가 필요한 게 많습니다.
그리고 적절한 방법으로 코드를 수행시켜줘야 해요. 파이썬 인터프리터를 실행하고 보통 보편적인 프로그램 실행과는 조금 다른 절차를 겪게 되죠. 저희 같은 개발자에게는 아무런 문제가 되지 않는데 일반 사용자에게 파이썬으로 짠 코드를 배포해서 실행하게 하는 거라면 이 절차들이 굉장한 허들이 되게 됩니다.
예를 들어서 제가 파이썬으로 간단한 스크립트를 찾아서 제 친구에게 설치를 해줬어요. 그런데 얼마 후에 안 된답니다. 확인해보니 파이썬 자체를 삭제했더라고요. 모르는 거예요. 일단 사용자들은 저희 개발자들은 당연한 것이 당연하지 않은 게 있다 보니.
일단 사용자로 배포가 목적이 되면 이런 작업을 자동으로 실행해주는 프로그램이 필요하게 됩니다. 당연히 이런 수요가 있다 보니 파이썬에는 이미 이러한 목표를 달성하기 위한 다양한 솔루션들이 이미 존재하는데요. 셰드 스킨이나 누이츠카처럼 원래 이런 목적을 해결하기 위한 게 아닌데 이 두 가지 제품은 트랜스파일러예요. 파이썬 코드를 기기어 코드로 컴파일러해서 실행시킬 수 있도록 C언어 코드로 변환해주는 코드들이에요.
그런 제품을 이용해서 단독 실행파일로 바로 변환이 가능하죠. 그리고 파이인스톨러나 cx_Freeze 파이썬 코드나 파이썬 인터프리터를 별도로 설치하지 않고 패키징해주는 것도 있습니다. 이름에서 보다시피 굉장히 직관적이죠. 이 제품은 윈도우 전용이기는 한데요. 파이2exe가 어떻게 앞에 있는 절차 없이 단독 실행파일로 배포 혹은 실행될 수 있게 만들어주는지 동작과 구현 원리를 오늘 공유드리고자 발표를 준비했습니다.
하나씩 어떤 식으로 해결했는지 살펴보겠습니다. 파이썬 런타임을 설치해야 하는데요. 파이썬 코드를 실행하려면 이 부분을 어떻게 해결해야 하는지 한번 보겠습니다. 사실 볼 것도 없이 원래 저희가 보편적으로 생각하는 설치, 이런 절차 없이 파이썬은 인터프리터는 실행이 가능합니다. 파이썬 정확하게 C 파이썬이죠. 파이썬 홈페이지 다운로드 페이지 보면 MSI나 이런 인스톨러 말고도 빨간색으로 박싱해놓은 게 있어요. 이걸 받아서 압축파일 내용을 보면 이런 식으로 구성돼 있는데 별도의 설치 없이 이 구성요소들이 있으면 기본적으로 파이썬 인터프리터는 동작합니다.
다만 파이썬 설치폴더를 한번 보신 분들은 조금 구조가 다른 걸 눈치챘을 텐데요. 파이썬이 구동되는 데 필요한 런타임 라이브러리는 전부 저기 보이는 파이썬 37, 버전에 따라 이름은 바뀌는데 파이썬37.zip라는 zip 파일에 압축돼 있습니다. 압축돼 있는 모듈들은 파이썬의 빌트인 모듈은 집임포트라는 모듈로 구동 가능한데요.
기본적으로 파이썬 라이브러리와 같은 이름의 zip 이름이 기본적으로 존재합니다. 같은 이름의 파이썬 라이브러리 이름과 동일한 이름의 zip 파일을 만들어서 거기다 실행에 필요한 것들을 다 넣어두면 기본적으로 별도의 설치 없이 파이썬 코드를 실행할 수 있죠. 이 zip 임포트가 오늘 실행드릴 py2exe 구현의 핵심입니다. 앞으로 계속 이야기 나올 텐데요. 일단 시시하게 해결했습니다.
그러면 어떻게 내가 작성한 코드를 바로 exe 클릭하면 수행하게 할 수 있는지도 잠깐 보겠습니다. 파이썬 홈페이지에 있는 예제 코드예요. 임베딩 예제 코드인데 실제로 저희가 파이썬 인터프리터를 구동할 때 쓰는 것은 파이 메인이라는 함수를 그냥 호출하는 역할만 하고 있습니다. 즉 파이썬 인터프리터를 기능을 사용하고 싶다면 파이썬 라이브러리 아까 37.dll에 제공되는 ** 파이썬 인터프리터를 그대로 구동할 수 있습니다. 실제 py2exe에서는 이렇게 돼 있지 않은데요. 어디에 넣어두고 어떻게 실행하는지는 뒤에서 보도록 하겠습니다.
그러면 파이썬 런타임도 딱히 설치 안 해도 되고 적절한 방법으로 코드를 exe 누르면 내가 작성한 코드 실행되게 할 수 있는데 하나가 남습니다. 필요한 패키지의 설치는 어떻게 없이 바로 할 수 있을까. 사실 간단하게 생각하면 pip로 모조리 설치한 다음에 통째로 배포하면 되는데 PY2exe는 스마트한 방법으로 필요한 모듈만 배포할 수 있는 기능을 제공해주고 있습니다.
그렇다고 다른 뭔가 기능을 사용하거나 그런 건 아니고요. 원래 파이썬 스탠다드 라이브러리에는 모듈 파인더라는 모듈을 제공하고 있습니다. 이름 그대로 모듈을 찾아줘요. 이 스크립트가 필요로 하는 종속성을 갖는 리스트를 볼 수 있고 모듈파인더의 기능을 약간 수정해서 사용하고 있습니다. 어떤 원리로 필요한 모듈들을 찾아내는지 한번 보도록 하겠습니다.
디서셈블러 모듈을 이용해서 임포트os 화면과 같은 결과가 나오는데 임포트 스크립트에 대해서 여기에 대응하는 파이썬 바이트코드들이 임포트 네임이 하나 나오는 일정한 패턴을 가지게 됩니다. 조금 더 자세히 보면 해당 코드를 컴파이브에 실제 인스트럭션 코드 출력해보면 op 코드 100번이 108번이 임포트 네임입니다. 파이썬 바이트 스트림에서 100, 100, 108번 나오는 패턴을 찾아내면 임포트 부분이라는 걸 확인할 수 있고 OP코드 108번, 어떤 모듈을 임포트하려고 시도하는지 확인할 수 있습니다.
그래서 실제 파이썬 코드에 있는 구현을 제가 참고해서 예제로 하나 만들어본 건데요. 아까 말씀드린 임포트 os 하는 케이스가 되겠죠. os 모듈에 사용하는 모듈을 출력하도록 이렇게 만들어보면 오른쪽 황금색 박스와 같이 실제로 종속성을 가지는 모듈 리스트를 뽑아낼 수 있습니다. 이렇게 모듈들을 뽑아내고 임포트 라이브러리에 함수를 이용해서 모듈이 존재하는 파일의 실제 경로도 확인할 수 있습니다.
그렇게 해서 종속성을 가지는 모듈들의 경로를 알았으니 이걸 복사할 수 있겠죠. 아까 말씀드린 파이썬37.zip 같은 zip파일에다 컴파일해서 넣어주면 수행되겠죠. 그리고 모듈 경우에는 모듈 이름이 나오고 패키지인 경우에는 두 번째 예시처럼 이닛.py가 생성돼서 넣어두면 되고 시스와 같이 빌트모듈 같은 경우는. 그걸 통해서 이건 넣을 필요 없이 파이썬만 있으면 돌아가는 거니까 굳이 넣을 필요 없다는 걸 확인할 수 있습니다.
그러면 제가 만든 스크립트에서 종속성을 가지는 모듈들 찾았고 파이썬37.zip에다 밀어넣는다고 생각해보죠. 그럼 얼추 끝날 것 같은데 화면을 보면 몇 가지파일들이 더 나와있는 게 보여서 확장자가 pyd로 돼 있는데요. pyd 파일은 C파이썬 C확장 파일들입니다. 확장이라고 번역돼 있는데요. 문서에 나와있다시피 pyd 파일들은 dll 파일들입니다.
파이썬 모듈일 텐데 왜 zip파일에 못 넣고 나와 있을까요? zip 임포트 모듈에 대해서 문서를 보면 py파일과 pyc파일만 임포트할 수 있다고 나와요. zip임포트는 허용되지 않는다고 나옵니다. 왜 안 되냐면 다른 이유가 있는 게 아니라 윈도우에서 제공하는 dll 파일을 로드하기 위한 윈도우 API에 이 두 가지 모두 로컬 디스크에 저장된 dll 파일만 호출할 수 있게끔 인터페이스가 나와 있어요. dll 파일이 집에 들어가 있는 경우는 압축해제해서 로드할 수 있다는 얘기죠.
여기서 PY2exe와 사실 요즘 이런 류의 프로그램 중에서는 제일 많이 쓰는 파이 인스톨러의 차이가 여기서 나옵니다. 파이 인스톨러 경우에는 이런 문제 그리고 다른 이슈들도 있지만 이 이슈 때문에 임시폴더에다 필요한 모듈들을 압축해제를 우선 한 다음에 그리고 코드를 실행하는 구조를 가지고 있고요. PY2exe는 조금 더 다른 방법으로 별도의 압축해제 없이 메모리상에서 바로 로드하는 방법을 쓰고 있습니다.
사실 이 부분이 굉장히 재미있고 흥미로워서 제가 발표를 준비하게 됐는데요. 한번 자세히 설명드리도록 하겠습니다. 일단 문제를 조금 더 세분화해보겠습니다. 일단 아까 보셨다시피 zip임포트는 py파일을 임포트할 수 없다고 돼 있죠.
임포터가 pyd 파일을 임포트할 수 있게 된다 해도 dll파일은 윈도우 시스템 자체가 메모리상에서 로드할 수 없어요. 어떻게 로드할 수 있는가 이 두 가지 항목으로 나눠서 설명드리겠습니다.
일단 파이썬 도큐먼트에 보면 임포트 프로토콜에 대해서 자세히 설명돼 있는데요. 파인더와 로더를 구현하면 임포터가 되고 절차가 확장 가능하다고 나와 있습니다. PY2exe에 있는 실제 코드인데요. 불필요한 건 제가 하고 제가 붙여놓은 건데. 확장자가 C익스텐션이라고 돼 있으니까 pyd에 zip 임포터에서 파일 목록이 저장되고 pyd 파일도 있다. 있다면 셀프로 리턴합니다. 로더로 자기 자신을 리턴하게 되는데 로더를 찾았기 때문에 임포트 프로토콜이 동작하게 됩니다. 이렇게 임포터를 만들고 세부 구현은 뒤에 가서 다시 다룰 거예요.
새로 구현한 익스텐션 임포터를 어떤 식으로 적용하냐면 파이썬 문서에 보면 임포트 훅을 하는 방법에 대해서 설명돼 있는데요. 두 가지 방법이 있는데 임포트 패스 훅을 사용하고 있습니다. 캐시를 클리어하면 zip 익스텐션 임포터가 동작하게 됩니다. 임포트 구문이 나오면 확장한 임포터가 동작하게 되죠. 실제로 시스 패스 훅스 내용을 출력해보면 원래 0번째 엘리먼트가 zip 임포터로 돼 있는 걸 확인할 수 있습니다.
그러면 이제 임포터는 어떻게든 되게 만들었고. 문서에 보면 C파이썬의 C확장은 초기화 함수를 내보내는 라이브러리라고 돼 있는데요. pyd 파일을 임포트 C확장을 임포트하게 되면 나오는 절차는 단순하게 두 가지만 수행하게 돼요. dll 파일을 앞서 설명한 로드 라이브러리로 로드하고 로드된 영역에서 겟 프로시저 어드레스, 초기화 함수를 찾아서 실행하게 됩니다. 초기화 함수는 예를 들어 이 모듈이 zip 임포트다, 앞에 파일 이미지. 모듈 이름으로 구성돼 있습니다.
그럼 일단 임포트 함수 사실 임포트 과정을 잠깐 잊고 궁극적인 목표는 초기화 함수를 호출하기만 하면 리턴값으로 파이 오브젝트를 받을 수 있으니 임포트할 수 있는데요. 함수 코드를 그러면 찾아야겠죠. 어떻게 zip 파일에서 초기화함수 코드를 찾는지 보겠습니다. 겟 데이터라는 함수 하나를 제공하고 있는데요. 경로를 넣어주면 그 경로에 있는 zip파일 내부의 경로입니다. 임포트할 때 그 경로에 닷을 뒤에 확장자를 붙이면 정확한 패스가 되겠죠. 패스 파일이 존재한다면 그 파일 데이터를 zip으로 압축돼 있을 테니 압축을 해제해서 돌려주는 함수가 존재합니다.
메모리상에서 로드하고자 하는 pyd 파일을. 이 내용을 얻고 나면 dll 파일이기 때문에 PE포맷으로 돼 있어요. 여기서 헤더 정보를 이용해서 아까 말한 초기화 함수의 위치를 찾아낼 수 있습니다. 확대해서 보면 왼쪽 하단부에 보면 익스포트라고 헤더 부분에 굵은 글자로 돼 있는데요. 익스포트 데이터, DLL에서 내보내는 함수 목록이 어디에 저장돼 있는지 확인할 수 있고 따라 가 보면 함수 이름과 이름에 매칭되는 함수 코드가 어디에 저장돼 있는지 상세 주소가 나와 있어요. 주소도 알았고 dll에서 메모리로 올렸으니 수행하면 초기화 함수로 시행되겠죠.
프로세스 코드섹션에 있는 코드가 아니라. 그걸 윈도우에서는 버추얼 프로텍트라는 함수를 이용해서 메모리 영역 속성이 익스큐트 속성되면 메모리를 바로 실행할 수 있습니다. 악성코드들이 즐겨 사용하는 방법이고요. 기본적으로 스텍에 있는 코드는 수행하려고 하면 수행을 OS가 차단합니다. 제가 간단하게 예시코드를 작성해봤는데요. 수행될 코드는 오른쪽 황색 박스에 함수를 하나 만들어본 건데요. 단순히 숫자 5를 리턴하는 함수인데 일반적인 함수를 만들게 되면 스탯프레임 생성과 해제 코드가 들어가서 PPT에 넣기는 적절하지 않아서.
그 코드는 오른쪽 황색 박스 바로 왼쪽에 보면 코드라고 돼 있는 저 바이트 코드들이고. 메모리 영역에 대해서 버추얼 프로텍트 익스큐트 추가해주고. 그러면 실제로 단순한 방법들인데요. 이렇게 메모리상에 있는 코드를 정확하게는 zip파일에 있는 내용을 로컬폴더에 쓰지 않고 메모리에서 수행할 수 있는데 이렇게 단순하지는 않고 실제로 dll을 로드하는 과정, 로드 라이브러리에서 수행하는 것들은 굉장히 많습니다.
특히 임포트 섹션 로드할 dll의 임포트 섹션에 있는 다시 로드하는 것. 파이썬C 확장의 경우에는 당연히 파이썬 라이브러리에 대한 종속성을 가지겠죠. 어떻게 찾아갈지에 대한 정보를 다시 다 기록해줘야 합니다. dll이 한두 개가 로드돼 있는 게 아니기 때문에 프로세스 메모리 어느 위치에 들어갈지에 대한 부분도 다시 재정리해줘야 하고 dll 메인에다 코드를 넣은 경우도 있기 때문에 해줘야 할 게 많습니다.
이런 작업들을 PY2exe 개발자는 메모리 모듈이라는 오픈소스를 이용해서 쉽게 해결했는데요. 블로그에 가보면 토머스 헬러가 메모리 모드를 PY2exe에서. PY2exe뿐만 아니라 파이썬에서 많이 쓰셨을 텐데요. 그래서 메모리 모듈을 이용해서 pyd 파일을 읽어올 수 있게 됐어요. 나머지 남은 임포트 절차를 보겠습니다. 파인더를 통해서 로더를 찾았고 로더는 실제로 모듈을 찾고 로드하는 역할을 수행해줘야 합니다. 파인드 모듈이라는 함수를 재정의해서 zip임포트에서 모듈 파인드하면 당연히 실패하겠죠. pyd는 로드를 못 하니까요.
만약 이게 실패했다, 그러면 pyd 패스를 다시 한번 찾아서 존재하면 셀프 리턴, 로더를 돌려주게 되고 실제로 로드모듈 함수를 재정의해서 아까 설명드렸던 이닛 함수 이름을 모듈을 가지고 세팅하고 이것과 아까 파일의 데이터가 필요하니까 셀프 겟 데이터, 이 두 가지 개체를 메모리 모듈을 이용해서 네이티브 코드로 만들어져 있어요. 이 부분을 호출하게 구현해뒀습니다.
이로써 pyd파일을 zip파일에서 압축해제 없이 디스크에 저장 절차 없이 바로 로드할 수 있게 구현해놨습니다. 그러면 아까 목록에서 pyd 파일도 파이썬37.zip에다 집어넣을 수 있겠네요. 파이썬 내가 작성한 파이썬 코드를 파이썬37만 있으면 수행할 수 있겠죠. 그런데 하나가 아직 남았습니다. 파이썬37.dll. 라이브러리 자체가 남아있죠. 기본적으로 파이썬 인터프리터는 이 파일과 같이 배포돼야 해요. PY2exe는 파이썬37.dll을 PE파일에서 RSC 섹션인데요. 메모리 영역이기 때문에 이걸 아까 설명드린 메모리 모듈로 로드해서 사용하고 있습니다. 소스 데이터 영역은 보통 아이콘이나 아니면 버전 정보 그 외 이미지 데이터나 이런 걸 저장해두는데 exe파일의 구성요소가 되죠.
별도의 dll을 딸려보내지 않고 exe 내부에다 dll을 저장해두고 메모리 모듈로 불러서 사용하고 있습니다. zip파일이 남아 있어요. 이걸 어떻게 하나의 파일로 합치나 보겠습니다. 간단하게 해결하고 있는데요. zip파일 구조가 원래 헤더 정보가 앞에 있지 않아요. 파일의 끝 지점에서 존재하기 때문에 실제로 zip임포터 구현물을 보면 파일의 맨 마지막부터 역으로 찾아와서 로드하고 있습니다. 즉 이걸 그대로 활용해서 PY2exe에서는 실행에 필요한 모듈을 모두 넣어둔 zip파일을 그냥 exe파일 뒤에다.
실제로 보면 PY2exe로 만든 샘플인데요. 임포트 시스를 해서 시스패스를 출력하게 한 다음에 실행한 결과가 오른쪽 황색 박스인데요. 파이썬이 모듈을 찾을 때 뒤지게 되는 경로가 exe 하나만 들어가 있죠. 하나만 넣어두면 별다른 절차나 조치 없이도 zip임포터가 뒤에서부터 찾기 때문에 exe파일 뒤에다 zip파일을 붙여두면 자동으로 임포트해서 수행할 수 있게 됩니다.
그래서 여기까지 오면 파이썬 코드를 실행에 필요한 모듈들과 함께 exe파일 하나로 싹 다 모을 수 있게 되고 이걸 배포하면 exe 파일만 실행해도 동작하게 되죠. 제가 준비한 내용은 여기까지입니다. 여기서 발표하는 자리에 와서 여러분 보고 있으니 굉장히 부러워요. 제가 무슨 부귀영화를 누리자고 발표하겠다고 해서 준비했는지 모르겠는데 제가 사정이 있어서 늦게 왔더니 스티커 티셔츠도 사이즈가 안 맞아서 숨이 막혀요. 발표를 제대로 했는지 잘 모르겠습니다. 실수가 있었어도 양해해 주시고 하나라도 뭔가 도움 되는 내용 듣고 가셨으면 더할 나위 없이 감사하겠습니다. 질문 받고 끝내겠습니다. 감사합니다.
-안녕하세요? 발표 너무 잘 들었습니다. 상용 프로그램을 PY2exe를 써서 exe파일로 만들어서 배포할 때 라이센스 정책 때문에 생기는 문제는 없을까요?
-사실 PY2exe 자체 라이센스가 있고 파이썬 자체 라이센스가 있어서 상용프로그램으로 할 때 사실 애시당초 파이썬 코드 자체는 이런 식으로 PY2exe로 패키징해도 소스 자체는 노출된다고 보셔야 합니다. 그래서 라이센스 때문에 코드 자체는 공개해야 할 거예요. 그것뿐만 아니라 오늘 발표에서는 제가 언급하지 않았는데 상용서비스에서 활용하기에는 몇 가지 해결할 문제가 있습니다.
PY2exe의 경우 아까 제가 zip파일을 exe파일 뒤에. 이 때문에 디지털 서명을 하면 로드가 안 돼요. 일반 사용자에게 배포하기 위해서는 디지털 서명을 하는 게 필수적인데 서명하면 PY2exe가 동작하지 않게 됩니다. 그래서 만약에 상용 프로그램이나 이런 류로 쓰실 거라면 PY2exe보다는 파이 인스톨러를 조금 더 추천드립니다.
-감사합니다.
-질문 이어서 하기 전에 안내말씀 드릴게요. 40분까지 질의응답 진행할 예정이고요. 질문 마치신 분은 뒤에서 책 받아가시기 바랍니다. 원활한 진행과 답변을 위해서 질문은 짧게 한두 개만 부탁드립니다. 감사합니다.
-이전 분 질문한 거랑 유사한데요. 저희가 상용프로그램은 만들고 배포하고 있는데 일단 저희가 eula라고 라이센스를 써서 기존에 있는 exe 만드는 라이센스에 저촉되더라고요. 조금 눈물겹게 배치파일로 배포하고 있는데 혹시 라이센스에서 조금 상업적으로 제약이 안 걸리는 프로젝트가 있는지 아니면 진행하고 계시는 게 있는지 알 수 있을까요?
-제가 오늘 발표드린 내용 자체는 저 개인적으로 준비한 내용이에요. 준비하고 있거나 이런 건 아니고 상업적으로 쓰이기 위해 간단한 건 원리들에 대해서는 설명드렸고 독자적이거나 그런 건 아니거든요. 문서에 있는 것들이고 그래서 직접 아예 파이썬 코드를 실행시키는 익스큐터를 자체적으로 구현해서 배포하는 것도 방법이 될 것 같습니다. 사실 그렇게 코드가 많이 필요하고 그런 건 아니거든요. 혹시 답변이 부족할까요?
-저희가 심각하게 고려해서 C 로 리팩토링을 하려다가 주제 강의가 있어서 듣고 고민했는데 두 방법 다 시간 많이 걸릴 것 같네요.
-오픈소스를 사용하면 라이센스 문제가 항상 문제가 되잖아요. 특히 코드를 라이센스 문제가 문제가 되더라도 우리 쪽 코드를 공개하는 데 상관없으면 문제는 아니에요. 프로세스에 묶여서 돌아가는 모든 코드를 공개하기만 하면 되거든요. 그래서 코드를 공개할 수 있는 경우라면 사실 저렇게 오픈된 솔루션들을 사용하는 게 문제가 안 될 거고 오픈해서는 안 된다는 경우라면 개인적으로는 서브 클라이언트 구조를 추천드리고 싶습니다. 꼭 클라이언트에서 수행돼야 하는 것들은 클라이언트에 보내고요. 도움이 됐다면 다행입니다.
-안녕하세요? 저는 개인적으로 프로그램 만들고 배포하려고 하는데 여태까지 배치하려고 하는데 exe로 하려고 하는데 PY2exe랑 파이 인스트롤러랑 사용하신 것 중에 뭐가 괜찮고 장단점을 빠르게 말씀드릴 수 있으면 감사하겠습니다.
-제가 PY2exe에 대해서 발표하긴 했는데 대세는 파이 인스톨러예요. PY2exe는 더 이상 개발되고 있지 않고 파이썬3.7을 사용할 수 없어요. 파이 인스톨러 경우는 파이썬 최신도 지원하고 리눅스나 맥으로도 빌드가 가능하거든요. 둘 중 하나를 고르라고 한다면 저는 기본적으로 파이 인스톨러를 추천드립니다. 개발이 계속되고 있다 보니 이후에 다른 버전이 나와도 대응할 수 있죠. 단지 제가 오늘 발표에서 PY2exe를 고른 건 기술적으로 재미있고 흥미롭게 풀었기 때문이에요.
다만 그걸 솔루션을 어느 걸 쓰고 싶냐고 물어보면 파이 인스톨러를 강력하게 추천드립니다.
-exe로 만드는 건 파이썬을 잘 모르는데 복잡한 것 같아요. 그런데 아이디에서 기본적으로 제공되면 간편하게 될 것 같은데 그런 부분이 예를 들어서 많이 쓰잖아요. 그런 게 제공되는 아이디가 있나요?
-일단 제가 아는 한은 없습니다. 왜 그러냐면 사실 파이썬 코드로 굳이 클라이언트 애플리케이션을 만드는 게 많지 않더라고요. 오늘 발표에서도 사실 이 주제는 비주류라고 개인적으로 생각합니다. 다들 서버나 웹서비스 만드는 데 파이썬을 많이 쓰죠. 재산성에 있어서 클라이언트로 해서 생산성이 희석되는 건 아니기 때문에 클라이언트 애플리케이션을 만들 때 니즈가 있어서 이런 제품이 있는 건데 아이디가 통합돼서 자동으로. 파이썬 코드를 pyc로 빌드한다든지 과정과 PY2exe로 만드는 스크립트 같은 걸 조합해서 빌드할 때 이벤트 같은 거로 만들어서 그렇게 하게끔 기존 아이디에 통합하는 건 어렵게 할 수 있지 않을까 생각합니다.