1
00:00:01,700 --> 00:00:08,250
아 그럼 시작 해도 되나요 안녕하세요

2
00:00:08,250 --> 00:00:10,020
이번 파이콘 2019

3
00:00:10,020 --> 00:00:13,660
키스톤 스폰서 시험 발표 받게 된 안석찬 입니다

4
00:00:13,660 --> 00:00:17,720
파이콘 마지막 시간까지 남아 귀신으로 되게 고생들 많으신데

5
00:00:17,720 --> 00:00:20,160
끝까지 3시간 들어와 주셔서 되게 감사하고요

6
00:00:20,160 --> 00:00:22,690
무거운 주제발표가 아닌 만큼

7
00:00:22,690 --> 00:00:24,630
다 같이 편하게 즐기면서

8
00:00:24,630 --> 00:00:27,010
마무리하는 시간이 되었으면 좋겠음

9
00:00:27,010 --> 00:00:29,510
이번 발표 주제는 waiting for

10
00:00:29,510 --> 00:00:32,160
the light 입니다

11
00:00:32,160 --> 00:00:37,060
자세한 발표주제 소개해 없어서 먼저 제 자기소개를 드릴게요

12
00:00:37,060 --> 00:00:40,010
저는 뱅크샐러드 에서 일하고 있는

13
00:00:40,010 --> 00:00:41,510
안석찬 이라고 합니다

14
00:00:41,510 --> 00:00:43,450
주로 파이썬으로 레스트풀

15
00:00:43,450 --> 00:00:46,890
api 서버를 제작하고 있습니다

16
00:00:46,890 --> 00:00:49,020
어 사실 이번 발표

17
00:00:49,020 --> 00:00:52,380
주제를 산정하기 까지 굉장히 많은 고민이 있었는데요

18
00:00:52,380 --> 00:00:55,700
아이콘의 치즈와 맞으면서 뱅크샐러드

19
00:00:55,700 --> 00:00:58,980
기술적인 모습을 보여드리기 위해 1주제로 선정하였습니다

20
00:00:58,980 --> 00:01:00,640
결론적으로 저는 오늘

21
00:01:00,640 --> 00:01:02,210
우리가 어떤 상황에서

22
00:01:02,210 --> 00:01:03,650
어떤 맵을 먹을 사용하고

23
00:01:03,650 --> 00:01:06,040
있는 지를 말씀드리려고 하고요

24
00:01:06,040 --> 00:01:08,830
또한 그 당시 기술적인 상황 뿐만 아니라

25
00:01:08,830 --> 00:01:12,040
비즈니스 상황과 함께 어떤 기술적 고민했고

26
00:01:12,040 --> 00:01:16,380
어떤 결론을 일어났는지를 시간순으로 말씀드리려 합니다

27
00:01:16,380 --> 00:01:19,710
파이썬의 다양한 프레임웍의 관심이 많으신 분이 나

28
00:01:19,710 --> 00:01:24,100
직접 개발 하시면서 각각의 의혹들의 장단점에 대해 많이 고민해

29
00:01:24,100 --> 00:01:27,160
보신분들이라면 재밌게 드릴 수 있을 것 같아요

30
00:01:27,160 --> 00:01:28,470
다시 한번 말씀드리지만

31
00:01:28,470 --> 00:01:31,260
이번 발표는 맷 데이먼

32
00:01:31,260 --> 00:01:38,080
여기가 목적이 아닌 줄 알아 주시면 감사하겠습니다

33
00:01:38,080 --> 00:01:40,190
어 뱅크샐러드 의 첫 번째 파이스

34
00:01:40,190 --> 00:01:42,560
reagan 장 구했습니다

35
00:01:42,560 --> 00:01:45,810
장군은 아직까지도 많은 사랑을 받고 있는 플스

36
00:01:45,810 --> 00:01:47,780
택배 먹이죠

37
00:01:47,780 --> 00:01:49,560
장구의 가장 큰 장점으로

38
00:01:49,560 --> 00:01:53,170
는 이렇게 기본적으로 제공하는 orm 있습니다

39
00:01:53,170 --> 00:01:55,320
이를 통해 스케줄링이 가능한데요

40
00:01:55,320 --> 00:01:58,650
스케줄링이란 데이터베이스를 사용하는 프로그램에서

41
00:01:58,650 --> 00:02:02,410
이를 기반으로 mbc 구조의 프로그램의 뼈대를 생성

42
00:02:02,410 --> 00:02:04,140
해 주는 것을 의미합니다

43
00:02:04,140 --> 00:02:05,760
따라서 이를 통하여 크루즈

44
00:02:05,760 --> 00:02:10,040
로직을 간단하게 서비스할 수 있게 됩니다

45
00:02:10,040 --> 00:02:12,880
또한 기본적으로 제공되는 어드민페이지 동안

46
00:02:12,880 --> 00:02:14,560
장점 중 하나인데요

47
00:02:14,560 --> 00:02:15,990
어드민페이지 를 통해서

48
00:02:15,990 --> 00:02:18,660
앞서 말한 통에 정의된

49
00:02:18,660 --> 00:02:23,040
데이터 모델을 편하게 수정할 수 있게 됩니다

50
00:02:23,040 --> 00:02:24,720
이러한 장점을 바탕으로

51
00:02:24,720 --> 00:02:26,200
뱅크샐러드 에서는 첫 카드

52
00:02:26,200 --> 00:02:28,940
추천 서버를 장구로 개발 하게 되었는데요

53
00:02:28,940 --> 00:02:32,420
국내에 존재하는 약 3천 6백 역에 카드를 바탕으로

54
00:02:32,420 --> 00:02:36,130
사용자에게 알맞은 카드를 추천할 수 있었습니다

55
00:02:36,130 --> 00:02:38,800
또한 카드 추천해 핵심인 우리만의 카드

56
00:02:38,800 --> 00:02:41,030
데이터베이스도 장구의 장점을 정해서

57
00:02:41,030 --> 00:02:43,040
구축할 수 있었습니다

58
00:02:43,040 --> 00:02:47,580
앞서 말한 장고의 강력한 장점들을 활용하여 약 3년간 4000여개

59
00:02:47,580 --> 00:02:49,840
정형화된 카드정보를 관리하는 cms

60
00:02:49,840 --> 00:02:51,290
서버를 관리할 수 있었고

61
00:02:51,290 --> 00:02:54,440
이를 지금까지도 사용 중에 있습니다

62
00:02:54,440 --> 00:02:57,610
아 하지 마 잔고를 사용하면서 겪은 문제가 있었는데요

63
00:02:57,610 --> 00:02:59,260
카드 추천 이유 예적금

64
00:02:59,260 --> 00:03:03,300
보관실에 추천 등의 다양한 도메인에 대한 기초가 추가되면서

65
00:03:03,300 --> 00:03:07,550
더 이상 모놀리식 아키텍처를 구성할 수 없었다는 따라서

66
00:03:07,550 --> 00:03:13,780
저희는 마이크로서비스아키텍처 서서히 전환하게 마이크로서비스

67
00:03:13,780 --> 00:03:15,420
아키텍처 란 기존 모놀리식

68
00:03:15,420 --> 00:03:18,690
아기집 좋아하는 다르게 큰 하나의 서비스를 여러 개

69
00:03:18,690 --> 00:03:20,160
독립적인 서비스 단위로

70
00:03:20,160 --> 00:03:22,530
서버를 나눠 구성하는 것을 말합니다

71
00:03:22,530 --> 00:03:26,920
하지만 장 보는 모놀리식 아키텍처에서 적합한 풀스택 prime95

72
00:03:26,920 --> 00:03:30,310
우리에게 필요한 기능 이상의 것이 많이 존재했습니다

73
00:03:30,310 --> 00:03:32,740
예를 들면 장고템플릿 같은 기능이죠

74
00:03:32,740 --> 00:03:35,190
동안 어느정도 코드 고장이 강제 되어 있어서

75
00:03:35,190 --> 00:03:38,760
비즈니스로직 구현에 불편한 약간은 있었습니다

76
00:03:38,760 --> 00:03:40,520
따라서 저희에겐 장구 보다는

77
00:03:40,520 --> 00:03:43,330
조금 더 가볍고 자유로운 것이 필요했는데요

78
00:03:43,330 --> 00:03:48,680
이러한 이유로 인해서 플라스크를 도입하게 되었습니다

79
00:03:48,680 --> 00:03:52,510
아틀라스 거는 굉장히 간단한데요 이 코드에서 보시다시피

80
00:03:52,510 --> 00:03:55,630
5줄의 코드로도 서버를 실행시킬 수 있습니다

81
00:03:55,630 --> 00:03:58,160
플러스코드 를 구성하는 법은

82
00:03:58,160 --> 00:04:01,210
플라스크로 만들어진 서버에 갯수만 많을 것이다

83
00:04:01,210 --> 00:04:05,730
라는 유명한 말이 있을 정도로 미니멀리즘을 추구하는 마이크로

84
00:04:05,730 --> 00:04:09,910
프레임업 답게 굉장히 자유로운 게 특징입니다

85
00:04:09,910 --> 00:04:13,960
또한 성숙한 에코시스템 으로부터 만에 확장성을 가지는 게

86
00:04:13,960 --> 00:04:15,400
장점 중 하나인데요

87
00:04:15,400 --> 00:04:18,160
파이썬의 대표적인 orn siam square

88
00:04:18,160 --> 00:04:20,140
one 10시부터 시작해서

89
00:04:20,140 --> 00:04:23,520
다양한 캐스팅까지 열어 가지고 있고

90
00:04:23,520 --> 00:04:27,580
이는 곧 높은 생산성을 으로 이루어지게 됩니다

91
00:04:27,580 --> 00:04:28,950
이러한 장점을 살려

92
00:04:28,950 --> 00:04:32,300
실제로 뱅크샐러드 있는 데서는 혁신금융서비스

93
00:04:32,300 --> 00:04:35,020
스위치 보험을 플라스크로 개발하였습니다

94
00:04:35,020 --> 00:04:38,400
스위치 보험은 사용자의 여행 일정에 따라

95
00:04:38,400 --> 00:04:40,340
마치 스위치를 켜고 끄는 것처럼

96
00:04:40,340 --> 00:04:42,340
뱅크샐러드 에서 간편하게 여행자

97
00:04:42,340 --> 00:04:46,470
보험을 오늘 할 수 있는 기능 인데요 있는 4월 금융위원회

98
00:04:46,470 --> 00:04:47,640
혁신금융서비스 가발

99
00:04:47,640 --> 00:04:50,390
편한지 최대한 빠르게 개발했어요 했고

100
00:04:50,390 --> 00:04:53,940
실제사용자 금융사가 네 돈을 트랜잭션이 있기 때문에

101
00:04:53,940 --> 00:04:56,460
높은 안정성이 필요했습니다

102
00:04:56,460 --> 00:05:00,600
이때 플라스크에 싱크로너스 하면 쉽게 보장할 수 있어

103
00:05:00,600 --> 00:05:02,080
많은 도움이 되어 있는데요

104
00:05:02,080 --> 00:05:04,200
마이크로페이먼트 닫게

105
00:05:04,200 --> 00:05:07,170
아키텍처 에 대한 제약이 없어 비즈니스로 작성

106
00:05:07,170 --> 00:05:08,470
이용했고

107
00:05:08,470 --> 00:05:12,740
폭넓은 모주를 다양성으로 필요한 기능들을 여러 개

108
00:05:12,740 --> 00:05:14,890
익스펜더 해서 쓸 수 있었으며

109
00:05:14,890 --> 00:05:18,090
상대적으로 적은 코드 양으로 인해 다른 개발자들도 쉽게

110
00:05:18,090 --> 00:05:21,230
코드리뷰 가능 코드리뷰를 줄 수 있었습니다

111
00:05:21,230 --> 00:05:25,710
현재 스위치 뱅크샐러드 에는 스위치보험 이외에도

112
00:05:25,710 --> 00:05:28,800
여러 가지 플라스크 서버들이 구동되고 있는데요

113
00:05:28,800 --> 00:05:33,020
특히 금융기관과 통신하는 플라스크를 사용하면서

114
00:05:33,020 --> 00:05:34,810
앞서 이야기한 높은 안정성과

115
00:05:34,810 --> 00:05:38,220
생산성을 보장하고 있습니다

116
00:05:38,220 --> 00:05:41,510
하지만 플러스 그래도 역시 문제점이 준비했는데요

117
00:05:41,510 --> 00:05:43,780
이코드는 그 중에 하나 예시입니다

118
00:05:43,780 --> 00:05:46,380
이거는 그 더 미션 인데요

119
00:05:46,380 --> 00:05:48,320
사용자가 보유한 모든 카드에

120
00:05:48,320 --> 00:05:50,750
상세정보를 바나나는 함수입니다

121
00:05:50,750 --> 00:05:54,770
요청을 처리하는 코드가 동기적으로 실행되는 것이 큰 문제였는데요

122
00:05:54,770 --> 00:05:59,370
사용자가 하나의 카드를 가지고 있다면 이 코드는 문제가 없지만

123
00:05:59,370 --> 00:06:01,060
여러 개 카드를 가지고 있다면

124
00:06:01,060 --> 00:06:04,250
갯수만큼 요청이 동기적으로 실행 될 것이고

125
00:06:04,250 --> 00:06:08,580
이는 다녀요 청당 응답시간에 증가를 듯합니다

126
00:06:08,580 --> 00:06:12,890
갈수록 뱅크샐러드 내부에서 마이크로 서비스가 많아지게 되면서

127
00:06:12,890 --> 00:06:16,020
서비스 간통 신념과 복잡도가 증가하였고

128
00:06:16,020 --> 00:06:19,400
추가로 타금융기관 연인과의 통신도 많아지면서

129
00:06:19,400 --> 00:06:24,220
하나의 단일 요청에 대해 응답이 매우 오랜 시간이 소요되었습니다

130
00:06:24,220 --> 00:06:26,550
사용자가 많은 자산을 연동 할수록

131
00:06:26,550 --> 00:06:28,360
응답속도가 들어주는 것을 방지하고

132
00:06:28,360 --> 00:06:32,240
줘 만일 요청 다 응답시간을 최대한 빠르게 포장하였습니다

133
00:06:32,240 --> 00:06:35,780
이런 상황에서 비동기처리 를 할 수 있는 방법을 많이 고민했었는데요

134
00:06:35,780 --> 00:06:40,080
대표적인 비동기처리란 이번에는 샐러리와 주 이벤트가 있습니다

135
00:06:40,080 --> 00:06:44,150
먼저 파이썬으로 작성된 비동기작업 중입니다

136
00:06:44,150 --> 00:06:47,230
하나의 작업을 브로커를 통해 전달하면 하나

137
00:06:47,230 --> 00:06:50,370
이상의 워크가 일을 처리하는 중입니다

138
00:06:50,370 --> 00:06:54,600
샐러리는 당시에 샐러리는 블루투스와 컨슈머 모두 파이썬

139
00:06:54,600 --> 00:06:55,150
이어야 1

140
00:06:55,150 --> 00:06:56,860
2 2 2 8 수가 없었는데

141
00:06:56,860 --> 00:06:59,880
당시에 서비스의 특성에 따라 스칼라 고

142
00:06:59,880 --> 00:07:01,120
노드 JS 장 여러 가지

143
00:07:01,120 --> 00:07:04,030
언어를 구성된 서버가 존재했던 상황 때문에

144
00:07:04,030 --> 00:07:07,330
샐러리를 도입할 수 없었습니다

145
00:07:07,330 --> 00:07:08,320
또 다른 대안이 주

146
00:07:08,320 --> 00:07:10,590
이벤트 계곡에 사용할 수 없었는데요

147
00:07:10,590 --> 00:07:15,630
이벤트는 라이브 live 기반의 동시 라이벌입니다

148
00:07:15,630 --> 00:07:17,010
이벤트 같은 경우

149
00:07:17,010 --> 00:07:19,860
앞서 말한 파이썬 에 대한 정숙성은 없었지만

150
00:07:19,860 --> 00:07:22,710
가독성이 떨어지는 것이 문제였습니다

151
00:07:22,710 --> 00:07:26,180
어이 코드는 실제 이벤트에 공식 다큐먼트

152
00:07:26,180 --> 00:07:29,220
존재하는 몽키패치 계신데요

153
00:07:29,220 --> 00:07:34,590
몽키 채팅이란 볼래 동적언어 에서 런타임에 코드를 수정하여

154
00:07:34,590 --> 00:07:38,780
별도의 변경없이 볼래 소스 변경하는 것을 말합니다

155
00:07:38,780 --> 00:07:42,080
공식적으로 뭉치 3층은 어쩔 수 없는

156
00:07:42,080 --> 00:07:44,630
유니프렙 필요악이라고 정해야 정도로

157
00:07:44,630 --> 00:07:45,980
무조건 사용해야 하지만

158
00:07:45,980 --> 00:07:48,760
정말 악마같은 문법의 가지고 있는게

159
00:07:48,760 --> 00:07:51,300
더 유명한 유명하죠

160
00:07:51,300 --> 00:07:55,890
공식 서비스가 커지면서 이런 코드가 많아지면 가독성이나 다지고

161
00:07:55,890 --> 00:07:59,230
진입장벽이 높아진다고 판단을 하였고요

162
00:07:59,230 --> 00:08:01,140
저희가 높은 생산성을 위하여

163
00:08:01,140 --> 00:08:04,300
파이썬에 메인으로 직접 배출되는 것이었습니다

164
00:08:04,300 --> 00:08:07,330
이는 따라서 낮은 가독성은 협업에 있어

165
00:08:07,330 --> 00:08:09,390
치명적인 약점이 라고 판단했기에

166
00:08:09,390 --> 00:08:12,100
결국 도입하지 않게 됩니다

167
00:08:12,100 --> 00:08:15,970
또한 있대 뱅크샐러드 는 급격한 성장을 겪어

168
00:08:15,970 --> 00:08:18,080
작년 2월 60만 다운로드에서

169
00:08:18,080 --> 00:08:21,510
올해 2월 기준으로 약 300만 다운로드가 되었습니다

170
00:08:21,510 --> 00:08:24,120
1년 사이에 약 다섯 배 성장이 있던 만큼

171
00:08:24,120 --> 00:08:26,270
엄청난 트래픽을 결제하였습니다

172
00:08:26,270 --> 00:08:27,290
사용자 경험 위에

173
00:08:27,290 --> 00:08:31,830
앞으로 확장과 독립적으로 다니엘 저 요청해

174
00:08:31,830 --> 00:08:36,430
응답시간을 보장하면서 엄청난 트래픽을 견적 했고요

175
00:08:36,430 --> 00:08:37,520
그래서 이러한 관점에서

176
00:08:37,520 --> 00:08:42,210
저희가 찾은 것은 AI 일 안 해 맥프레 먹입니다

177
00:08:42,210 --> 00:08:46,000
지피는 소개글에 나와있듯이

178
00:08:46,000 --> 00:08:48,350
씽크아이 여기만 맥박이 먹이는데요

179
00:08:48,350 --> 00:08:52,260
씽크 11 파이썬 3.8 부터 등장한 목요일입니다

180
00:08:52,260 --> 00:08:56,280
이는 이벤트 로그를 사용하여 컨퍼런스를 제공하는데요

181
00:08:56,280 --> 00:08:57,810
1 에 쓰레기 를 사용하고

182
00:08:57,810 --> 00:08:59,150
여러 아이유를 병행적으로

183
00:08:59,150 --> 00:09:01,790
실행할 수 있게 만들어 줍니다

184
00:09:01,790 --> 00:09:05,030
이러한 클러치는 아이유한테 굉장히 효과적입니다

185
00:09:05,030 --> 00:09:09,080
때문에 하나의 마이크로서비스 가 다른 여러 서비스와 때

186
00:09:09,080 --> 00:09:11,900
매우 위험한데요 이 그림에서 보시다시피

187
00:09:11,900 --> 00:09:14,660
벅스 개리 캐슬을 병렬적으로 보내고

188
00:09:14,660 --> 00:09:17,970
한번 해 기다릴 수 있습니다

189
00:09:17,970 --> 00:09:19,960
코드는 처음에 설명했던

190
00:09:19,960 --> 00:09:22,260
동기적인 코드를 어떠신가요 를 사용해서

191
00:09:22,260 --> 00:09:24,220
비동기로 바꾼 코디입니다

192
00:09:24,220 --> 00:09:26,370
주 이벤트 스타일의 몽키패치 충전이 없어서

193
00:09:26,370 --> 00:09:28,690
가독성이 높은 것은 물론이고요

194
00:09:28,690 --> 00:09:31,410
한 번에 카드 상세정보를 가져 오기 때문에

195
00:09:31,410 --> 00:09:32,730
사용자의 카드가 얼마나

196
00:09:32,730 --> 00:09:35,870
많은 많던 가장 오래 걸리는 요청 만큼

197
00:09:35,870 --> 00:09:39,260
1시간 밖에 되지 카드가 하나가 있다

198
00:09:39,260 --> 00:09:40,790
10개가 있던 사용자에게

199
00:09:40,790 --> 00:09:44,260
응답시간을 보장할 수 있다는 의미입니다

200
00:09:44,260 --> 00:09:46,460
대기 중에 다른 요청을 처리할 수 있기 때문에

201
00:09:46,460 --> 00:09:47,620
더 적은 수의 서버로

202
00:09:47,620 --> 00:09:50,140
더 많은 요청을 처리할 수 있겠죠

203
00:09:50,140 --> 00:09:51,080
이런 특징으로 인해

204
00:09:51,080 --> 00:09:54,130
ahp 는 파이썬에서 많이 사용되는 프레임

205
00:09:54,130 --> 00:09:57,800
업데이트 중 가장 성능이 좋습니다

206
00:09:57,800 --> 00:10:00,350
실제 퍼포먼스를 측정한 자료인데요

207
00:10:00,350 --> 00:10:03,780
초당 요청 압도적으로 높습니다

208
00:10:03,780 --> 00:10:06,080
앞서 말씀드린 장군아 플러스 에 대해서

209
00:10:06,080 --> 00:10:10,110
내 배에서 5배 정도 성능이 좋은 것을 볼 수 있고요

210
00:10:10,110 --> 00:10:12,500
또 많지 패스도 마찬가지입니다

211
00:10:12,500 --> 00:10:13,900
마찬가지로 심쿵 프리

212
00:10:13,900 --> 00:10:15,590
마켓 위에서 내 5배 정도 성능

213
00:10:15,590 --> 00:10:19,620
좋은 것을 확인할 수 있습니다

214
00:10:19,620 --> 00:10:22,060
실제로 이런 작년 장점을 살려

215
00:10:22,060 --> 00:10:23,860
뱅크샐러드 에서는 자산내역

216
00:10:23,860 --> 00:10:27,230
구미 서버를 모두 are 하였는데요

217
00:10:27,230 --> 00:10:30,230
자산의 조회 생성 수정 삭제

218
00:10:30,230 --> 00:10:33,500
로직은 물론이고 복잡한 비즈니스 로직을 스크래핑

219
00:10:33,500 --> 00:10:35,120
동기화로 이제까지 구현되어있습니다

220
00:10:35,120 --> 00:10:38,740
지금까지도 500만 사용자의 모든 일정을

221
00:10:38,740 --> 00:10:41,020
무리 없이 처리하고 있습니다

222
00:10:41,020 --> 00:10:43,990
실제로 저번 주에 응답시간 지표를 살펴보고

223
00:10:43,990 --> 00:10:46,660
99% 요청이 100밀리세컨드 안에 처리

224
00:10:46,660 --> 00:10:48,210
되는 것을 볼 수 있습니다

225
00:10:48,210 --> 00:10:53,780
앞서 말씀드렸듯이 요청들이 단순히 뒤에서 커리를 수행해서

226
00:10:53,780 --> 00:10:55,610
결과가 3천 하는 것이 아니라

227
00:10:55,610 --> 00:10:58,830
자산의 도메인별 마이크로서비스와 통신한 결과도 있고

228
00:10:58,830 --> 00:11:01,780
복잡한 비즈니스 로직이 들어가 있는 종기가 요청하면

229
00:11:01,780 --> 00:11:04,150
생각하면 매우 낮은 수치입니다

230
00:11:04,150 --> 00:11:07,330
하지만 ahp 또한

231
00:11:07,330 --> 00:11:11,550
높은 성능을 반에 몇 가지 문제점이 있었는데요

232
00:11:11,550 --> 00:11:13,620
대표적인 게 서비스가 커질수록

233
00:11:13,620 --> 00:11:16,170
가독성과 생산성이 낮아진다는 점이었습니다

234
00:11:16,170 --> 00:11:19,460
그 중 하나에 주로 블루프린트 개념이 없기 때문에

235
00:11:19,460 --> 00:11:22,050
리소스 별로 서브 어플리케이션을 생성

236
00:11:22,050 --> 00:11:23,990
해야 된다는 점 있는데요

237
00:11:23,990 --> 00:11:25,780
자체는 문제없지만 있어

238
00:11:25,780 --> 00:11:29,250
그 어플리케이션에서 엔드포인트를 리졸브 하기 위해선

239
00:11:29,250 --> 00:11:32,130
이런 복잡한 수준의 코드가 필요하게 됩니다

240
00:11:32,130 --> 00:11:34,500
이래도 시그널핸들러 들을 모두 다 콜백

241
00:11:34,500 --> 00:11:36,050
레지스트레이션 형식으로만

242
00:11:36,050 --> 00:11:39,850
출고할 수 있는 점이 등이 있었고

243
00:11:39,850 --> 00:11:42,140
저희가 판단하게 커질수록

244
00:11:42,140 --> 00:11:46,140
가독성이 낮을 수밖에 없다고 판단 하게 되었습니다

245
00:11:46,140 --> 00:11:49,630
또한 이때 뱅크샐러드 있는 또 다른 성장을 겪게 되는 데요

246
00:11:49,630 --> 00:11:52,540
2018년 기준에 50명이 어떤 것이

247
00:11:52,540 --> 00:11:55,290
지금 120명으로 드러나게 되었고

248
00:11:55,290 --> 00:11:58,460
개발자 수는 거의 3배 가까이 생각하게 되었습니다

249
00:11:58,460 --> 00:12:02,600
이러한 상황에서 낮은 가독성은 개발 과정 중 가장 큰 병

250
00:12:02,600 --> 00:12:03,790
노 병 모기 코드리뷰

251
00:12:03,790 --> 00:12:06,140
에이서 오랜 시간이 걸리기 되는 것을 의미하고

252
00:12:06,140 --> 00:12:07,010
있는 곳

253
00:12:07,010 --> 00:12:09,840
나중에 생산성을 의사였습니다

254
00:12:09,840 --> 00:12:12,190
따라서 녹돈 가독성을 가지면서

255
00:12:12,190 --> 00:12:15,040
어느 정도 성능이 보장되는 크림하고 찾게 되었고요

256
00:12:15,040 --> 00:12:20,190
그리하여 찾은것이 생일입니다

257
00:12:20,190 --> 00:12:23,220
senegal 플러스 그처럼 되게 간단합니다

258
00:12:23,220 --> 00:12:25,110
실제로 본인을 플라이

259
00:12:25,110 --> 00:12:28,290
싱크로너스 스프레이 먹이라고 소개하고 있고요

260
00:12:28,290 --> 00:12:30,270
어 굉장히 직관적입니다

261
00:12:30,270 --> 00:12:34,090
모든 객체는 어플리케이션을 통해 싱글톤으로 선언하고

262
00:12:34,090 --> 00:12:37,050
리퀘스트 핸들러에서 EL 편하게 접근할 수 있습니다

263
00:12:37,050 --> 00:12:40,690
이러한 패턴의 사용하여 글로벌 오브젝트를 취소할 수 있고

264
00:12:40,690 --> 00:12:44,720
직관적이고 안전 안전 않고 작성이 가능합니다

265
00:12:44,720 --> 00:12:47,500
또한 블루프린트 개념을 활용하여 레스트풀

266
00:12:47,500 --> 00:12:49,650
리소스 단위로 패키징이 가능합니다

267
00:12:49,650 --> 00:12:51,060
있는 서버에 확장과

268
00:12:51,060 --> 00:12:55,240
독립적으로 소스에 맞춰 서버 코드 구성을 할 수 있기 때문에

269
00:12:55,240 --> 00:12:58,780
속상해서 좋게만 만들 수 있습니다

270
00:12:58,780 --> 00:13:00,800
아 또 한 맺힌 예배처럼

271
00:13:00,800 --> 00:13:04,720
씽크 U 를 사용하여 어느 정도의 성능을 보장합니다

272
00:13:04,720 --> 00:13:07,420
그어 싱크홀 얻을 수 있는 클러치는 물론이고

273
00:13:07,420 --> 00:13:10,510
기본적으로 제공되는 멀티플 워커를 활용하여

274
00:13:10,510 --> 00:13:12,770
테러리즘 까지 얻을 수 있습니다

275
00:13:12,770 --> 00:13:16,760
저희는 일어났더니 게 장점들로 통해서 성능과 생산성

276
00:13:16,760 --> 00:13:19,230
두 마리 토끼 모드 잡을 수 있었는데요

277
00:13:19,230 --> 00:13:23,490
물론 비슷한 문제점이 존재 확인 하였습니다

278
00:13:23,490 --> 00:13:26,460
운영환경에서 싼 이거 사용할 때

279
00:13:26,460 --> 00:13:28,800
몇 가지 문제점이 발생해야 했는데요

280
00:13:28,800 --> 00:13:31,950
가장 먼저 협업 관점으로서의 단점으로는

281
00:13:31,950 --> 00:13:33,020
이런 그림들 처럼

282
00:13:33,020 --> 00:13:35,680
통용되지 않는 컨벤션 문제가 있었습니다

283
00:13:35,680 --> 00:13:37,630
박사님도 너무 높은 잘도 로 인해서

284
00:13:37,630 --> 00:13:39,390
개발자들의 스타일이 전부 다 다르고

285
00:13:39,390 --> 00:13:42,820
코드 코드 구성식 고민할 것이 많아진다는

286
00:13:42,820 --> 00:13:44,700
단점들이 있었는데요

287
00:13:44,700 --> 00:13:51,810
또한 이런 각기 다른 코드 스타일은 유지보수의 되게 어려우면

288
00:13:51,810 --> 00:13:53,570
저희는 일을 쿠키커터

289
00:13:53,570 --> 00:13:56,350
라는 오픈소스 를 통해서 해결 했는데요

290
00:13:56,350 --> 00:13:57,900
쿠키커터 는 프로젝트

291
00:13:57,900 --> 00:14:00,830
템플릿을 자동으로 생성해주는 툴입니다

292
00:14:00,830 --> 00:14:02,590
저희는 사전에 개발자

293
00:14:02,590 --> 00:14:06,620
들끼리 합의된 바탕으로 하여 템플릿을 설계 할까요

294
00:14:06,620 --> 00:14:09,490
이를 바탕으로 개발자들은 한 줄에 커맨드라인으로

295
00:14:09,490 --> 00:14:12,790
실제 작동하는 서버 코드를 생산할 수 있고

296
00:14:12,790 --> 00:14:16,450
바로 비즈니스로직 개발에 들어갈 수 있게 되었다

297
00:14:16,450 --> 00:14:19,020
또한 총회장 코드 구조를 가지게 되면서

298
00:14:19,020 --> 00:14:20,840
서버들이 단일성을 가지게 되었고

299
00:14:20,840 --> 00:14:23,980
코드리뷰 생산성 동안 증가 하게 되었는데요

300
00:14:23,980 --> 00:14:26,950
현재 오픈소스 에서는 기본적인 http

301
00:14:26,950 --> 00:14:29,310
서버 코드 스캐너 통만 신선하지만

302
00:14:29,310 --> 00:14:35,330
내부적으로는 활용하는 내부적으로 활용한 소스로는 그 퍼시스턴트

303
00:14:35,330 --> 00:14:37,090
스크린 야구 집에 있다

304
00:14:37,090 --> 00:14:40,640
따라서 까지 디펜던시 화보들을 생성하고 있습니다

305
00:14:40,640 --> 00:14:43,210
어 결론적으로 쿠키커터 를 사용하여

306
00:14:43,210 --> 00:14:45,570
개발팀에서 하루에도 몇 개의

307
00:14:45,570 --> 00:14:49,280
서비스를 생산할 수 있게 되었습니다

308
00:14:49,280 --> 00:14:51,600
또한 센 이게 치명적인 단점은

309
00:14:51,600 --> 00:14:53,480
싱커의 단점이기도 한대요

310
00:14:53,480 --> 00:14:55,960
아토믹 시티 보자 힘들지 않은 것입니다

311
00:14:55,960 --> 00:14:59,330
아토미 시키는 아톰 시티란

312
00:14:59,330 --> 00:15:02,710
트랜잭션과 관련된 작업들이 부분적으로 실행되다가

313
00:15:02,710 --> 00:15:05,860
중단되지 않는 것을 보장하는 것입니다

314
00:15:05,860 --> 00:15:09,890
산행에서는 전통적인 플라스크 나 장구 와는 다르게

315
00:15:09,890 --> 00:15:12,490
만약 클라이언트가 커넥션에 끊기 된다면

316
00:15:12,490 --> 00:15:15,420
리퀘스트 핸들러가 중간에 취소될 수 있습니다

317
00:15:15,420 --> 00:15:17,890
있는 하나의 예정 코디인데요

318
00:15:17,890 --> 00:15:21,860
요청해서 엔티티를 추출하여 데이터베이스에 저장한뒤

319
00:15:21,860 --> 00:15:25,160
캐시의 캐스팅에도 는 예정입니다

320
00:15:25,160 --> 00:15:27,880
만약 엔진지갑 기기에저장 되는지

321
00:15:27,880 --> 00:15:29,410
첫 번째 코드가 실행되는 기회에

322
00:15:29,410 --> 00:15:31,870
클라이언트가 커넥션을 끊게 되면

323
00:15:31,870 --> 00:15:33,700
두 번째 것들이 캐시를

324
00:15:33,700 --> 00:15:36,880
캐싱하는 성전이 실행되지 않을 것이고

325
00:15:36,880 --> 00:15:38,660
이는 다른 서비스 들에게

326
00:15:38,660 --> 00:15:41,850
장애를 야기할 수 있는 가능성을 많습니다

327
00:15:41,850 --> 00:15:45,420
따라서 굉장히 안정적인 서비스의 치약

328
00:15:45,420 --> 00:15:48,470
간대요 단점을 해결할 수 있는 인프라를 갖추고 있어서

329
00:15:48,470 --> 00:15:52,540
저희는 운영환경에 가능했습니다

330
00:15:52,540 --> 00:15:54,090
저희의 모든 서비스는

331
00:15:54,090 --> 00:15:56,620
K8S 위해서 실행되고 있는 데요

332
00:15:56,620 --> 00:15:58,050
모든 어플리케이션 서버는

333
00:15:58,050 --> 00:16:00,860
사이드카 패턴으로 구동되고 있습니다

334
00:16:00,860 --> 00:16:04,070
사이즈가 패턴이란 어플리케이션 컨테이너와

335
00:16:04,070 --> 00:16:06,100
독립적으로 동작하는 별도의

336
00:16:06,100 --> 00:16:08,610
컨테이너를 붙이는 패턴입니다

337
00:16:08,610 --> 00:16:10,720
실제 뱅크샐러드 에서는

338
00:16:10,720 --> 00:16:14,320
어플리케이션에 들어오는 모든 일정을 프록시로 연결하여

339
00:16:14,320 --> 00:16:15,990
회장 6장의 응답시간

340
00:16:15,990 --> 00:16:20,060
응답코드 등 모든 정보를 실시간으로 로깅하는 사이즈가 를

341
00:16:20,060 --> 00:16:23,420
직접 구현하여 사용하고 있습니다

342
00:16:23,420 --> 00:16:25,250
이는 실시간으로 빌리

343
00:16:25,250 --> 00:16:27,330
툴을 사용하여 관측할 수 있는데요

344
00:16:27,330 --> 00:16:31,350
이를 통해 센 이게 코드 변경 없이 사용자가 하나

345
00:16:31,350 --> 00:16:33,610
요청이 어떻게 여러 가지 서비스와

346
00:16:33,610 --> 00:16:35,330
통신했는지 시작할 수 있었고

347
00:16:35,330 --> 00:16:37,730
이를 다른 대체적으로 활용한 보상트랜잭션

348
00:16:37,730 --> 00:16:40,910
처리 등으로 인해 해결할 수 있었습니다

349
00:16:40,910 --> 00:16:44,150
이런 것들 바탕으로 센

350
00:16:44,150 --> 00:16:47,010
이게 단점들을 나름 극복할 수 있었고요 이 결과로 인해

351
00:16:47,010 --> 00:16:48,390
현재 뱅크샐러드 에서

352
00:16:48,390 --> 00:16:51,540
약 20개 서비스가 동작하고 있으며

353
00:16:51,540 --> 00:16:54,510
앞으로 작성되고 있는 신규 마이크로서비스 동안

354
00:16:54,510 --> 00:16:58,340
쎄니크로 작성 중에 있습니다

355
00:16:58,340 --> 00:17:01,020
지금까지 뱅크샐러드 가 상황에 따라

356
00:17:01,020 --> 00:17:02,770
어떤 기술적 고민을 하였고

357
00:17:02,770 --> 00:17:06,140
이에 따라 어떤 프레임워크 선택하여 사용한지 말씀드렸는데요

358
00:17:06,140 --> 00:17:08,740
시간순으로 잔고 플라스크

359
00:17:08,740 --> 00:17:11,940
ahdp 주로 사용하게 되었으나

360
00:17:11,940 --> 00:17:15,040
앞서 말씀드린대로 지금까지도 이 네 개에

361
00:17:15,040 --> 00:17:17,430
프레임웍을 계속 사용하고 있습니다

362
00:17:17,430 --> 00:17:22,280
뱅크샐러드 기술팀에 가장 큰 가치관은 생산성 인데요

363
00:17:22,280 --> 00:17:23,790
생산성을 통해 사용자의 게

364
00:17:23,790 --> 00:17:25,180
더 많은 가치를 더 빠르게

365
00:17:25,180 --> 00:17:27,420
제공하는 것이 저희의 비전입니다

366
00:17:27,420 --> 00:17:29,510
저는 세계관 결함으로 인해

367
00:17:29,510 --> 00:17:31,930
우리 애기 전달성의 많은 도움을 주고 있고

368
00:17:31,930 --> 00:17:34,430
다양한 상황에 맞는 프레임웍에 적절한 활용

369
00:17:34,430 --> 00:17:38,780
또한 높은 생산성에 일도 하고 있습니다

370
00:17:38,780 --> 00:17:41,280
지금까지 발표 들어줘서 감사합니다

371
00:17:41,280 --> 00:17:44,320
궁금하신 점은 물어봐 주시면 제가 최대한 답변드리고

372
00:17:44,320 --> 00:17:51,150
마무리하도록 하겠습니다
