https://youtu.be/HfGsHcne8Is

-(조인태) 이게 제가 매트랩을 어쨌거나 초심자에서 넘어갔기 때문에 저도 이거 발표를 준비하면서 제일 느낀 게 내가 매트랩 수준이 별로 높지 않았기 때문에 매끄럽게 넘어갈 수 있었구나를 깨달았거든요.
일단 매트랩에 대해서 조금 얘기를 해드려야 할 게 매트랩은 상용 소프트웨어고 유료 소프트웨어죠, 그래서 대학교에서 많이 사용하고 저도 학교에서 처음 접했거든요.
그래서 코드가 어떤 회사에서 관리를 하고 있고 그거를 검증이 되어 있는 거죠.
그래서 저희가 그걸 직접 까볼 수는 없어요. 그런데 그 결과를 회사에서 보증을 하는 거죠.
그래서 여기 이거는 매트랩이 phyton보다 좋은 7가지 이유가 있는데 천천히 읽어보니 이런 부분은 맞는 얘기다 싶더라고요. 특히 매트랩 하면 이게 정말 강력하거든요.
헬프 함수명, 이거만 있으면, 그러니까 혼자서 다 할 수가 있어요.
거기에 나오는 게 기본적인 설명부터 해서 그 외에 예제까지 거기에 다 포함되는데 진짜 강력한 함수입니다.
이 함수 하나만 알고 있으면 사실상 모든 걸 다 알고 있다고 말해도 될 정도예요. 저 같은 경우 매트랩를 대학교에서 처음 사용했고 저는 전공이 물리학이였습니다. 행렬 계산하다가 매트랩을 사용하다 보니까 정말 강력한 거구나, 이렇게 깨달았었죠.
이거를 잘 배워와야겠다 해서 그런 거를 좀 써 먹을 수 있는 데서 일을 했었어요.
한 2년이 좀 안 됐던 것 같은데 거기는 해양연구소였고 그런 데는 미국 장비를 많이 사용해요.
그래서 미국 장비들은 매트랩을 많이 사용하거든요. 그래서 매트랩를 사용하는 부분을 그런 데 활용하는 데 활용했죠, 시각, 데이터 베이스.
데이터 베이스를 처리하고 관리를 하는데 매트랩를 많이 사용했었어요. 여기 있는 건 수중 글라이더라는 건데 저게 일종의 드론 중 하나입니다. 여기 보시면 울릉도, 독도 이렇게 돼 있거든요.
저거 이렇게 띄워서 왔다갔다 하는 건데 수심이 여기가 한 2, 3000 돼요.
이게 800m까지 내려갔었나? 이렇게 했던 건데 찾아보시면 이런 거 있어요. 하여튼 뭐 여러 군데서 매트랩를 사용하고 있고 여기 나오는 데이터 다 매트랩으로 처리하고 사용했었죠.
그러다가 이렇게 파이선으로 넘어오게 된 계기는 특별할 건 없고 라이센스 문제가 제일 컸어요. 학교를 나오고 그 회사를 나오고 하니까 그거를 더 이상 쓸 수가 없더라고요.
그러니까 그런 거죠, 이제.
돈을 안 내고 쓸 수 있는 소프트웨어를 구하거나. 복돌이가 되거나.
저는 고민이 많았어요. 옛날에 파이선이라는 건 이미 알고 있었는데 이거를 어떻게 대체해보려고 시도했는데 많이 실패했어요. 왜냐하면 매트랩 같은 경우는 그것만 깔면 기본적으로 다 제공해주거든요.
그래서 사용하는 데 되게 편했는데 파이선 같은 경우에는 처음에 이거 알고 뭐야, 이거? 아무것도 없네.
약간 이런 식이어서 처음에 저 같은 경우에는 좀 접근하는 데 힘들었는데 아나콘다가 되게 도움이 됐어요. 지금은 로고가 바뀌었는데.
spyder가 진짜 저에게 도움이 많이 됐어요. 이거를 보니까 나도 파이선을 쓸 수 있겠다 생각이 들더라고요.
그랬던 이유가, 여기 보면 이게 매트랩 옛날 UI로 해놓은 건데 파이선에서 아나콘다 스파이더를 처음 켜면 나오는 거거든요.
매트랩 옛날 버전이 이렇게 돼있었거든요.
스크립트, 콘솔 여기 이렇게 쭉 나오죠.
이게 기본적으로 같더라고요.
이거면 쓸 수 있겠다, 그렇게 해서 시작해서 사용을 했던 거죠.
사용을 했었는데 어쨌거나 매트랩하고 파이선을 놓고 보면 비슷한 일을 할 수 있는 것 같아요.
수학이나 공학에서 비슷한 일을 할 수 있고 시각화의 매트폴라이브 같은 경우는 정말 비슷해요.
그리고 특정 함수가 정말 같아요.
몇몇 함수가 똑같은 이름으로 똑같은 결과를 할 수 있고요. 그런데 차이점이 매트랩은 더 수학적으로 돼 있고 그다음에 파이선은 좀 더 프로그래밍 언어에 가깝다고 저는 그렇게 생각해요.
인덱스 같은 부분에 그런 차이가 나고 사실 Index만 적응하면 다 적응했다는 차이가 있고 오픈 소스가 공짜고 매트랩은 돈을 내야 합니다.
물론 30일 트라이얼, 이메일 주소만 있으면 얼마든지 사용할 수 있어요.
30일이면 부족하죠.
그래서 조금 더 까놓고 보면 이제 매트랩은 안에 IDE도 포함돼 있고 저는 이 부분을 사용 안 해서, 어쨌거나 이런 기능들이 있더라고요.
그다음에 시물링크 저도 이건 안 사용해봤어요.
Simulink를 안 사용한 게 파이선으로 넘어온 주요 이유고 툴킷도 여러 가지가 있어요. 이것들도 다 유로예요. 그런데 성능을 보장하죠. 그런데 파이선 같은 경우는 인터프리터, 언어, 기본 라이브러리 이 파이선 자체의 기본 라이브러리는, 기본 라이브러리만 갖고 할 수 있는 게 솔직히 많지 않아요. 제 생각에는 그래요.
그런데 매트랩 같은 경우는 기본 라이브러리에 별게 다 있어요. 정말.
투킷 이런 거 굳이 없어도 이거만 있어도 별걸 다할 수 있고요.
그런데 파이선 같은 경우에는 Numpy 정도는 깔아야 뭐 할 수 있죠.
이미지에 대한 것을 하려면 이런 라이브러리도 필요하고 이게 pyqt5 같은 게 GUI 만드는 이런 거에 해당하죠. 이런 게 있어야 인터렉티브플로같은 것도 만들 수 있고 PC에서도 만들 수 있을 거고 그 외에 라이브러리가 다양하죠. 파이선은 라이브러리를 어떻게 쓰냐에 따라서 매트랩를 능가하는 부분이 있죠. 능가하고도 남죠.
이거는 앞에서 얘기를 했네요.
어쨌거나 이거를 먼저 얘기했던 게 이게 파이선을 제가 쓰면서 처음 겪었던 난관 중 하나인데 이게 매트랩에서 스크립트를 시작하는 관용구입니다.
close all, 현재 열려 있는 모든 flot 같은 것을 닫고 클리어, CLC, 콘솔에 있는 여러 가지 뭐가 남잖아요.
clc하면 깨끗하게 날아가죠.
파이선에서는 이것들이 없어요. 그래서 이거에 대응하는 함수들이 파이선에 없더라고요. 그래서 만들어서 써야 해요. 그래서 일일이 지워야 하고 프린트, 엔터를 100번 친다는 거죠. 그러면 CLC 같은 효과가 나요.
이거는 함수로 정의한 거예요.
보니까 Ipythondp% 리셋을 하면 예, 아니오 같은 귀찮은 걸 물어봐요.
어쨌거나 커널 리스타트 이런 걸 하면, 이거는 주피터에서 캡처한 건데 같은 기능이 있어요.
편하게 할 수 있어요. 이런 기능을 쓰면 사실상 매트랩의 이런 것들이 대체가 돼요.
특히 매트랩 같은 경우는 약간 주피터 노트북 같은 경우는 블록 단위로 표시가 되는데 매트랩은 그런 기능을 사용하다 보면 반을 나누게 돼 있어요.
컨트롤 엔터, 시프트 엔터 똑같은 기능을 사용할 수 있는데 주피터에서 사용할 수 있더라고요. 그런 부분에서 도움이 많이 됐어요. 메모리 관리를 하려면 이런 것들이 필요하고 I파이선은 무조건 쓰시면 매트랩를 대체하는 데 도움이 되고 그다음에 인덱스가 이게 정말 처음에 저도 막 나도 모르게 하면 괄호 틀리고 지겹게 틀려요.
지금은 좀 나아졌는데 왜 0부터 쓰는 거야, 이해가 안 됐고 어쨌든 이런 차이가 있어요.
A에 어떤 걸 불러오려고 하는 건데 똑같은 건데 Index가 다른 거죠.
아무튼 간에 괄호 안에 : 이거는 전체를 얘기하는 거고 이게 5라고 나오면 안 될 텐데, 어쨌든 넘어가고 매트랩에서는 이게 정말 편해요. 1에서 10까지 1 단위로 만들라고 하는 건데 같은 함수가 어레인지 함수가 있어요.
보통 Numpy 많이 쓰니까, 그것도 거의 관용구인데 조금 더 매트랩적으로 쓰려면 이런 식으로 치면 그냥 어렌이지 할 수 있어요. 좀 더 손을 덜 쓰게 하고.
아무튼 간에 이렇게 달라요.
보시면 4에서 8까지 2 단위로 나타내라는 건데 여기서는 간격이 제일 뒤에 있어요.
여기에서도, 이것도 좀 알아두셔야 할 부분인데 이제 1에서 3까지 5에서 10까지 괄호 세로 이런 식으로 나오는데 이게 필요해요.
이 :하고 ,가 있어야지, 이런 식으로 쳐내서 왜 안 나오는 거야, 되게.
어떻게 하는지 참 헤맸어요. 어쨌거나 이런 식으로 하면 잘 나온다.
어쨌든 Index가 다르고 괄호도 다르고 매트랩은 1에서 시작 파이선은 0에서 시작.
엔드 같은 경우도 end라고 써요. 사용법은 똑같은데 이게 다르다 정도 아시면 되겠고 보시면 아시겠지만 저는 매트랩 코드를 왼쪽, 파이선을 오른쪽에 썼어요.
앞으로 그렇게 보시면 되고 몇 가지 함수가 있네요.
이런 건 잘 안 쓰는 함수인데, 하여튼 흔히 많이 쓰는 함수들을 매트랩에서는 이런 식으로 써야 해요. 그래서 어레이 하면, 어쨌거나 array를 붙여줘야지 Numpy 어레이로 인식되죠.
linespace 같은 경우는 똑같이 잡는, 정말 똑같아요.
이거는 그대로 쓸 수 있어요.
맥스나 파인드 이런 것이 다른데 이름이 다르고 쓰는 형태가 다른데 비슷하게 작동을 해요. 비슷하게 작동하는데 분명히 차이가 있죠. 그런 차이들이 파인드 같은 경우 매트랩에서 0이 아닌 엘레멘트를 반환하는 거예요. 조건에 따라서.
7보다 큰 애들을 반환하라는 거고 여기서도 A가 7보다 큰 거 하면 7을 반환하는, 결과는 똑같은데 중간 단계 인덱스를 보면 6, 9 어렵게 나와요.
선형 Index를 쓰는 게 있거든요. 논제로 같은 경우에는 결과는 같은데 괄호 수, 행렬로 위치를 바로 표현해요. 어쨌거나 이렇게 해서 쓰면 나오는 결과가, 중간 단계에서 어레이 엘레멘트의 요소를 다루는 게 조금 다르고요. 이런 차이가 있어요. 이런 부분은 매트랩은 되게 도큐멘테이션이 잘돼 있다면 잘돼있는 거죠.
아까 매트릭스 같은 것도 있는데, 보시면
같은 기능을 사용하는 데 써야 하는 방식이 달라요. 보면 맥스 치면 A.맥스라고 치면 이 A라고 하는 행렬에서 제일 큰 요소를 하나 반환하는 거예요. 그런데 매트랩에서는 맥스 A를 집어넣으면 제일 큰 요소가 있는 행을 하는 거예요.
그런데 여기서 열이나 행을 지정하려 하면 이런 식으로 옵션이 들어가야 하고 매트랩보다 파이선이 좀 더 편하게 쓸 수 있어요.
0. 1.
그리고 파이선에서는 되게 기본이 이거인데 매트랩에서는 이런 기능을 쓰려면 훨씬 번거롭게 써야 해요. 이런 차이가 어디서 나오는지는 저도 정확히 모르겠는데 이게 다르다.
행렬을 많이 다루다 보면 이런 연산을 만나게 되는데 기본적으로 매트랩에서 어떤 행렬끼리 연산할 때 연산자가 나오는데 요소끼리 연산하는 거예요. 행렬을 계산하겠다는 게 아니라 행렵 곱을 갖다, 이거 같은 경우는 행렬끼리 곱셈을 얘기하는 거거든요. 그런데 여기서 파이선 같은 경우는 이게 요소끼리 계산하는 게 돼요.
행렬곱을 하려고 하면, 그런데 보면 이 연산을 디프리케이트하려고 하는 경향이 있는데 그래서 저도 많이 사용을 안 했어요.
매트랩에서는 요소끼리 연산은 다 앞에 점을 붙이고 사용한다고 보시면 되고
그런 차이들이 있고 립매트 같은 경우는 A라는 거를 M번 반복한다는 건데 이것도 사용하다 보면 많이 사용하는 함수인데요.
여기서는 타일이라고 쓰더라고요. 이거를 못 찾아서 고생한 기억이 있는데 그리고 squeeze같은 경우는 빈 엘레멘트를 날리는 거예요. 그래서 연산하다 보면 특정 부분을 잘라내고 그 부분이 없는 상태로 있는 그런 매트릭스가 있는데 그걸 스퀴즈해서 하면, 이거를 안 하고 하면 에러가 뜨거든요. 걔네가 모양이 줄어져요.
파이선에서는 같은 방식을 사용하려면 이런 식으로, 뒤에.
그다음에 트랜스포즈인데 이거는 컨쥬게이트라고 해서 복수까지 포함되는 거예요. 그런데 이거는 사실 별로 안 썼죠. 이런 차이가 있는데 이런 거는 많이 쓰게 되죠.
트랜스포즈는, 이거는 매트랩에서는 쉽게 표현이 가능해요.
이거는 행렬을 푸는 거죠.
그런데 이게 스샷으로 붙여놨는데 표시가 안 떠서
이런 거를 파이선에서 사용하려면 linalg라고 하는 라이브러리를 사용하시면 돼요.
그리고 솔브, 이거하고 차이가 뭐냐 하면 정사각 행렬을 얘기하는 거고 정사각행렬이 아닌 경우 이거를 따로 써야 해요.
이런 부분에서는 매트랩이 편한 부분이 있긴 해요. 간편하게 사용할 수 있고 그외에 보다 보면 되게 비슷, 사실 이런 함수들은 조금씩 다른 부분이 있는데 거의 같게 작동한다고 보시면 돼요.
여기 이렇게 이런 차이, linespace도 정말 많이 쓰는데 거의 같게 사용한다고 보시면 돼요.
ones 같은 경우는 1로 채워진 행렬을, 3 by 4로.
zeros는 다 영어로, 이거는 항등행렬, 단위 행렬이고요.
이런 식으로 이거는 하나만 들어가는 거고 그다음에 diag 이게 보면 여기에 행렬을 넣으면 diag 이게 하는 게 대각선을, 대각 요소로 반환하는 거예요.
그런데 이거 앞에 리스트를 넣고 다른 거로 지정하면 그 부분을 대각 요소를 그 리스트로 넣은 정사각 행렬을 만들어줘요.
그렇게 하고, 이것도 많이 쓰는 건데 flipupdown 플립 레프트, 라이트 이거는 위아래로 돌리는 거.
예를 들어 반대 대각 행렬로 쓰려고 하면 이거를 같이 사용해야겠죠.
그다음에 fft 같은 게 사실 이런 부분이 이제 저는 매트랩에서 이거를 사용하지 않고 phyton에서 사용했는데 매트랩에서 사용하지 않고 phyton에서 사용할 때 이 매트랩에 있는 도큐멘터리를 참고했었어요. 거의 같게 사용했었어요.
이거는 예를 들어서 특정 주파수가 있으면 타임 도메인을 퀀시도메인으로 바꿔주는 함수거든요.
이거는 인벌스FFT라고 해서 그걸 다시 바꿔주는 거고, 유니크 이거는 특징 리스트 중 반복된 애를 지우고 셋으로 만들어주는 거예요.
소트 같은 경우는 이것도 거의 같은 건데 순서대로 정렬을 해주는 거죠, 뒤에 첨자를 넣어서 옵션을 넣어줄 수 있고요.
매트랩에서 또 많이 쓰는 게 .mat 같은 경우에는 배리어글 안에 있는 것들을 저장하면 보통 맷으로 저장하거든요. 다양하게 사요되는데 거기 있는 것들 이름대로 해서 리스트를 넣어줘요. 행렬이면 행렬이면 리스트면 리스트고 들어가는데 앞에 보면 세 가지가 붙는 게 글로벌즈, 헤더, 버전 이런 얘네가 들어가서 dictionary로 나와요. dictionary라고 그러면 키, 밸류, 키, 밸류 이렇게 있는 거죠.
그렇게 해서 A라는 어레이를 갖다 맷 파일을 저장을 하면 저장한 이후에 얘를 임포트를 해서 scipy를 해서 이 라이브러리를 해야 하는데 임포트 하면 얘를 접근하려면 dictionary를, 맷이라고 하는 안에 A라고 하는 거를.
그다음에 이거는 매트랩에서 쓰는 것 중 맷 파일 중 스트러쳐 어레이라는 게 있는데 어떤 구조가 들어가는 거예요. 이것도 사실 보면 이것 같은 경우는 dictionary 안에 dictionary가 들어가있다고 생각하면 돼요.
기본적으로 매트랩에서는 기본 라이브러리가 되게 많이 들어가 있어요.
그래서 따로 뭐 바로 사용할 수 있고 파이선 같은 경우에는 기본적인 것들을 임포트 해서 사용해야 하죠.
저같은 경우 지금 여기서 조금 비슷한 폼으로 써보려고 붙였거든요.
이렇게 하면 이런 거를 이렇게 쓸 수 있어요. 거의 비슷하게 사용할 수 있죠.
flot 같은 경우도 많이 쓰는데 어레인지 이 부분을 제외하면 이런 식으로 비슷하게 쓸 수 있는데 파이선에서는 이렇게 많이 쓰죠.
파이 같은 거 쓸 때는 좀 불편하죠, 이런 거를 쓸 때 좀 더 시각화 할 때 빨리 사용하게 쓸 수 있는데.
이게 그림을 그리다 보면 매트랩에서는 홀드 온이라고 하면 스크립트를 여러 번 돌리면 같은 그림을 덧붙일 수 있거든요.
이거는 PLT 쇼가 비슷한 역할을 한다고 보시면 돼요.
그다음에 AXIS 같은 거를 지원할 때 빈칸이고 콤마가 있고 이런 차이가 있고 어쨌거나 시각화를 해서 놓고 보면 라벌, 엑스티스 같은 걸 넣어놨는데 여기서는 같이 들어가는 데 따로 있어요.
그 외에 되게 흡사하게 사용할 수가 있죠.
그런데 함수들 같은 경우에 여기 그래도 많이 있는데 거의 같은 기능으로 사용하실 수 있고 HIST랑 폴라 이거는 매트랩에서 중단한 건데 사실 이런 부분들은 거의 매트랩에서 거의 같게 사용할 수 있어요. 파이선하고.
매트랩에서는 기본적으로 flot을 띄우면 인터렉티브 flot으로 떠요. 파이선에서는 쓰려면 플로틀리나 보케로 써야 해요.
어쨌든 파이선에서 대체하기 힘든 부분이 Simulink가 있는데 이것도 비슷한 종류의 라이브러리가 있긴 하더라고요.
이거는 앞에서 얘기했던 거고 이제 속도에 대한 얘기가 매트랩에서 주장을 하는데 이게 넘바라고 하는데 데코레이터 하나만 달면 속도가 되게 빨라지는 라이브러리가 있더라고요.
저도 이거를 돌려봤는데 정말 이거 하나 붙이면 빨라져요.
최근에 3.7 같은 경우 속도가 빨라졌고 파이선에서 매트랩보다 빠르게 하는 여러 방법이 있죠.
어쨌거나 많이 알게 됐던 것들이 지금에는 매트랩을 갖다 파이선에서 임포트 하고 또 파이선을 매트랩에서 가져다쓸 수 있는 게 API가 나오고.
일단 여기까지 하고 질문 있으면 시간 되는 대로 좀.
-(진행자) 시간이 다돼서 세션은 여기서 마치겠고요. 혹시 질문 사항 있으신 분은 여기 앞에서 발표자분께 직접 질문하시면 되겠습니다. 조인태 발표자분께 뜨거운 박수 부탁드립니다.