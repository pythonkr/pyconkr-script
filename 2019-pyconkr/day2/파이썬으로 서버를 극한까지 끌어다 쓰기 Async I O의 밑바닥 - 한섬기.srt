1
00:00:00,000 --> 00:00:04,030
안녕하세요 방금 소개받은 한 섬기라고 합니다

2
00:00:04,030 --> 00:00:09,510
제가 그 제 소개 하는 장표를 만드는 걸 깜빡해 가지고 요

3
00:00:09,510 --> 00:00:11,400
제 이름을 소리를 못 했어요

4
00:00:11,400 --> 00:00:14,720
제 이름 다시 한번 말씀 드리면 한 섬기라고 하고요

5
00:00:14,720 --> 00:00:17,860
저는 피플펀드 라는 회사에서 이제 P2P

6
00:00:17,860 --> 00:00:21,950
금융서비스를 만드는 작업을 좀 하고 있어요

7
00:00:21,950 --> 00:00:23,400
발표는 바로 시작하고

8
00:00:23,400 --> 00:00:25,440
마지막에 조금 더 회사에 대해서

9
00:00:25,440 --> 00:00:29,440
간략하게만 말씀드리도록 하겠습니다

10
00:00:29,440 --> 00:00:31,110
제가 준비한 건 파이썬으로

11
00:00:31,110 --> 00:00:33,220
서버를 극한까지 끌어다쓰기 워싱

12
00:00:33,220 --> 00:00:37,860
카이온의 밑바닥 이라는 주제로 발표준비를 했는데

13
00:00:37,860 --> 00:00:40,250
약간 부족한 부분이 있을 수도 있을 것 같아요

14
00:00:40,250 --> 00:00:44,140
제가 생각보다 약간 아쉬운 며느리 많이 있더라고요

15
00:00:44,140 --> 00:00:45,220
알아 보다 보니까 그래서

16
00:00:45,220 --> 00:00:48,220
좀 양해를 좀 부탁 드리도록 하겠습니다

17
00:00:48,220 --> 00:00:51,820
일단 먼저 이러니 용어들을 좀 설명을 드리고

18
00:00:51,820 --> 00:00:52,990
넘어갈게요

19
00:00:52,990 --> 00:00:56,660
싱크로너스 싱크로너스 블랙킹

20
00:00:56,660 --> 00:01:00,610
나인블럭 용어들이 이제 많이 등장을 하게 됐는데

21
00:01:00,610 --> 00:01:04,550
개발하다보면 용어들이 어떤 의미를 갖고 있는지

22
00:01:04,550 --> 00:01:06,600
조금 이제 확실하게 좀 짚고

23
00:01:06,600 --> 00:01:08,450
넘어가는 좋을 것 같아서요

24
00:01:08,450 --> 00:01:11,210
제가 이해를 하는 바에 대해서

25
00:01:11,210 --> 00:01:14,040
좀 설명하면 드리도록 하겠습니다

26
00:01:14,040 --> 00:01:17,070
싱크로너스 랑 싱크로너스 동기

27
00:01:17,070 --> 00:01:20,510
동기 방식이랑 비동기방식 이라는 프로그램이 있는데

28
00:01:20,510 --> 00:01:24,640
말씀드림 프로그램의 주 실행

29
00:01:24,640 --> 00:01:27,520
그름을 멈추지 않고 진행을 할 수 있는가

30
00:01:27,520 --> 00:01:29,170
여부가 이제 싱크론 어떠냐

31
00:01:29,170 --> 00:01:30,830
아니면 싱크로너스 야

32
00:01:30,830 --> 00:01:34,370
이거 결정하는 거라고 생각하고 있어요

33
00:01:34,370 --> 00:01:36,660
다시 조금 더 자세하게 설명을 드리면

34
00:01:36,660 --> 00:01:39,160
이제 코드의 실행 결과처리

35
00:01:39,160 --> 00:01:40,980
혹은 이제 고대의 실행결과를 공급

36
00:01:40,980 --> 00:01:44,110
활용하는 걸 이제 별도의 채널에 맡겨진 뒤에

37
00:01:44,110 --> 00:01:45,510
그리고 결과를 기다리지 않고

38
00:01:45,510 --> 00:01:47,520
선 바로 다음 코드를 방식으로

39
00:01:47,520 --> 00:01:49,790
프로그램을 만약에 개발을 하게 된다면

40
00:01:49,790 --> 00:01:51,830
이건 싱크로너스 프로그램이라고

41
00:01:51,830 --> 00:01:53,520
보통 부를 수 있을 것 같아요

42
00:01:53,520 --> 00:01:56,500
여기서 쓰이는 기법들이 보통 이제 프라미스

43
00:01:56,500 --> 00:01:58,810
나 아니면 파이썬에서는 코루틴 같은 것들이

44
00:01:58,810 --> 00:02:01,590
제 쓰이게 되죠

45
00:02:01,590 --> 00:02:03,450
싱크로너스 라고 하면

46
00:02:03,450 --> 00:02:08,300
그 반대로 이제 코드 실행 결과들이 이제 즉시 실행되면서

47
00:02:08,300 --> 00:02:10,380
이제 다른 작업들을 할 수 없는 방식

48
00:02:10,380 --> 00:02:13,810
이제 싱크로너스 프로그래밍을 거고요

49
00:02:13,810 --> 00:02:17,990
금제 많이 헷갈릴 수 있는 게 관제 싱크로너스 랑

50
00:02:17,990 --> 00:02:19,500
나는 블러킹 이라고

51
00:02:19,500 --> 00:02:21,750
비교를 해보면 좀 많이 해 드릴 수 있어요

52
00:02:21,750 --> 00:02:23,520
여기서 일단 먼저 블랙킹

53
00:02:23,520 --> 00:02:26,620
그다음에 난 블러킹 I O 가 어떤 차이가 있는지

54
00:02:26,620 --> 00:02:28,670
만 먼저 찍고 넘어갈게요

55
00:02:28,670 --> 00:02:31,430
난 블러킹 아이 오라고 하면

56
00:02:31,430 --> 00:02:34,950
이제 입출력 처리가 완료될 때까지 기다릴 것이냐

57
00:02:34,950 --> 00:02:36,420
아니면 시작만 해주고

58
00:02:36,420 --> 00:02:39,010
선 다음작업을 바로 진행을 할 것이냐

59
00:02:39,010 --> 00:02:40,740
여부에 따라서 블랙 중이냐

60
00:02:40,740 --> 00:02:43,120
아니면 나는 블러킹 있냐 이 ioi

61
00:02:43,120 --> 00:02:47,550
작업해 돼 방식이 결정이 된 결정됩니다

62
00:02:47,550 --> 00:02:49,820
만약에 아이유 작업이 또 끝나고 나서도

63
00:02:49,820 --> 00:02:51,320
이제 수속 작업이 있을 수 있는데

64
00:02:51,320 --> 00:02:53,420
이런 경우에는 뭐 폴링을 하거나

65
00:02:53,420 --> 00:02:56,260
아니면 콜백 같은 함수를 넘겨줘서 처리

66
00:02:56,260 --> 00:02:58,940
하는 방식이 보통 이제 사용을 해요

67
00:02:58,940 --> 00:03:01,380
제가 지금 설명 한 게 굉장히 비슷해서

68
00:03:01,380 --> 00:03:03,790
약간 개념상 헷갈릴 수 있어 가지고

69
00:03:03,790 --> 00:03:06,820
이제 비 동기랑 킹이랑 어떤 차이가 있는 야

70
00:03:06,820 --> 00:03:09,340
이거 이런 질문을 많이 한다고 하면요

71
00:03:09,340 --> 00:03:14,110
만약에 블랙킹 아이 오늘 사용했어요

72
00:03:14,110 --> 00:03:18,340
그럼에도 불구하고 별도의 채널을 통해서 아까 설명드린 것처럼

73
00:03:18,340 --> 00:03:21,050
별도의 채널을 통해서 작업을 해서

74
00:03:21,050 --> 00:03:22,110
만약에 어떤 프로그램

75
00:03:22,110 --> 00:03:26,920
해주실 흐름을 막질 안 왔다고 하면 이 프로그램은 싱크로너스

76
00:03:26,920 --> 00:03:30,990
프로그래밍으로 개발을 했다고도 했다고 말을 할 수 있어요

77
00:03:30,990 --> 00:03:33,650
알게 두 개가 서로 다른 개념 인거죠

78
00:03:33,650 --> 00:03:35,010
난 블랙킹 이라고 하면

79
00:03:35,010 --> 00:03:37,950
아이 대한 이야기를 하는 게 내가 없을 거고요

80
00:03:37,950 --> 00:03:39,850
싱글하우스 프로그래밍 이라고 하면

81
00:03:39,850 --> 00:03:42,210
말 그대로 프로그래밍 방식인 건데

82
00:03:42,210 --> 00:03:45,920
프로그램 자체가 멈추지 않고 잘 돌아갈 수 있느냐

83
00:03:45,920 --> 00:03:47,950
그런 방식으로 재개발이 되었느냐

84
00:03:47,950 --> 00:03:49,760
이제 비동기방식 으로

85
00:03:49,760 --> 00:03:56,140
프로그래밍 했다고 말씀 드릴 수 있을 것 같아요

86
00:03:56,140 --> 00:03:59,950
그러면 비동기 방식을

87
00:03:59,950 --> 00:04:03,570
비동기방식 에 프로그래밍을 활용을 하는 프레임워크가

88
00:04:03,570 --> 00:04:07,840
어떤 것들이 있는지 한번 좀 찍고 넘어가볼까

89
00:04:07,840 --> 00:04:12,790
제가 어싱플러스 프로그래밍 하고서 싱크로너스 웹타이머

90
00:04:12,790 --> 00:04:16,800
파이썬 이렇게 검색을 하니까 엄청나게 많은 회복이 나오더라고요

91
00:04:16,800 --> 00:04:18,420
저도 저 사실 깜짝 놀랐는데

92
00:04:18,420 --> 00:04:22,530
짓 하고 말씀을 드리면 정리해 놓은 순서는

93
00:04:22,530 --> 00:04:24,800
이제 깃허브에서 좋아요를 얼마나 많이 받았는지

94
00:04:24,800 --> 00:04:28,100
순서로 좀 정리를 한 거거든요

95
00:04:28,100 --> 00:04:31,360
코트라는 프레임웍이 있더라고요

96
00:04:31,360 --> 00:04:34,590
차를 568길 받은 거로 나와 있는데

97
00:04:34,590 --> 00:04:36,980
내가 디자인이 좀 다르죠 많이 못 보셨을 거 같은데

98
00:04:36,980 --> 00:04:38,970
이제 긴 앱에서 좋아요를 받으면

99
00:04:38,970 --> 00:04:42,190
요런 형식의 UI 로 표시됩니다

100
00:04:42,190 --> 00:04:43,440
근데 코트를 보니까

101
00:04:43,440 --> 00:04:47,140
3개월 전에 마지막 커미셔너 커미셔너 요 활용하면서

102
00:04:47,140 --> 00:04:52,180
실제로 프로덕션에서 사용할 수가 없는 프레임웍 이겠죠

103
00:04:52,180 --> 00:04:55,650
그리고 그 밑에는 이제 그러라는 프랭크 있었는데

104
00:04:55,650 --> 00:04:59,260
아 이거는 스타를 686 개를 받았어

105
00:04:59,260 --> 00:05:01,020
근데 그걸로 하는 살펴보니까

106
00:05:01,020 --> 00:05:03,900
3년 전에 마지막 커밋이 있더라고

107
00:05:03,900 --> 00:05:07,350
설명으로는 이제 마이크로웹 프레임워크라고 하고

108
00:05:07,350 --> 00:05:10,680
이제 씽크 씽크 you 를 사용한다

109
00:05:10,680 --> 00:05:12,010
거는 되어 있는데

110
00:05:12,010 --> 00:05:13,400
사실상 이제 개발은

111
00:05:13,400 --> 00:05:15,340
거의 멈춘 상태로 보시면 될 거 같고

112
00:05:15,340 --> 00:05:19,210
스터디 식으로 개발하다가 중단된 게 아닌가 싶어요

113
00:05:19,210 --> 00:05:20,850
그리고 베스트 api 라는 게 있는데

114
00:05:20,850 --> 00:05:23,100
이거는 이제 스타 를 좀더 많이 받았죠

115
00:05:23,100 --> 00:05:25,180
3700 개 정도 받았는데

116
00:05:25,180 --> 00:05:26,620
어 이거는 살펴보니까 10일 전에

117
00:05:26,620 --> 00:05:28,850
마지막 구미시 있더라고요

118
00:05:28,850 --> 00:05:33,590
언니 친구는 조금 특이한 게 파이썬 타입 헌팅을 쓴다고

119
00:05:33,590 --> 00:05:35,460
이제 설명을 좀 해 놨더라고요

120
00:05:35,460 --> 00:05:38,880
근데 최신 어싱플러스 웹

121
00:05:38,880 --> 00:05:41,610
프레임웍은 전부 다 파이팅 파이팅 쓰고 있어요

122
00:05:41,610 --> 00:05:45,090
왜냐하면 이미 파이썬 3.6 이상 기반으로 만들었기 때문에

123
00:05:45,090 --> 00:05:48,060
파이팅 쓰지 않을 이유가 없어서 다들 쓰고 있죠

124
00:05:48,060 --> 00:05:49,400
그래서 이건 자랑거리는 아닌데

125
00:05:49,400 --> 00:05:53,150
어쨌든 잘 하는 해 놨더라고요

126
00:05:53,150 --> 00:05:56,150
그리고 나서 이제 다 등으로도 스타를 많이 받은 게 이보라

127
00:05:56,150 --> 00:05:58,660
라는 박스가 있어요

128
00:05:58,660 --> 00:06:02,300
이거는 스타 를 5천 개 이상을 받았는데

129
00:06:02,300 --> 00:06:07,260
설명을 보면 이제 플라스크란 가장 유사한 프레임워크다

130
00:06:07,260 --> 00:06:09,520
하라 그래 설명이 간단하게도 있더라고요

131
00:06:09,520 --> 00:06:15,010
그 파이썬 웹 웹 대화를 하게 되면 웹서버개발 하게 되면

132
00:06:15,010 --> 00:06:17,160
이제 보통 일반적으로 선택하는 게 잔고

133
00:06:17,160 --> 00:06:19,160
아니면 플래시 켜 둘 중에 하난데

134
00:06:19,160 --> 00:06:22,000
이제 전부 다 대부분의 것들이 지원해 되는 아주 편하게

135
00:06:22,000 --> 00:06:23,970
개발할수 잔고를 선택을 하고

136
00:06:23,970 --> 00:06:25,700
아니면 간단하게 작고

137
00:06:25,700 --> 00:06:28,070
빠르게 만나고 싶으면 플라스크 선택하는 보통

138
00:06:28,070 --> 00:06:29,030
이제 둘 중에 하나

139
00:06:29,030 --> 00:06:31,870
선택 제가 이제 몇 년 전만 해도 있었는데

140
00:06:31,870 --> 00:06:35,740
플라스크가 가볍고 빠르게 만들 수 있는 그런 장점 때문에

141
00:06:35,740 --> 00:06:39,910
스크를 활용하는 그 방식을 활용하는 싱크로너스

142
00:06:39,910 --> 00:06:43,070
웹프라임 엎드리 많이 있더라고요

143
00:06:43,070 --> 00:06:46,690
첫 번째로 비보라 나는 왜 프레임웍에

144
00:06:46,690 --> 00:06:51,210
사이트에 가보면 첫 번째 나오는 게 가장 빠른 웹 파이썬

145
00:06:51,210 --> 00:06:53,310
웹 서버를 만드는 게 목표 라고 되어 있어

146
00:06:53,310 --> 00:06:55,550
간단하게 딱 한 줄로 써있구요

147
00:06:55,550 --> 00:06:58,370
기본적으로는 멀티프로세서 아키텍처를 사용을 해서

148
00:06:58,370 --> 00:07:00,850
이제 멀티 cpu 코어 를 있는 대로 활용하는 게

149
00:07:00,850 --> 00:07:02,490
기본적인 전략이고

150
00:07:02,490 --> 00:07:05,960
이제 가능한 경우에는 이제 UV 루비랑 있고

151
00:07:05,960 --> 00:07:07,210
근데 C 로그에 앉아있는

152
00:07:07,210 --> 00:07:11,090
더 빠른 방식을 사용한다고 소개가 되어 있어요

153
00:07:11,090 --> 00:07:14,240
제가 이제 궁금했던 게 이유비 이유비 도대체 뭐길래

154
00:07:14,240 --> 00:07:15,890
이것 때문에 말을 하고 얘기를 하는지

155
00:07:15,890 --> 00:07:17,760
이게 사실 궁금해서 발표를

156
00:07:17,760 --> 00:07:22,820
좀 준비를 시작을 하게 되었고

157
00:07:22,820 --> 00:07:25,560
송도 넘어가 보면 aio http

158
00:07:25,560 --> 00:07:26,720
라면 끓여 먹고 있습니다

159
00:07:26,720 --> 00:07:30,020
아마 이제 여기부터는 조금 이름이 들어보셨을 것 같아요 이

160
00:07:30,020 --> 00:07:36,100
친구는 비탈에서 스타 를 8000개 이상을 받았는데

161
00:07:36,100 --> 00:07:39,110
싱크로 씽크아이 오래 사용하는 비동기

162
00:07:39,110 --> 00:07:41,360
httpclient 면서 동시에

163
00:07:41,360 --> 00:07:43,960
이제 서버 쪽도 같이 다를 수 있는

164
00:07:43,960 --> 00:07:46,700
그런 프레임워크라고 소개를 하고 있어요

165
00:07:46,700 --> 00:07:49,180
아 왜 이렇게 또 같이 지원을 하고

166
00:07:49,180 --> 00:07:50,160
웹 서버에서 는 뭐

167
00:07:50,160 --> 00:07:51,980
미들웨어와 시그널을 제공한다는

168
00:07:51,980 --> 00:07:53,490
계속 개로 되어 있더라고요

169
00:07:53,490 --> 00:07:58,160
언제 알고 보니까 엄청 대단한 일은 아니고

170
00:07:58,160 --> 00:08:00,680
이제 보통 이제 웹서버개발 하게 되면

171
00:08:00,680 --> 00:08:03,520
실제로 리퀘스트를 처리하는 과정

172
00:08:03,520 --> 00:08:05,660
전과후 에서 어떤 리퀘스트 핸들

173
00:08:05,660 --> 00:08:09,090
너라는 걸 많이 받아서 작업을 하게 되는데

174
00:08:09,090 --> 00:08:12,190
미들웨어란 친구가 그 친구들이랑

175
00:08:12,190 --> 00:08:15,110
그 실제 작업을 처리하는 그전 후에 과장이고

176
00:08:15,110 --> 00:08:16,050
시그널 일하는 거

177
00:08:16,050 --> 00:08:20,420
제공을 특이하게 하는 만약에 뭐 hdcp 하도 같은 거 수정하거나

178
00:08:20,420 --> 00:08:22,780
이런 작업을 할 때는 그

179
00:08:22,780 --> 00:08:27,840
내가 작성을 하는 과정 중에서는 수정을 직접 할 수 없고

180
00:08:27,840 --> 00:08:28,690
뒤에 맡겨 놨다

181
00:08:28,690 --> 00:08:31,550
자고요 프레임워크의 그걸 시그널이란 기능으로

182
00:08:31,550 --> 00:08:34,950
제공을 하고 있더라구요

183
00:08:34,950 --> 00:08:35,720
그러고 나면 이제 아마

184
00:08:35,720 --> 00:08:37,400
작년 재작년부터 팔콘

185
00:08:37,400 --> 00:08:38,850
에서도 많이 소개 받았던 거 같은데

186
00:08:38,850 --> 00:08:40,640
센이라는 프레임워크가 있어요

187
00:08:40,640 --> 00:08:42,900
2층부터는 이제 스타가 만개가 넘어가죠

188
00:08:42,900 --> 00:08:48,160
12000개 스타 를 받았는데 이 친구의 특징으로는

189
00:08:48,160 --> 00:08:49,780
높은 성능을 http

190
00:08:49,780 --> 00:08:51,330
서버 를 쉽게 구축하고

191
00:08:51,330 --> 00:08:54,240
동시에 확장성이 유리하게 되어 있는 것을

192
00:08:54,240 --> 00:08:55,310
위대 하게 되어 있는

193
00:08:55,310 --> 00:08:57,580
그런 프레임워크를 만드는 게 목표 라고 되어 있습니다

194
00:08:57,580 --> 00:09:00,780
비보라 보다는 조금 더 디테일한 목표를 갖고 있는데

195
00:09:00,780 --> 00:09:03,280
클래스기반 회비를 제공하기도 하고

196
00:09:03,280 --> 00:09:05,920
다음에 블루프린트 라고 이름을 붙여 놨는데

197
00:09:05,920 --> 00:09:08,060
결국 이제서 그라우팅을 제공을 한다

198
00:09:08,060 --> 00:09:09,980
라는 걸 특징으로 되자고 있더라고요

199
00:09:09,980 --> 00:09:11,200
다시 써보려고 친구라는건

200
00:09:11,200 --> 00:09:13,080
웹 개발 많이 해보셨으면 모였다

201
00:09:13,080 --> 00:09:15,410
플레이에서 대부분 지원을 하고 있 장고

202
00:09:15,410 --> 00:09:16,410
같은 것도 그렇고

203
00:09:16,410 --> 00:09:19,570
라우팅을 할 때 이거 이제 분리해서 관리할 수 있느냐

204
00:09:19,570 --> 00:09:22,070
여보라고 보시면 이해가 쉬울 것 같아요

205
00:09:22,070 --> 00:09:24,290
여기서도 똑같은 게 나오더라고요

206
00:09:24,290 --> 00:09:27,470
UV 루비라는 걸 사용을 해서 비동기로

207
00:09:27,470 --> 00:09:29,810
근데 빠르게 처리할 수 있다고 하더라고요

208
00:09:29,810 --> 00:09:33,150
제가 2 3 4 6 5 쓰고 아까 보여 드렸더니

209
00:09:33,150 --> 00:09:35,140
제비 돌아가는 거 있어도 쓰고 있는데

210
00:09:35,140 --> 00:09:36,300
자유롭게 본지 이제

211
00:09:36,300 --> 00:09:41,200
조금 조금만 더 설명회 좀 드리도록 하겠습니다

212
00:09:41,200 --> 00:09:44,460
마지막으로 토네이도 라면 끓여 먹을까 있어요

213
00:09:44,460 --> 00:09:46,800
친구는 스타일을 18,000원 * 받았는데

214
00:09:46,800 --> 00:09:48,980
실제적으로 이제 어떤 크로스플레임 파이썬

215
00:09:48,980 --> 00:09:50,430
이라고 검색 을 하시면

216
00:09:50,430 --> 00:09:56,300
가장 많은 검색 결과가 나오는 그럼 빨리 먹여 근데

217
00:09:56,300 --> 00:09:59,690
토네이도는 현재는 잘 사용을 안 되고 있죠

218
00:09:59,690 --> 00:10:01,310
토네이도가 사용됐던 게 사실

219
00:10:01,310 --> 00:10:02,620
파이썬 2.7 대해서

220
00:10:02,620 --> 00:10:05,890
비동기로 웹서버를 제작하려면

221
00:10:05,890 --> 00:10:08,290
선택지가 토네이도 밖에 없었어

222
00:10:08,290 --> 00:10:11,360
그 당시에는 이제 토네이도 가만있어 쓰이긴 했었는데

223
00:10:11,360 --> 00:10:14,690
최근에는 이제 많은 기능들을 제공

224
00:10:14,690 --> 00:10:16,450
부가 기능을 제공해 주는 쪽으로 가면

225
00:10:16,450 --> 00:10:18,910
그냥 아예 싱크로스 하게 장 보러 가거나

226
00:10:18,910 --> 00:10:20,630
아니면 빠르게 하고 싶다 하면

227
00:10:20,630 --> 00:10:23,580
최근에는 방금 말씀드렸던

228
00:10:23,580 --> 00:10:28,450
그 센이라는 프레임워크를 주로 사용을 하고 있죠

229
00:10:28,450 --> 00:10:32,990
토네이도는 똑같이 이제 클라이언트 서버 둘 다 하고

230
00:10:32,990 --> 00:10:36,310
윗줄에 있는 것처럼 웹 프레임워크 80인데

231
00:10:36,310 --> 00:10:37,750
동시에 이제 비동기

232
00:10:37,750 --> 00:10:39,800
네트워크 라이브러리라고 소개가 되어 있어요

233
00:10:39,800 --> 00:10:44,310
그 이유가 원래 이제 파이썬의 최근 최신 최신 버전

234
00:10:44,310 --> 00:10:45,740
애는 이제 모아 싱크

235
00:10:45,740 --> 00:10:47,570
나 웨이 같은 걸 이제 해 주는데

236
00:10:47,570 --> 00:10:49,360
그 저장 이제 이런 기능들이 없다 보니까

237
00:10:49,360 --> 00:10:51,430
이제 직접 구현한 부분들이 되게 많아요

238
00:10:51,430 --> 00:10:53,700
그래서 비동기 네트워크

239
00:10:53,700 --> 00:10:56,660
라이브러리라고 소개를 하고 있어요

240
00:10:56,660 --> 00:10:59,660
토네이도 다 하는 거라

241
00:10:59,660 --> 00:11:03,260
아니면 이제 파이썬에서 예전부터 제공

242
00:11:03,260 --> 00:11:05,170
제공해주고 있던 일들 하는 법

243
00:11:05,170 --> 00:11:06,780
활용해서 비동기를 이제

244
00:11:06,780 --> 00:11:12,740
직접 구현을 한 회 보기 라고 보시면 됩니다

245
00:11:12,740 --> 00:11:14,510
어 저 계속 몇 번지에

246
00:11:14,510 --> 00:11:17,550
연금 해드렸던 juv 이라는 친구가 있더라고요

247
00:11:17,550 --> 00:11:19,070
네 그 친구랑 이제

248
00:11:19,070 --> 00:11:21,130
파이썬에서 얘기하는 씽크아이 오라는

249
00:11:21,130 --> 00:11:24,460
라이브러리가 어떤 의미를 하는지 알려 가게 좀 설명

250
00:11:24,460 --> 00:11:29,620
좀 드릴 어 씽크아이 오라는 친구를 말씀을 드리면

251
00:11:29,620 --> 00:11:31,240
사실 이것도 팔콘 뿐만 아니라

252
00:11:31,240 --> 00:11:32,870
모델 변화에 따른 컴퓨터에서도

253
00:11:32,870 --> 00:11:34,450
엄청나게 많이 소개가 되어 있어서

254
00:11:34,450 --> 00:11:39,380
제가 간략하게 이제 특징만 좀 설명회 좀 드릴게요

255
00:11:39,380 --> 00:11:41,010
1시간은 구몬이 나왔죠

256
00:11:41,010 --> 00:11:42,050
파이썬에서 3.6

257
00:11:42,050 --> 00:11:45,160
3.6 등장했는데

258
00:11:45,160 --> 00:11:46,850
이구매에 사용 사용 해서

259
00:11:46,850 --> 00:11:51,470
동시성 코드를 작성할 수 있는 그런 라이브러리입니다

260
00:11:51,470 --> 00:11:54,060
뭐 파이썬 코루틴의 동시에 실행을 하거나

261
00:11:54,060 --> 00:11:56,390
아니면 대화를 할 수 있는 걸 제공을 하기도 하고

262
00:11:56,390 --> 00:12:00,620
자식 프로세스 차이도 F3300 하기도 하고

263
00:12:00,620 --> 00:12:01,690
이제 동시성 코드로

264
00:12:01,690 --> 00:12:04,330
이제 동기화하는 이런 작업들을 해주고요

265
00:12:04,330 --> 00:12:06,490
저수준의 일하는 거 제공해주는데

266
00:12:06,490 --> 00:12:08,540
네트워킹이 나 아니면 어

267
00:12:08,540 --> 00:12:10,560
자식프로세스를 실행을 할 거냐

268
00:12:10,560 --> 00:12:12,260
아니면 OS 에서 시그널을 받았을 때

269
00:12:12,260 --> 00:12:13,510
어떻게 처리를 할 거냐

270
00:12:13,510 --> 00:12:15,400
이런 것들도 이제 api 를 제공 해 줘서

271
00:12:15,400 --> 00:12:17,510
지금 핸들링을 할 수 있게 해 주고 있어요

272
00:12:17,510 --> 00:12:19,420
그리고 이 부분이 제가 가장 이제

273
00:12:19,420 --> 00:12:20,900
이번에 관심을 부분인데

274
00:12:20,900 --> 00:12:23,440
이제 비동기 api 를 제공하는 이벤트

275
00:12:23,440 --> 00:12:25,180
루프를 하는 걸 직접 만들고

276
00:12:25,180 --> 00:12:30,180
관리를 할 수 있는 기능을 제공해 주고 있습니다

277
00:12:30,180 --> 00:12:34,310
어 싱카이 오는 사용법도 간단하게만 말씀드려도 갈게요

278
00:12:34,310 --> 00:12:36,330
이런 식으로 재활용을 할 수 있어요

279
00:12:36,330 --> 00:12:39,030
이제 이제 임포트를 하게 되면

280
00:12:39,030 --> 00:12:42,730
어웨이 이라는 이제 부문으로 활용해서 수 있죠

281
00:12:42,730 --> 00:12:44,170
왜 이 시간에 구매를 활용해서

282
00:12:44,170 --> 00:12:47,820
나중에 처리가 될 수 있도록 대기를 시켜 주는 건데

283
00:12:47,820 --> 00:12:51,620
싱카이 5에서 싱카이 own 일하는 거 실행을 하면서

284
00:12:51,620 --> 00:12:56,240
거기에서 함수를 함수를 링크라고 키워드 달려 있는 거

285
00:12:56,240 --> 00:12:59,220
함수를 실행을 해 주면 이 친구는 이제 아까

286
00:12:59,220 --> 00:13:01,870
말씀드렸던 처음에 설명드렸던 개념인 이제

287
00:13:01,870 --> 00:13:05,670
싱크로너스 프로그래밍 방식으로 동작을 하기 때문에

288
00:13:05,670 --> 00:13:09,050
이제 넌 뒤에 만약에 다른 프로그램을

289
00:13:09,050 --> 00:13:11,920
내가 작성을 하더라도 이 메인 메인

290
00:13:11,920 --> 00:13:13,500
일하는 게 실행되지 않았음에도

291
00:13:13,500 --> 00:13:18,190
불구하고 다음 코드가 실행될 수 있어

292
00:13:18,190 --> 00:13:20,970
그럼 이제 이제부터 이제 이야긴데

293
00:13:20,970 --> 00:13:24,890
유리 어떤 거냐면 파이썬에서 씽크아이

294
00:13:24,890 --> 00:13:27,880
오후에 보면 아까 잠깐 설명드렸던 이벤트루프

295
00:13:27,880 --> 00:13:29,010
일하는 친구가 있어요

296
00:13:29,010 --> 00:13:32,170
이벤트루프 가결 시끄러워서

297
00:13:32,170 --> 00:13:33,350
프로그래밍에서는 어떻게 보면

298
00:13:33,350 --> 00:13:36,410
이제 핵심적인 역할을 한다고 보실 수 있을 거거든요

299
00:13:36,410 --> 00:13:39,370
그러면 이 친구가 이제 아까

300
00:13:39,370 --> 00:13:40,690
방금 보여드렸던 이제

301
00:13:40,690 --> 00:13:44,760
씽크웨이 타는 이런 함수들을 뒤에 다 숨겨 놓고

302
00:13:44,760 --> 00:13:48,130
어떻게 이 친구들을 순차적으로 순차적 이 아니라

303
00:13:48,130 --> 00:13:50,630
어떻게 하면 효과적으로 처리를 할 수 있는지

304
00:13:50,630 --> 00:13:54,520
이걸 담당하는 게 이벤트루프 있거든요

305
00:13:54,520 --> 00:13:56,770
그래서 이벤트를 얼마나 잘 만들었는데

306
00:13:56,770 --> 00:13:58,920
따라서 실행 성능

307
00:13:58,920 --> 00:14:02,250
좀 좌지우지 된다고 볼 수 있을 것 같더라고요

308
00:14:02,250 --> 00:14:04,370
유럽은 싸이 선으로 개발 됐어요

309
00:14:04,370 --> 00:14:05,350
씨 파이썬은 아니고

310
00:14:05,350 --> 00:14:09,550
싸이 선으로 고양이 되는데 이 친구는 리뷰부

311
00:14:09,550 --> 00:14:13,800
일하는 친구로 독일 한다고 설명이 되어 있더라고요

312
00:14:13,800 --> 00:14:17,020
그래서 이제 UV 에 대해서 알아봤는데요

313
00:14:17,020 --> 00:14:19,430
리뷰 보이는 이제 파이썬은 아니고

314
00:14:19,430 --> 00:14:21,190
싸이 선으로 개발된 것도 아니고

315
00:14:21,190 --> 00:14:25,940
올리브유 보이는 그 시로 작성되어 있는 그럼

316
00:14:25,940 --> 00:14:28,260
뭐 드립니다

317
00:14:28,260 --> 00:14:31,470
UV 루베 사용 방법은 그냥 간단한데

318
00:14:31,470 --> 00:14:32,860
씽크라이온 안에 보면

319
00:14:32,860 --> 00:14:36,370
굉장히 많은 비동기방식 으로 처리될 수 있는 api 를

320
00:14:36,370 --> 00:14:40,170
제공 안 해 주고 있어요 이 비동기로 처리할 수 있는 아이들은

321
00:14:40,170 --> 00:14:44,060
그대로 사용을 하면서 유브이로그 이벤트루프 라는 것만

322
00:14:44,060 --> 00:14:46,500
이제 대체를 하게 되는 그런 개념이다

323
00:14:46,500 --> 00:14:49,470
그래서 씽크 U 에서 보시는 것처럼 3

324
00:14:49,470 --> 00:14:53,470
이벤트로 파일럿이라는 함수를 호출할 때 UV 루백

325
00:14:53,470 --> 00:14:57,230
구현되어 있는 이벤트루프 를 사용하도록 이게 설정을 해 주시면

326
00:14:57,230 --> 00:15:00,500
그 다음부터는 이제 싱크가 요가동작을 할 때

327
00:15:00,500 --> 00:15:05,450
UV 루비 제공해주는 이벤트루프 를 사용하게 되어

328
00:15:05,450 --> 00:15:07,630
그러니까 이름이 뭐냐고 하면

329
00:15:07,630 --> 00:15:10,990
이름 이름의 유래를 찾기가 힘들었는데

330
00:15:10,990 --> 00:15:14,040
유이가 결국 뜻하는게 유니콘 벨로시랩터

331
00:15:14,040 --> 00:15:15,820
라이브러리라고 하더라고요

332
00:15:15,820 --> 00:15:18,890
그 작성자가 공룡을 좀 약간 좋았던 거 같아요

333
00:15:18,890 --> 00:15:20,960
그 어떤 거냐면

334
00:15:20,960 --> 00:15:24,650
이제 크로스플랫폼 을 지원하는 라이브 원래 노재기 있어요

335
00:15:24,650 --> 00:15:26,790
때문에 만들어진 라이브러리 해요

336
00:15:26,790 --> 00:15:31,320
그 노드 JS 가 원 스레드로 처리

337
00:15:31,320 --> 00:15:31,910
모든 차례다

338
00:15:31,910 --> 00:15:33,730
확인해 줘 이벤트를 돌면서

339
00:15:33,730 --> 00:15:36,300
그래서 그걸 노드

340
00:15:36,300 --> 00:15:37,940
JS 가노라 가는 그

341
00:15:37,940 --> 00:15:41,380
근본적인 걸 구하기 위해서 작성해 산 건데

342
00:15:41,380 --> 00:15:42,990
이게 만들어지는지 요가

343
00:15:42,990 --> 00:15:46,710
노래 제스를 다른 플랫폼에서 플랫폼이라고 말하는 건

344
00:15:46,710 --> 00:15:48,580
그 OS

345
00:15:48,580 --> 00:15:51,380
윈도우즈 나 아니면 뭐 될 수도 있고

346
00:15:51,380 --> 00:15:54,030
안 될 수도 있는데

347
00:15:54,030 --> 00:15:55,750
여기서 이제 실행을 하기 위해서

348
00:15:55,750 --> 00:15:58,570
각자가 재개발되는 방식들이 달랐죠

349
00:15:58,570 --> 00:16:00,740
그 비동기로 아이유를

350
00:16:00,740 --> 00:16:04,360
처리할 수 있는 방식들이 각자 OS 받았는데

351
00:16:04,360 --> 00:16:07,310
각각 흩어져 있는 것들을 이제 한번

352
00:16:07,310 --> 00:16:10,910
이제 추상화를 해서 간단하게 하는 방법으로

353
00:16:10,910 --> 00:16:12,540
이제 쓸 수 있도록 만들어 놓은 게

354
00:16:12,540 --> 00:16:15,820
이제 리뷰라는 프레임 어떻게 해요

355
00:16:15,820 --> 00:16:18,240
그래서 이 친구는 이제 이벤트드리븐

356
00:16:18,240 --> 00:16:20,930
비동기 아이유 모델을 기반으로 만들어졌구요

357
00:16:20,930 --> 00:16:22,590
그 밑에 보이시는 이제 KQ

358
00:16:22,590 --> 00:16:25,400
나이폴 iocp 이런 것들을 기반으로

359
00:16:25,400 --> 00:16:26,970
이제 추상화를 해 놨습니다

360
00:16:26,970 --> 00:16:28,500
케이큐 오라고 하면

361
00:16:28,500 --> 00:16:30,990
어 많이 아마도 많이 쓰시고 계세요

362
00:16:30,990 --> 00:16:33,670
이제 bsd 맥

363
00:16:33,670 --> 00:16:38,160
맥 OS 를 포함한 뒤에 3개월에서 활용을 하는 이제 비동기방식

364
00:16:38,160 --> 00:16:40,530
아이 요철이 IP 아니고요

365
00:16:40,530 --> 00:16:43,250
이폰은 이제 리눅스 겨울에서 사용하는 거고

366
00:16:43,250 --> 00:16:49,130
우리는 윈도우즈 쪽에서 비동기 아이유 모델입니다

367
00:16:49,130 --> 00:16:50,560
네비 보이는 어

368
00:16:50,560 --> 00:16:54,280
여기 보이시는 이런 모듈로 이제 구성이 되어 있어요

369
00:16:54,280 --> 00:16:58,510
방금 설명드렸던 아이폰이나 KQ 같은 것들이 이제 왼쪽 아래

370
00:16:58,510 --> 00:17:00,740
좌측 하단에 보면 이제 나와 있죠

371
00:17:00,740 --> 00:17:04,180
어 이걸재 랩핑을 해서 동일한 api 로

372
00:17:04,180 --> 00:17:06,230
이거 사용할 수 있다고 되어 있고요

373
00:17:06,230 --> 00:17:08,570
여기서 반사경 들리지 않았던 이제 이벤트

374
00:17:08,570 --> 00:17:10,260
포츠 같은 경우에는 이건

375
00:17:10,260 --> 00:17:12,980
이제 요즘에는 거의 못 쓸 일 없는 거 같은데

376
00:17:12,980 --> 00:17:16,600
이제 솔라리스 oss 쓰고 쓰고 있는 아이오

377
00:17:16,600 --> 00:17:19,630
비동기 iod 를 말한다

378
00:17:19,630 --> 00:17:20,730
윈도우에서는 아이고

379
00:17:20,730 --> 00:17:22,940
이제 직접고용을 하게 되고요

380
00:17:22,940 --> 00:17:27,510
그 다음에 오른쪽에 보면 관련된 작업들

381
00:17:27,510 --> 00:17:30,120
그리고 유저코드 이런 것들은 이제 스레드풀

382
00:17:30,120 --> 00:17:36,640
계속 동작을 좌측에 있는 이제 그 뭐 네트워크 2월 하든가

383
00:17:36,640 --> 00:17:39,750
tcp udp 를 포함하여 네트웍 가요 같은 것들은 이포리

384
00:17:39,750 --> 00:17:41,870
나 이런 것들이 활용을 하게 되는 거고

385
00:17:41,870 --> 00:17:48,920
아이유 같은 경우에는 아직까지는 그 뭔가 아따

386
00:17:48,920 --> 00:17:52,620
그 확실하게 만들어져 있는

387
00:17:52,620 --> 00:17:57,780
그런 라이브러리나 이런 게 제공이 되는 게 아직 안 없어서

388
00:17:57,780 --> 00:18:00,620
스레드풀 해서 이제 동기 방식으로 작용을 해

389
00:18:00,620 --> 00:18:02,270
동기 방식을 사용하기 때문에 3D

390
00:18:02,270 --> 00:18:04,800
프로에서 파일을 핸들링하는 EBS

391
00:18:04,800 --> 00:18:06,710
강의 들어오게 되면 노트에 넣고

392
00:18:06,710 --> 00:18:09,990
거기서 작업이 완료되어 나면 다시 가져와서

393
00:18:09,990 --> 00:18:11,770
다음작업을 실행하는 이런 방식으로

394
00:18:11,770 --> 00:18:15,090
저장이 되어 있더라고요

395
00:18:15,090 --> 00:18:17,900
그 아이 온오프가 어떤 거냐면

396
00:18:17,900 --> 00:18:22,370
각각 다른 3에 대해서 실행되는 여러 여러 가지

397
00:18:22,370 --> 00:18:24,320
여러 가지의 이벤트를 이벤트루프

398
00:18:24,320 --> 00:18:27,760
하는 거에서 실행하도록 만들어진 네비 부위의 이벤트

399
00:18:27,760 --> 00:18:29,860
로프는 이제 직접 언급되지

400
00:18:29,860 --> 00:18:33,420
이름이 가장 중요한 데 그 다 쓰레기

401
00:18:33,420 --> 00:18:34,760
세이프 하지 않아요

402
00:18:34,760 --> 00:18:38,070
기본적으로는 3 하지 않기 때문에

403
00:18:38,070 --> 00:18:40,630
내가 프로그래밍을 작성하려고 할 때

404
00:18:40,630 --> 00:18:42,640
그걸 잘 이해를 작성을 하셔요

405
00:18:42,640 --> 00:18:45,040
성능 성능에서도 이제 볼 수 있으면서

406
00:18:45,040 --> 00:18:48,780
동시에 안전한 프로그램을 만들 수가 있어요

407
00:18:48,780 --> 00:18:50,860
그리고 방금 전에 설명드렸던 것처럼

408
00:18:50,860 --> 00:18:54,790
모든 아이유는 각각 OS 에 맞도록 난 블로킹 소켓 됐어

409
00:18:54,790 --> 00:18:59,180
이제 수영을 하겠다

410
00:18:59,180 --> 00:19:01,070
이제 이제 루프가 어떻게 돌아가는지

411
00:19:01,070 --> 00:19:02,800
아내가 원리인데 이 원리에 대해서

412
00:19:02,800 --> 00:19:07,020
이제 간략하게 설명을 좀 드릴게요

413
00:19:07,020 --> 00:19:08,740
처음에 릴보이 위해선

414
00:19:08,740 --> 00:19:12,610
어떻게 시작하려면 근처에 살펴보니까

415
00:19:12,610 --> 00:19:15,310
여기서 그 옵티마이제이션 이제 많이 되어 있어요

416
00:19:15,310 --> 00:19:17,120
최대한 빠르게 만들기 위한

417
00:19:17,120 --> 00:19:19,320
그런 서류들이 많이 되어 있고요

418
00:19:19,320 --> 00:19:21,560
그 중에 하나가 시작부터 돼 있더라고요

419
00:19:21,560 --> 00:19:23,930
이제 시간은 관련된 시스템호출

420
00:19:23,930 --> 00:19:26,100
숫자 자체를 이제 줄이기 위해서

421
00:19:26,100 --> 00:19:27,820
이벤트루프 시작을 할 때

422
00:19:27,820 --> 00:19:29,950
현재 시각을 이제 캐싱을 해놓고 쓰더라고요

423
00:19:29,950 --> 00:19:31,650
시스템 에다가 시간에 물어보지 않고

424
00:19:31,650 --> 00:19:34,050
진짜 프로그램 내에서 시간 확인하기 위해서

425
00:19:34,050 --> 00:19:37,460
매번 루프를 돌때마다 현재 시간에 기록을 해 놓고

426
00:19:37,460 --> 00:19:40,300
그걸 확인하게 됩니다

427
00:19:40,300 --> 00:19:43,730
그리고 나서 루프가 살았는지를 살펴봐요

428
00:19:43,730 --> 00:19:46,130
만약에 이벤트 로프가 활성화 되어 있다고 하면

429
00:19:46,130 --> 00:19:48,540
이제 루프 반복을 시작을 하게 되는 거고

430
00:19:48,540 --> 00:19:50,350
그렇지 않으면 종류가 되는 건데

431
00:19:50,350 --> 00:19:53,570
사실상 만약에 제작을 하신다고 하면

432
00:19:53,570 --> 00:19:54,920
항상 내가 살아 있는 상태이다

433
00:19:54,920 --> 00:19:56,970
언제 죽지 않고 살아 있는 상태인데

434
00:19:56,970 --> 00:19:58,760
그냥 일관적인 뭐

435
00:19:58,760 --> 00:20:01,570
PC 에서 사용되는 애플리케이션 연구실에서는

436
00:20:01,570 --> 00:20:04,220
이제 한 번만 사용하고 정리 되는 경우가 있을 수 있기 때문에

437
00:20:04,220 --> 00:20:06,790
요거 확인하는 작업이 한번 있고요

438
00:20:06,790 --> 00:20:09,020
만약에 이제 여기서 핸들이 안 돼

439
00:20:09,020 --> 00:20:11,890
핸들은 그냥 어떤 작업

440
00:20:11,890 --> 00:20:14,480
단위라고 만보기 이해하시면 될 거 같아요

441
00:20:14,480 --> 00:20:17,880
그 어떤 어떤 작업이 활성화 되어 있거나

442
00:20:17,880 --> 00:20:19,640
아니면 어딘가에 참조가 되어 있거나

443
00:20:19,640 --> 00:20:21,220
아니면 아직 다치지 하거나

444
00:20:21,220 --> 00:20:22,790
이런 상태 라고 하면 어

445
00:20:22,790 --> 00:20:25,450
이제 모든 게 활성화되어 있는 상태라고 생각을 판단을 하고

446
00:20:25,450 --> 00:20:29,730
이벤트 로그가 계속 돌아가게 됩니다

447
00:20:29,730 --> 00:20:32,100
이벤트 로프가 사랑해 이제부터 확인을 하고 나면

448
00:20:32,100 --> 00:20:33,790
이제 마감 타이머 라는 게 동작을 해요

449
00:20:33,790 --> 00:20:38,470
나 마감 타이머가 그 이벤트로 이제 돌 때

450
00:20:38,470 --> 00:20:44,240
친구 그 안에 들어가 있는 작업들을 이제 종료를 종료를 할것이냐

451
00:20:44,240 --> 00:20:44,700
말것이냐

452
00:20:44,700 --> 00:20:48,620
이제 판단을 하는 그 타이머 구요

453
00:20:48,620 --> 00:20:51,370
타이머를 시작 시켜 놓고 나면

454
00:20:51,370 --> 00:20:55,500
그 다음부터 대기 중이었던 콜백을 호출하게 돼요 대기중이었다

455
00:20:55,500 --> 00:20:57,590
대기 중에 어떤 콜백이 어떤 느낌이냐면

456
00:20:57,590 --> 00:21:01,550
그 보통은 콜백 홍천 이라고 하면 내가 펑션을 실행 할 때

457
00:21:01,550 --> 00:21:04,200
거기에 펑션 객체를 하나를 넘겨주고

458
00:21:04,200 --> 00:21:07,150
그 작업이 완료되어 나면 그 콜백함수를 호출

459
00:21:07,150 --> 00:21:09,590
해 주게 되는 개념으로 많이 활용하게 되는데

460
00:21:09,590 --> 00:21:14,020
내 비동기 라이브러리에서는 그런 방식으로 사용하지 않고

461
00:21:14,020 --> 00:21:16,040
모든 콜렉터를 직접 관리하게 돼요

462
00:21:16,040 --> 00:21:19,760
그래서 콜백이 그 이전 함수가 종료되었다고 하더라도

463
00:21:19,760 --> 00:21:21,050
클릭이 바로 실행 되는 게 아니라

464
00:21:21,050 --> 00:21:26,480
그 콜백을 언제 실행할지 를 이벤트루프 안에서 결정하게 되어

465
00:21:26,480 --> 00:21:28,750
이것 때문에 이제 성능이 가장 빠르게 되는 거고요

466
00:21:28,750 --> 00:21:32,080
효율적으로 하게 되는 거죠

467
00:21:32,080 --> 00:21:35,620
어 여기서 만약에 그 1번

468
00:21:35,620 --> 00:21:39,640
2번 이번 회차에서 콜백을 호출할 타임이 안 됐다 라고 하면

469
00:21:39,640 --> 00:21:43,110
다시 이 친구는 그 이벤트루프 안으로 들어가게 되고

470
00:21:43,110 --> 00:21:49,150
그 다음 다음 루프에서 확인을 다시 한번 할 수 있도록

471
00:21:49,150 --> 00:21:53,710
그렇게 지연이 지연이 시키기도 해요

472
00:21:53,710 --> 00:21:56,400
그리고 아이들 핸들 아이들 핸들이 있는지

473
00:21:56,400 --> 00:21:59,290
이제 그걸 확인하는 콜백이 호출됩니다

474
00:21:59,290 --> 00:22:00,830
이름은 아이들 힘들긴 한데

475
00:22:00,830 --> 00:22:02,990
매번 이제 이터레이션 을 돌 때마다

476
00:22:02,990 --> 00:22:07,490
한 번씩 항상 체크는 하게 돼요

477
00:22:07,490 --> 00:22:09,360
그리고 나면 이제 프리페어

478
00:22:09,360 --> 00:22:13,480
핸들 이라고 부르는 콜백이 호출됩니다

479
00:22:13,480 --> 00:22:15,700
어 이 친구는 어떤 친구

480
00:22:15,700 --> 00:22:19,750
냐면 루프가 아이올웨이즈 차단 하는 작업을 하거든요

481
00:22:19,750 --> 00:22:24,810
가요를 제 직접 다르지 않도록 아이유를 직접 건드리지 않도록

482
00:22:24,810 --> 00:22:26,820
이제 차단 작업을 하게 되는데

483
00:22:26,820 --> 00:22:28,150
그 작업을 하기 직전에

484
00:22:28,150 --> 00:22:31,610
이제 준비 핸들이 자기가 실행해야 됐던

485
00:22:31,610 --> 00:22:38,010
그런 콜백을 이제 호출 하게 되면 그렇게 그리고 나면

486
00:22:38,010 --> 00:22:40,160
이제 아이유를 마요네즈가 차단을 하기 전에

487
00:22:40,160 --> 00:22:42,450
로프가 얼마나 오랫동안 차단을 할 건지

488
00:22:42,450 --> 00:22:44,110
여기서 계산을 해요

489
00:22:44,110 --> 00:22:46,490
이게 조금 이제 성능을 좌지우지하는 이제

490
00:22:46,490 --> 00:22:47,730
열심히 것 같고요

491
00:22:47,730 --> 00:22:51,310
어떤 거냐면 그 암소를 재등록을 해 놓고

492
00:22:51,310 --> 00:22:54,420
그 비동기 아이오 를

493
00:22:54,420 --> 00:22:57,290
이제 다른 쓰려다가 했다고 해 놓을 텐데

494
00:22:57,290 --> 00:23:00,020
그 친구를 언제 다시 한번 확인을 할 건지를

495
00:23:00,020 --> 00:23:01,540
계산을 미리 해 놓는 거야

496
00:23:01,540 --> 00:23:02,580
그래서 그 시간 동안

497
00:23:02,580 --> 00:23:06,120
그 시간이 완료 되기 전까지는 확인을 하지 않는 거 확인해

498
00:23:06,120 --> 00:23:09,550
가지 않는 시간들이 확보를 정밀하게 함으로써

499
00:23:09,550 --> 00:23:14,710
성능을 좀 더 높이는 방식을 쓰고 있습니다

500
00:23:14,710 --> 00:23:17,590
루프가 아이유를 차단을 하게 되면

501
00:23:17,590 --> 00:23:20,360
그 다음에 이제 체크해 드린다는 게 처리되어

502
00:23:20,360 --> 00:23:21,700
체크 핸들이 방금

503
00:23:21,700 --> 00:23:24,960
지금까지 계속 설명드렸던 이제 콜백을 호출하면 되냐

504
00:23:24,960 --> 00:23:25,410
안 되냐

505
00:23:25,410 --> 00:23:31,160
이거 이거 판단하는 그걸 로직 이라고 보시면 됩니다

506
00:23:31,160 --> 00:23:33,380
그래 마지막으로 UV

507
00:23:33,380 --> 00:23:35,980
클로즈 라는 장소가 있는데 이 함수를 호출하여 돼서

508
00:23:35,980 --> 00:23:40,440
핸들을 받게 되면 이제 다 뒷골 100 입원은 이터레이션

509
00:23:40,440 --> 00:23:45,600
일 종료 하는 그 콜백을 호출하게 됩니다

510
00:23:45,600 --> 00:23:47,530
이걸로 이벤트 루프가

511
00:23:47,530 --> 00:23:49,870
이제 한 바퀴 레슨을 하게 되는 건데

512
00:23:49,870 --> 00:23:51,590
방금 설명드렸던 이 과정을 통해서

513
00:23:51,590 --> 00:23:55,890
이벤트 루터가 이렇게 계속 반복해서 호출하게

514
00:23:55,890 --> 00:23:58,550
이런 방식을 통해서 이벤트루프 가구장이 되어 있고요

515
00:23:58,550 --> 00:24:00,480
이건 이제 리뷰 부위라는

516
00:24:00,480 --> 00:24:03,380
라이브러리에서 구현을 한 방식이 방식이고

517
00:24:03,380 --> 00:24:05,720
사실 그 안에 있는 어싱크

518
00:24:05,720 --> 00:24:09,460
IO 안에 부정적인 이벤트 방식 자체는 이거랑

519
00:24:09,460 --> 00:24:14,880
거의 유사한 방식으로 구성이 되어 있더라고요

520
00:24:14,880 --> 00:24:17,930
이벤트 로프가 이런 역할을 한다는 걸 알았으니까

521
00:24:17,930 --> 00:24:22,090
이제 씽크 랑 싱크로너스 프리 먹을까

522
00:24:22,090 --> 00:24:24,250
어느 정도의 성능 차이가 있는지

523
00:24:24,250 --> 00:24:26,740
100 차이가 있는지 궁금해서요

524
00:24:26,740 --> 00:24:30,390
아까 설명드렸던 것처럼 그 이제 UV

525
00:24:30,390 --> 00:24:33,010
일하는 친구가 씽크아이 5에서 이벤트

526
00:24:33,010 --> 00:24:35,310
루프를 대체 한다고 다 했는데

527
00:24:35,310 --> 00:24:36,800
이벤트 루프만 대체 하는 거지

528
00:24:36,800 --> 00:24:41,350
사실 다른 것은 카이로에서 구현되어 있는 모든 AP 아이들은

529
00:24:41,350 --> 00:24:42,780
파이썬에서 구성되어 있는

530
00:24:42,780 --> 00:24:46,240
그의 api 를 다 기본적으로 사용을 하게 돼요

531
00:24:46,240 --> 00:24:49,640
이벤트루프 대체를 해서 활용을 하게 되고

532
00:24:49,640 --> 00:24:52,970
이벤트루프 반대 체했을때 도대체 어떤 것 때문에 이거

533
00:24:52,970 --> 00:24:54,750
이것만 딱 배차를 하게 되는지

534
00:24:54,750 --> 00:24:58,570
그 성능 비교 를 통해서 좀 알아 보도록 할게요

535
00:24:58,570 --> 00:25:02,640
제가 성교를 할때 활용했던 그들은 누구랑 플라스크

536
00:25:02,640 --> 00:25:04,490
기본적으로 제동기 방식이죠

537
00:25:04,490 --> 00:25:06,840
동기 방식과 목소리

538
00:25:06,840 --> 00:25:11,390
어떤 차이가 있는지 좀 보려고 준비를 좀 했고요

539
00:25:11,390 --> 00:25:14,310
그리고 세닉 그리고 비보라 이 세 가지

540
00:25:14,310 --> 00:25:18,410
프레임워크를 한번 성능을 비교 좀 해 봐

541
00:25:18,410 --> 00:25:20,340
어떤 정도에 성능

542
00:25:20,340 --> 00:25:22,410
갖고 있는 서버에서 테스트를 해 봐 내면

543
00:25:22,410 --> 00:25:26,600
그 aws 에서 M52 엑스라지 하려고 했고요

544
00:25:26,600 --> 00:25:30,380
대덕 테넌시 옵션으로 활성화를 활성화를 해서

545
00:25:30,380 --> 00:25:33,240
오롯이 이 작업에만 서버

546
00:25:33,240 --> 00:25:36,980
자원이 활용될 수 있도록 준비를 좀 했어요

547
00:25:36,980 --> 00:25:39,020
이게 N526 가지라고 하면

548
00:25:39,020 --> 00:25:41,010
cpu 여덟 개를 활용을 하고요

549
00:25:41,010 --> 00:25:43,370
그다음에 32기가 메모리를 합니다

550
00:25:43,370 --> 00:25:47,050
우분투 18.04 버전으로 이제 테스트를 했고

551
00:25:47,050 --> 00:25:49,400
여기 이제 기타 잉크가 있는데

552
00:25:49,400 --> 00:25:50,700
비보라 하는 친구가 아까

553
00:25:50,700 --> 00:25:52,800
처음에 제가 소개드렸던 빼놓고 중에 하난데

554
00:25:52,800 --> 00:25:54,740
여기에서 웹프레임워크 를

555
00:25:54,740 --> 00:25:58,510
테스트를 할 수 있는 사전준비를 되게 많이 하더라고요

556
00:25:58,510 --> 00:26:01,400
그래서 이거 테스트 좀 해 봤고요

557
00:26:01,400 --> 00:26:03,640
극악 프레임워크의 버전들은 pip

558
00:26:03,640 --> 00:26:06,310
인스톨하고 선 버전을 지정하지 않고

559
00:26:06,310 --> 00:26:07,370
바로 인스톨을 하게 되면

560
00:26:07,370 --> 00:26:11,310
설치되는 그 최신 최신 버전의 안정화 오전에

561
00:26:11,310 --> 00:26:18,390
웹프레임워크 사용을 해서 홈 확신이라는 거랑

562
00:26:18,390 --> 00:26:22,860
이제 레디스를 활용하는 두 가지 정도를 테스트 해 봤는데

563
00:26:22,860 --> 00:26:25,020
엄청 간단하게 제가 했어요

564
00:26:25,020 --> 00:26:26,310
제가 제작을 한 건 아니고

565
00:26:26,310 --> 00:26:27,630
방금 말씀 제비 보라 해서

566
00:26:27,630 --> 00:26:30,560
미리 이런 코드들이 준비를 좀 해 놨고요

567
00:26:30,560 --> 00:26:33,450
그 멀티파트폼 으로 이제 파일을 전송하고

568
00:26:33,450 --> 00:26:36,330
난 몇 개 파라미터를 이제 전송한다는 가정하에

569
00:26:36,330 --> 00:26:40,890
테스트 실행을 하게 되고요

570
00:26:40,890 --> 00:26:42,830
코드에서 보시는 것처럼

571
00:26:42,830 --> 00:26:45,060
리퀘스트 에서 파일이 몇 개가 있는지만

572
00:26:45,060 --> 00:26:50,770
간단하게 카운트에서 바로 인스턴스 를 알려 주는 이런 프로그램입니다

573
00:26:50,770 --> 00:26:54,950
이걸로 테스트를 해 보니까 그 이전 이런 결과가 나오더라고요

574
00:26:54,950 --> 00:26:59,530
프리스크가 정말 라이트 산 속이라서 그런지 잔고

575
00:26:59,530 --> 00:27:02,910
얼마 정도 성능이 나오고요 되게 신기하다 aio.H

576
00:27:02,910 --> 00:27:04,590
피가 비동기로 가능하다고 하는데

577
00:27:04,590 --> 00:27:07,340
어디로 동기보다 느리더라구요 신기한데

578
00:27:07,340 --> 00:27:10,300
핸들링 갈 때 제가 생각했던 아무리 봐도 이거는

579
00:27:10,300 --> 00:27:13,140
이제 버그가 아닌가 하는 생각이 듭니다

580
00:27:13,140 --> 00:27:15,940
3기 빠르다고 소개가 많이 되고 있는데

581
00:27:15,940 --> 00:27:19,290
이게 토당 한 4만 7천 원 정도 처리를 하더라고요

582
00:27:19,290 --> 00:27:20,600
내비 보라는 프레임워크가 내가 제일

583
00:27:20,600 --> 00:27:22,170
빠르다고 소개를 엄청 하고 있는데

584
00:27:22,170 --> 00:27:25,000
한 8만 원 정도 처리를 하는 성령의 보이더라고요

585
00:27:25,000 --> 00:27:28,200
거의 2배 가까운 처리 성능을 보이고 있는데

586
00:27:28,200 --> 00:27:31,060
택시비 보라는 아직 개발이 한창 진행 중이어서

587
00:27:31,060 --> 00:27:33,070
조금 더 이제 어

588
00:27:33,070 --> 00:27:35,890
왜 프레임워크에서 필요한 기능들이 제공하게 되면

589
00:27:35,890 --> 00:27:36,870
좀 늦어지지 않을까

590
00:27:36,870 --> 00:27:42,080
생각이 듦 레디스 api 를 활용하는 것도 한번 테스트해

591
00:27:42,080 --> 00:27:43,760
봤어요

592
00:27:43,760 --> 00:27:47,370
그래서 간단하게 그 리퀘스트로 받아서 리퀘스트

593
00:27:47,370 --> 00:27:50,480
해당하는 데이터를 내비에서 받아 봐서 글리터

594
00:27:50,480 --> 00:27:53,590
나는 그런 간단한 테스트 시나리오 거야

595
00:27:53,590 --> 00:27:56,520
레지스 api 활용 할 때 보면

596
00:27:56,520 --> 00:28:00,750
여기서 아까 오셨던 ahp 가기 성능이 좀 올라왔어요

597
00:28:00,750 --> 00:28:01,870
기본적으로 이제 싱크로

598
00:28:01,870 --> 00:28:05,130
싸게 처리하는 친구들보다 빠른 성장을 보여주고요

599
00:28:05,130 --> 00:28:06,120
여기서도 피곤하다

600
00:28:06,120 --> 00:28:12,780
이제 압도적으로 만일 테스트를 처리할 수 있더라고요

601
00:28:12,780 --> 00:28:16,800
그럼 여기까지 이제 테스트를 해 봤으면 이제 UV 루비랑

602
00:28:16,800 --> 00:28:18,260
유럽에서 구현해놓은 이벤트로

603
00:28:18,260 --> 00:28:19,980
불안한 게 도대체 뭐 때문에 없으니까

604
00:28:19,980 --> 00:28:22,280
여기가 빠른지 가지고 이제 궁금하실텐데

605
00:28:22,280 --> 00:28:27,750
이것 때문에 며칠 밤을 좀 그 결론부터 좀 말씀을 드리면

606
00:28:27,750 --> 00:28:31,160
제가 어제 코드 냄새를 엄청나게 확인해 봤어요

607
00:28:31,160 --> 00:28:34,830
도무지 차이를 알 수가 없어 가지고 알 수 없는 이유를

608
00:28:34,830 --> 00:28:36,560
이제 나중에 깨달았는데

609
00:28:36,560 --> 00:28:37,620
그 이벤트를 후에

610
00:28:37,620 --> 00:28:42,620
이제 많은 부분이 파이썬코드로 작성해서 있어요

611
00:28:42,620 --> 00:28:48,680
그리고 이제 UV 룸에서는 거의 거의 대부분의 것들이

612
00:28:48,680 --> 00:28:50,660
이제 씨에서 작성

613
00:28:50,660 --> 00:28:53,600
사이트 언니랑 제시해서 작성해서 있더라고요

614
00:28:53,600 --> 00:28:56,000
사실 2차 이하나가 두 개

615
00:28:56,000 --> 00:28:59,750
성능차이를 이제 만든 거 보시면 될 거 같아요

616
00:28:59,750 --> 00:29:02,700
유럽에서는 아 여기로 이라기보다는

617
00:29:02,700 --> 00:29:04,550
이제 그 밑에 있는 이제

618
00:29:04,550 --> 00:29:07,560
리뷰부 이라는 라이브러리에서는 파이썬

619
00:29:07,560 --> 00:29:08,570
객체를 전부 다

620
00:29:08,570 --> 00:29:12,260
이제 구조체의 있는 교체라고 함수로 답변을 해 놨고요

621
00:29:12,260 --> 00:29:14,400
나 메모리 관리를 해 놨고

622
00:29:14,400 --> 00:29:15,810
시스템 자원사용량

623
00:29:15,810 --> 00:29:17,940
이제 최적화를 다 해놨어요

624
00:29:17,940 --> 00:29:21,420
사실 그 이거 말고 아까 도작가 설명드렸지만

625
00:29:21,420 --> 00:29:23,790
어스앵커의 서구 현대에는 이벤트 높으니까

626
00:29:23,790 --> 00:29:26,290
거기서 베이스 이벤트루프

627
00:29:26,290 --> 00:29:28,030
라는 걸 자꾸 제공을 해주거든요

628
00:29:28,030 --> 00:29:31,140
이제 그거랑 다시 네 미국에서 구현되는 이벤트로

629
00:29:31,140 --> 00:29:34,980
프랑은 구현방식 자체는 거의 동일하다고 보시면 됩니다

630
00:29:34,980 --> 00:29:37,800
호텔에서는 다만 구현대 있는 게

631
00:29:37,800 --> 00:29:40,060
파이썬 내부에서 부산대 있는 게 있냐

632
00:29:40,060 --> 00:29:43,800
아니면 시에서 최적화 최적화된 방식으로 경희대 있냐

633
00:29:43,800 --> 00:29:45,240
2차 이더라고요 2차

634
00:29:45,240 --> 00:29:48,910
2에서 나오는 게 이 성능에

635
00:29:48,910 --> 00:29:51,260
아까 보여 드렸던 성능차이를 가죠

636
00:29:51,260 --> 00:29:54,540
가져오는 그럼 결과를 보여 줬어

637
00:29:54,540 --> 00:29:57,200
왜 이제 이벤트루프 개만 사용 했냐 라고 하면

638
00:29:57,200 --> 00:29:59,790
다른 것들도 할 수 있지 않았냐 라고 할 수 있는데

639
00:29:59,790 --> 00:30:01,780
이거는 제가 테스트해 본 건 아니고

640
00:30:01,780 --> 00:30:05,150
테스트를 이제 다른 곳에서 해봤던 자료를 좀 가져 왔는데

641
00:30:05,150 --> 00:30:07,520
여기 글자가 좀 자야 될 수도 있는데

642
00:30:07,520 --> 00:30:10,380
그 자체 보면 그 씽크아이

643
00:30:10,380 --> 00:30:13,650
옳을 의 https 활용한 거고

644
00:30:13,650 --> 00:30:17,380
그 두 번째는 UV 로 보러 가라 낀 방식이에요

645
00:30:17,380 --> 00:30:19,070
이거 이제 HP

646
00:30:19,070 --> 00:30:20,150
나는 프로토콜 자체를

647
00:30:20,150 --> 00:30:24,990
이제 80만 딱 하는 그 간단한 작업을 하는 건 사실상

648
00:30:24,990 --> 00:30:27,890
이제 레이턴시 로 보면 기준으로 보면

649
00:30:27,890 --> 00:30:28,960
그러니까 최악의 경우

650
00:30:28,960 --> 00:30:32,390
케이스를 보면 사실상 거의 비슷한 성능을 보여줘요

651
00:30:32,390 --> 00:30:34,560
우측에 있는 것들은 이제 고령까지

652
00:30:34,560 --> 00:30:36,400
도가 12월 해본 거든요

653
00:30:36,400 --> 00:30:39,340
그 http 툴즈 라는 걸 기반으로 해서

654
00:30:39,340 --> 00:30:40,970
방금 설명드렸던 것처럼

655
00:30:40,970 --> 00:30:42,920
HP 를 파싱을 하는

656
00:30:42,920 --> 00:30:45,160
해석을 하는 부분만 경희대 있는 건데

657
00:30:45,160 --> 00:30:46,260
이거 기준으로 했을 때

658
00:30:46,260 --> 00:30:48,320
씽크 예원아 고랭이 나

659
00:30:48,320 --> 00:30:51,670
그냥 거의 실제적으로는 차이가 없는 결과를 보여 준다고

660
00:30:51,670 --> 00:30:52,810
하더라

661
00:30:52,810 --> 00:30:58,960
결론적으로 말하면 그 기본적인 뭐 집들은 대부분 직접 뭐

662
00:30:58,960 --> 00:31:00,210
이런 것들이 구영리 구영리

663
00:31:00,210 --> 00:31:03,570
직접 하지 않더라도 거의 성능의 차이가 없었던거죠

664
00:31:03,570 --> 00:31:06,380
이것 때문에 트리플 하는 것만 교체를 하고

665
00:31:06,380 --> 00:31:07,450
그 외 모든 것들은

666
00:31:07,450 --> 00:31:10,080
기본 싱크 완료 에서

667
00:31:10,080 --> 00:31:11,620
제공해주고 있던 기본 기능을

668
00:31:11,620 --> 00:31:16,360
그대로 활용하는 전략을 이제 했던 거 같아요

669
00:31:16,360 --> 00:31:21,000
여기까지가 이제 제가 준비했던 그 UV 룸에서

670
00:31:21,000 --> 00:31:23,720
실제로 화장을 하고 있던 그 안에 있는

671
00:31:23,720 --> 00:31:26,560
UV 에 대한 설명이 없고요

672
00:31:26,560 --> 00:31:30,380
마지막으로 한 가지만 더 설명을 좀 드리면 그 비동기

673
00:31:30,380 --> 00:31:32,770
그러면 이제 비동기 프리모던 이렇게 잘하고 있는데

674
00:31:32,770 --> 00:31:35,270
왜 참 그러면 뭐 하고 있냐 라고 해서

675
00:31:35,270 --> 00:31:36,770
좀 검색을 해 봤어요

676
00:31:36,770 --> 00:31:42,430
근데 사실 저희 회사에서는 그 초창기부터 잔고를 쓰고 있어

677
00:31:42,430 --> 00:31:44,610
가지고 잔고는 사실

678
00:31:44,610 --> 00:31:46,770
이제 프레임워크가 점점 개발한 양이

679
00:31:46,770 --> 00:31:50,290
이제 비대해질 수록 점점 관리 관리하기가 좀 힘들고

680
00:31:50,290 --> 00:31:54,020
속도가 나오지 않는 그런 단점들이 재밌기는 하거든요

681
00:31:54,020 --> 00:31:55,760
도대체 창고에서는 어싱플러스 할게

682
00:31:55,760 --> 00:31:57,830
내가 프로그램을 할 수 없냐 라고 했을 때

683
00:31:57,830 --> 00:32:01,650
작년에 프로포절의 이제 안 하신 분이 있어

684
00:32:01,650 --> 00:32:03,470
그게 억셉트 받아들여져서

685
00:32:03,470 --> 00:32:04,690
지금 개발을 한 잔 하고 있어요

686
00:32:04,690 --> 00:32:06,360
이미 그래서 잔고

687
00:32:06,360 --> 00:32:08,550
3.0 에서는 이제 싱크로너스

688
00:32:08,550 --> 00:32:11,990
한 sgi 랑 같이 동작을 할 수 있는 완전한 비동기

689
00:32:11,990 --> 00:32:14,750
방배동 지방시의 지원을 할 예정이구요

690
00:32:14,750 --> 00:32:19,740
다만 제 잔고 라면 끓여 먹고 자체는 가장 간편하고

691
00:32:19,740 --> 00:32:23,310
빠르게 mvp 를 만들어 볼 수 있는 이런

692
00:32:23,310 --> 00:32:24,810
프레임워크를 지향을 하고 있으면서

693
00:32:24,810 --> 00:32:28,710
동시에 이제 풀옵션 환경에서 대용량 차비도 같이 할 수 있는

694
00:32:28,710 --> 00:32:31,080
이런 걸 모든 걸 다 커서 그런지

695
00:32:31,080 --> 00:32:32,880
영상을 갖고 있거든요

696
00:32:32,880 --> 00:32:34,960
그거 때문에 비동기를

697
00:32:34,960 --> 00:32:37,520
기본적으로 사용할 수 있는 건 아니고

698
00:32:37,520 --> 00:32:39,030
선택적 으로 만약에 못 한다고 하면

699
00:32:39,030 --> 00:32:40,880
이제 비동기방식 을 쓸 수 있도록

700
00:32:40,880 --> 00:32:42,440
그렇게 지원을 할 예정이라고 합니다

701
00:32:42,440 --> 00:32:46,540
그 3.0 이제 2019년 12월 사실 얼마 안 남아

702
00:32:46,540 --> 00:32:49,650
올해 말이 면제 지금 배포를 해서

703
00:32:49,650 --> 00:32:52,360
바로 이제 혁신클러스터의 프로그래밍을 장소에서도

704
00:32:52,360 --> 00:32:53,620
한번 해 볼 수 있도록

705
00:32:53,620 --> 00:32:56,300
그렇게 지원을 할 예정이라고 합니다

706
00:32:56,300 --> 00:32:59,940
만약에 근데 그 비동기방식 을지로 한다고 해서

707
00:32:59,940 --> 00:33:01,650
바로 사용을 하시려고 하면

708
00:33:01,650 --> 00:33:04,740
제기동 기존방식대로 코딩을 하게 되시면 이제 씽크호스

709
00:33:04,740 --> 00:33:06,150
온리 오퍼레이션이란 은혜를

710
00:33:06,150 --> 00:33:08,360
이제 볼 수 있다고 하더라고요

711
00:33:08,360 --> 00:33:12,330
그 사실 그 프로그래밍을 하게 되면

712
00:33:12,330 --> 00:33:16,350
만약에 중간에 블럭을 하는

713
00:33:16,350 --> 00:33:17,820
그런 오직 있거나 하면

714
00:33:17,820 --> 00:33:20,060
사실상의 어싱플러스 프로그래밍의

715
00:33:20,060 --> 00:33:21,860
혜택을 볼 수가 없거든요

716
00:33:21,860 --> 00:33:24,500
이것 때문에 만약에 기존에 뭐 잔고를 활용하시고

717
00:33:24,500 --> 00:33:27,770
계신 분들이 라고 하면 여신 크로스 프로그래밍을 어떻게 하는지

718
00:33:27,770 --> 00:33:30,760
에 대한 이해를 조금 더 먼저 하셔야 될 거고

719
00:33:30,760 --> 00:33:33,100
많이 많이 하는데 엄청난

720
00:33:33,100 --> 00:33:37,550
이제 작업이 좀 소유 될 거라는 대상이 되고 있습니다

721
00:33:37,550 --> 00:33:41,430
여기까지가 이제 제가 준비한 발표 자려고요

722
00:33:41,430 --> 00:33:47,150
혹시 이제 질문이나 아니면 네

723
00:33:47,150 --> 00:33:50,240
자세한 것들은 좀 지금 답변을 못 드릴 수 있는데

724
00:33:50,240 --> 00:33:53,910
혹시 오늘 제가 다루었던 내용 관련해서 질문 있으시면

725
00:33:53,910 --> 00:33:56,560
지금 받도록 하겠습니다
