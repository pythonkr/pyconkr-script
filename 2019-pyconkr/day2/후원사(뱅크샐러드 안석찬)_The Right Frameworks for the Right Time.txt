-화면 연결 문제로 잠시 지연되겠습니다. 발표장 내에 계신 분들은 자리에 앉아 주시고 큰 박수 먼저 부탁드립니다.
-안녕하세요? 이번 파이콘 2019 키스톤 발표를 맡게 됐습니다. 마지막까지 남아주시느라 고생 많습니다. 무거운 주제 발표가 아닌 만큼 편하게 즐기면서 마무리하는 시간이 됐으면 좋겠습니다. 이번 발표 주제는 더 라이트 프레임웍스. 자세한 발표주제 소개에 앞서 소개 먼저 드리겠습니다. 저는 안석찬이라고 합니다. 파이썬으로 제작하고 있습니다. 사실 이번 발표 주제를 선정하기까지 굉장히 많은 고민이 있었는데요. 파이콘의 취지와 맞으면서 뱅크샐러드의 기술적인 모습을 보여드리기 위한 주제로 선정했습니다. 저는 우리가 어떤 상황에서 어떤 웹프레임웍을 사용하는지 말씀드리려고 하고요. 비즈니스 상황과 함께 어떤 기술적 고민을 했고 어떤 결론에 도달했는지 시간순으로 설명드리려 합니다.
직접 개발하시면서 각각의 프레임웍들의 장단점에 대해 많이 고민한 분들이라면 재미있게 들을 수 있을 것 같아요. 다시 한번 말씀드리지만 이번 발표는 웹프레임웍이 주제가 목적이 아닌 점 기억하시면 감사하겠습니다. 뱅크샐러드 첫 번째 웹프레임웍은 장고였습니다. 이렇게 기본적으로 제공하는 ORM이 있습니다. 스캣폴딩이 가능한데 데이터베이스 사용하는 프로그램에서 뼈대를 생성해주는 것을 의미합니다. 기본적으로 제공되는 어드민 페이지 또한 장점 중 하나인데 어드민 페이지를 통해서 정의된 데이터 모델을 편하게 수정할 수 있게 됩니다. 이러한 장점을 바탕으로 뱅크샐러드에서는 첫 카드 추천 서비스를 장고로 적용했는데요. 사용자에게 알맞은 카드를 추천할 수 있었습니다. 또한 카드 추천의 핵심인 우리만의 카드 데이터베이스도 장고의 장점을 통해서 구축할 수 있었습니다. 앞서 말한 장고의 강력한 장점들을 활용하여 3년간 4000여 개의 정형화된 카드를 관리할 수 있는 서비스를 관리할 수 있었습니다.
하지만 장고를 사용하면서 겪은 문제가 있었는데 카드 추천 이후 예적금 CMA 추천 도메인 추천이 되면서. 저희는 마이크로서비스 아키텍처로 서서히 전환하게 됩니다. 마이크로서비스 아키텍처란 큰 하나의 서비스를 여러 개의 독립적인 서비스 단위로 서버를 나눠 구성하는 것을 말합니다. 하지만 장고는 모널리식 아키텍처에 적합한. 우리에게 필요한 기능 이상의 것이 많이 존재했습니다. 어느 정도 코드 구성이 강제돼 있어서 비즈니스 로직 구현에 불편함이 있었습니다. 저희에게는 장고보다는 가볍고 자유로운 것이 필요했는데요. 플라스크를 도입하게 됐습니다. 플라스크는 굉장히 간단한데요.
5줄의 코드로도 서버를 실행시킬 수 있습니다. 플라스크 코드를 구성하는 건 서버 개수만큼 많을 것이라는 말이 있을 정도로 미니멀리즘을 추구하는 마이크로 프레임웍답게 자유로운 게 특징입니다. 파이썬의 대표적인 ORM, 다양한 테스킹까지 여러 확장을 가지고 있고 높은 생산성으로 이루어지게 됩니다. 이러한 장점을 살려 실제로 뱅크샐러드에서는 혁신 금융서비스인 스위치 보험을. 뱅크샐러드에서 간편하게 여행자 보험을 온오프할 수 있는데요. 실제 사용자와 금융사 간 돈의 트렌젝션이 있기 때문에 높은 안정성이 필요했습니다. 트렌젝션을 쉽게 보장할 수 있어 많은 도움이 됐는데요. 아키텍처에 대한 제한이 없어 비즈니스 로직 작성이 용이했고 폭넓은 모듈의 다양성으로 필요한 기능을 익스텐드해서 쓸 수 있었고 다른 개발자도 코드 리뷰를 줄 수 있었습니다.
현재 뱅크샐러드는 스위치 보험 이외에도 플라스크 서버를 구현하고 있는데요. 앞서 이야기한 높은 안정성과 생산성을 보장하고 있습니다. 플라스크에도 문제점이 있었는데요. 사용자가 보유한 모든 카드의 상세정보를 반환하는 요청입니다. 동기적으로 실행되는 게 큰 문제였는데 하나의 카드를 가지고 있다면 문제가 없지만 여러 개의 카드를 가지고 있다면 개수만큼 요청이 실행될 것이고 단일요청당 응답시간의 증가를 뜻합니다. 갈수록 뱅크샐러드 내부에서 마이크로서비스가 많아지게 되면 복잡도가 증가했고 추가로 타 금융기관 통신도 많아지면서 단일요청에 대해서 응답이 오래 걸렸습니다.
응답 속도가 느려지는 것을 방지하고자 단일요청당 응답시간을 보장해야 했습니다. 대표적인 비동기 처리에는 샐러리와. 샐러리는 파이썬으로 작성된 비동기 작업 큐입니다. 하나의 작업을 브로커를 통해 전송하면. 샐러리는 프로듀서와 컨슈머 모두 파이썬이어야 하니 도입할 수 없었는데 여러 가지 언어로 구성된 서버가 존재한 상황 때문에 샐러리를 도입할 수 없었습니다. 또 다른 대안인 지 이벤트도 사용할 수 없었는데 지 이벤트는. 지 이벤트 같은 경우 파이썬에 대한 종속성은 없었지만 가독성이 떨어지는 것이 문제였습니다. 이 코드는 실제 지 이벤트의 공식 다큐먼트에 존재하는. 몽키패칭이란 동적 언어에서 런타임 코드를 수정하여 본래 소스 기능을 변경하는 것을 말합니다. 공식적으로 몽키패칭은 어쩔 수 없는 필요악이라고 정의할 정도로 무조건 사용해야 하지만 정말 악마 같은 문법을 가지고 있는 게 유명하죠.
서비스가 커지면서 이런 서비스가 많아지면 진입장벽이 높아진다고 판단했고 파이썬을 메인으로 채택한 이유와 대비됐습니다. 결국 도입하지 않게 됩니다. 또한 이때 뱅크샐러드는 급격한 성장을 겪었는데요. 작년 2월 60만 다운로드에서 올해 2월 300만 다운로드가 됐습니다. 1년 사이 5배 성장이 있었던 만큼 엄청난 트래픽을 겪어야 했습니다. 독립적으로 단일요청의 응답시간을 보장하면서 엄청난 트래픽을 견뎌야 했고 이러한 관점에서 저희가 찾은 것은 aiohttp는 어신크 io 기반 웹프레임웍인데요.
이는 이벤트 루프를 사용하여 하나의 스레드를 사용하고 여러 IO를 병행적으로 실행할 수 있게 합니다. 하나의 마이크로서비스가 다른 여러 서비스와 통신할 때 매우 유용한데요. 이 그림에서 보시다시피 복수계의 리퀘스트를 병렬적으로 보내고 한 번에 기다릴 수 있습니다. 그래서 이 코드는 처음에 설명했던 동기적인 코드를 어신크IO로 설정해서 비동기로 바꾸는 것입니다. 가독성이 높은 것은 물론이고 한번에 카드 상세정보를 가져오기 때문에 사용자의 카드가 얼마나 많든 그중 가장 오래 걸리는 요청만큼의 시간밖에 걸리지 않습니다. 카드 1개, 10개든 응답시간을 보장할 수 있다는 의미입니다.
대기중 다른 요청을 처리할 수 있기 때문에 더 많은 요청량을 처리할 수 있게 됐죠. 이러한 특징으로 파이썬에서 많이 사용되는 프레임웍들 중 가장 성능이 좋습니다. 이 차트는 실제 퍼포먼스를 측정한 자료인데요. 앞서 말씀드린 장고나 플라스크에 비해 5배 정도 성능이 좋고 TPS도 마찬가지로 4, 5배 정도 성능이 좋은 것을 확인할 수 있습니다. 실제로 이런 장점을 살려 뱅크샐러드에서는 자산 도메인 서버를. 모든 자산의 조회 생성 수정 삭제 로직은 물론이고 복잡한 비즈니스 로직인 스크래핑 동기 로직까지 쓰고 있습니다.
실제로 저번 주 응답시간 지표를 살펴보면 99%의 요청이 100밀리세컨드 안에 처리되는 걸 볼 수 있었습니다. 요청들이 단순히 DB에서 수행해서 결과값을 리턴하는 게 아니라 복잡한 비즈니스 로직이 들어가 있는 동기화 요청임을 생각하면 매우 낮은 수치입니다. 높은 성능에 반해 몇 가지 문제점이 있었는데요. 서비스가 커질수록 가독성과 생산성이 낮아진다는 점입니다. 리소스별로 서브 애플리케이션을 생성해야 한다는 점이 있는데요. 생성 자체는 문제없지만 앤드포인트를 리졸브하기 위해서는 복잡한 코드가 필요합니다. 이는 저희가 판단하기에 코드베이스가 커질수록 가독성이 낮아질 수밖에 없다고 판단했습니다. 또한 이때 뱅크샐러드는 또 다른 성장을 겪게 되는데요. 2018년 기준 50명이었던 것이 지금 120명으로 늘어나게 됐고 개발자 수는 3배 가까이 늘어났습니다. 낮은 가독성은 개발과정 중 가장 낮은 생산성을 의미했습니다.
따라서 저희는 높은 가독성을 가지면서 어느 정도 성능이 보장되는 프레임웍을 찾게 됐고 그게 세닉입니다. 세닉은 플라스크처럼 간단합니다. 굉장히 직관적입니다. 모든 개체는 애플리케이션를 통해 싱글턴을 선언하고 편하게 접근할 수 있습니다. 이러한 패턴을 사용하여 더 직관적이고 안전한 코드 작성이 가능합니다. 또한 블루프린트 개념을 활용하여 이는 서버의 확장과 독립적으로 리소스에 맞춰 서버 코드 구성을 할 수 있기 때문에 가독성을 좋게 만들 수 있습니다.
또한 어신크IO를 사용하여 어느 정도의 성능을 보장합니다. 기본적으로 제공되는 멀티플 워커를 활용하여. 물론 사닉도 비슷한 문제점이 있었습니다. 운영환경에서 사닉을 활용할 때 몇 가지문제점이 발생했는데 가장 먼저 이런 그림들처럼 통일되지 않는 컨벤션 문제가 있었습니다. 사닉도 너무나 높은 자의도로 인해 개발자 스타일이 다르고 코드 구성 시 고민할 것이 많아진다는 단점이 있었는데요. 또한 이런 각기 다른 코드 스타일은 유지 보수에 어려움을 줬습니다. 그래서 저희는 이를 쿠키 커터라는 오픈소스를 통해서 해결했는데요. 프로젝트 팸플릿을 자동으로 생성해주는 툴입니다.
하나의 탬플릿을 설계하고 이를 바탕으로 개발자들은 한 줄의 커맨드 라인으로 실제 작동하는 서버 코드를 생산할 수 있고 바로 비즈니스 로직에 들어갈 수 있게 됐습니다.
서버들이 단일성을 가지게 됐고 코드리뷰 생산성 또한 증가했고요. 기본적인 http 서버 코드 스켈렙톤만을 생산하지만 퍼시스턴트. 결론적으로 사닉과 쿠키커터를 사용하여 개발팀에서 하루에도 몇 개의 서비스를 생산할 수 있게 됐습니다. 또한 사닉의 치명적인 단점은 어신크IO의 단점이기도 한데요. 아토미시티는 트렌젝션과 관련된 작업이 부분적으로 실행되지 않는 것을 의미합니다. 사닉에서는 전통적인 플라스크, 장고와는 다르게. 하나의 예제 코드인데요. 요청에서 ntt를 추천하여 캐싱해두는 예제입니다. 만약 ntt가 DB에 저장된 뒤 첫 번째 코드에 저장된 뒤에 두 번째 코드를 캐싱하는 펑션이 실행되지 않을 것이고 다른 서비스에게 장애를 야기하는 가능성을 만듭니다.
따라서 이는 굉장히 안정적인 서비스에 취약한데요. 해결할 수 있는 인프라를 가지고 있어서 운영환경 도입이 가능했습니다. 저희의 모든 서비스는 모든 애플리케이션 서버는 사이드카페턴이란 컨티너와 독립적으로 동작하는 별도의 컨테이너를 붙이는 패턴입니다. 실제 뱅크샐러드에서는 애플리케이션에 들어오는 모든 요청을 해당 요청 응답 시간 코드 등 모든 정보를 실시간으로 로딩하는 사이드카를 실행하고 있습니다.
새닉의 코드 변경 없이 사용자가 하나의 요청이 어떻게 여러 가지 서비스와 통신하였는지 추적할 수 있었고. 이런 것들을 바탕으로 새닉의 단점을 극복할 수 있었고 이 결과로 인해 뱅크샐러드에서 20개의 새닉 서비스가 동작하고 있으며 앞으로 작성되고 있는 마이크로서비스 또한 새닉으로 작성 중에 있습니다. 지금까지 뱅크샐러드가 상황에 따라 어떤 기술적 고민을 했고. 시간순으로 장고 플라스크 새닉을 주로 사용하게 됐으나 앞서 말씀드린 대로 지금까지도 이 4개 프레임웍을 사용하고 있습니다. 기술팀의 가치관은 생산성인데요. 높은 생산성을 통해 높은 가치를 제공하는 것이 목표입니다.
다양한 상황에 맞는 웹프레임웍의 적절한 활용 또한 높은 생산성에 일조하고 있습니다. 지금까지 발표 들어주셔서 감사합니다. 궁금하신 점 물어보시면 최대한 답변드리고 마감하겠습니다.
-발표해주신 안석찬 님 감사드립니다. 지금부터 질의응답 시간 갖겠습니다. 원활한 진행과 답변을 위해서 질문은 한두 가지로 짧게 부탁드립니다. 가운데 마이크에서 질문 드립니다.
-발표 흥미롭게 잘 들었고 뱅크샐러드에서 파이썬을 이용해서 서버를 구축했다고 들었는데 현재 대한민국에서 자바를 이용한 백엔드가 주를 이루는 건 사실이지 않습니까? 파이썬을 이용한 백엔드 서버가 핫해진다고 하는데 자바를 잡는 게 가능할지 어떻게 생각하시는지 대충 듣고 싶습니다.
-어려운 질문인데요. 저희가 일단 파이썬을 주로 사용하는 건 자바보다 어떤 점이 뛰어나서 이런 것이 아니라 간결함을 통해 높은 생산성을 만들어낼 수 있고 이를 통해서 사용자에게 더 많은 가치를 전달할 수 있기 때문에 사용하는 것이고 자바와 파이썬의 직접적인 비교는 회사 내부에서 특별히 하고 있지 않습니다. 그래서 파이썬이 자바를 이길 수 있는지 없는지는 아직 의견이 회사 내에서도 의견이 없습니다.
-제가 여기 와서 파이썬을 처음 접해보고 있는데요. 저희 회사에서 만약 웹서비스를 하기 위해서 파이썬을 이용한 개발을 시작한다고 했을 때 혹시 방금 말씀해주신 프레임웍 중 추천할 게 있을까요?
-그냥 저희도 처음에 장고로 시작했듯이 장고를 추천드리는데요. 왜냐하면 장고가 에코시스템이 잘 돼 있고 아까 말씀드렸듯이 ORM이 가능하고 어드민 페이지도 있잖아요. 이를 통해 편하게 서버를 만들 수 있기는 해요. 장고를 사용해서 처음 웹서버를 만드는 걸 추천드립니다.
-감사합니다.
-혹시 장고랑 플라스크 쓰다가 어신크IO로 넘어가는 시점에 대해서 어느 정도면 이 부분을 고려해야 한다는 생각하는 가이드가 있을까요?
-저희 사실 크게 생각해둔 가이드는 없고 저희 얘기를 자세하게 말씀드리면 서비스들이 계속 추가되면서 동기적인 콜론은 단일요청당 응답시간이 길어지는 상황이 발생해서 회사 내부에서 몇 초 이하까지는 괜찮은데 그 이상으로는 사용자의 사용성을 위해서 이를 무조건 줄여야 한다고 의견이 나왔고 이를 해결하기 위해서 어신크IO를 도입하게 된 겁니다. 그때를 기점으로 생각하시면 될 겁니다.
-테스트도 중요한 문제인데 프레임워크를 4개로 바꿔 쓰면서 테스트 프레임워크 같은 경우도 중요했을 것 같은데 그걸 어떻게 썼는지 계속 테스트도 겸해왔는지 주로 쓰는 게 있는지 궁금합니다.
-말씀하시는 테스트 프레임웍이 플라스크 테스트를 도와주는 라이브러리 이런 걸 말씀하시는 거죠? 새닉 같은 경우는 특히 그런 게 안 돼 있고 왜냐하면 아직 나온 지 별로 안 된 프레임웍이기 때문에 저희가 내부적으로 그런 것을 구현한 작은 라이브러리들이 있어요. 그런 걸 다 돌려 사용하면서 테스트에서 생산성을 높일 수 있게 활용하고 있습니다.
-직접 구현해서 사용하고 계시나요? 알겠습니다. 감사합니다.
-발표해주신 안석찬 님께 다시 한번 박수 부탁드립니다. 이것으로 마지막 세션을 종료하겠습니다. 모두 수고하셨고 지금 4시 40분부터 바로 옆방인 103호에서 라이트닝 토크 이루어질 예정이니 모두 참석 바랍니다.