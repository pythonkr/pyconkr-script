1
00:00:10,630 --> 00:00:13,786
안녕하세요. 2020년 파이콘 세션
 

2
00:00:13,810 --> 00:00:19,583
파이썬으로 법률역사 연구하기 발표를 할 김재윤이라고 합니다. 반갑습니다
 

3
00:00:21,280 --> 00:00:26,956
먼저 이렇게 온라인으로 컨퍼런스를 진행하게
되어서 상당히 어색하고 또 기대가 되기도 하는데요 

4
00:00:28,022 --> 00:00:32,506
제가 1년간 파이썬으로 이제 법률에 대해서
 

5
00:00:32,693 --> 00:00:34,726
이렇게 파이썬을 도구로 삼아서
 

6
00:00:34,750 --> 00:00:38,828
이렇게 법률을 공부하고 연구했던 그런 것들을
 

7
00:00:38,853 --> 00:00:42,882
좀 시행착오도 포함해가지고 같이 공유를 하려고 이렇게 가져왔습니다
 

8
00:00:43,870 --> 00:00:45,479
재밌게 들어주시면 감사하겠습니다
 

9
00:00:47,650 --> 00:00:49,066
목차는 다섯 가지입니다
 

10
00:00:49,090 --> 00:00:53,300
일단 먼저 '한국법의 탄생: 조선총독부법령의 그늘'이라고 해서
 

11
00:00:53,325 --> 00:00:58,152
이게 시간 순서대로입니다 제일 먼저 있었던 일을 먼저 설명을 드리고요
 

12
00:00:58,660 --> 00:01:03,425
그 다음에 이제 우리가 아주 핫한 징벌적 손해배상이
 

13
00:01:03,441 --> 00:01:06,195
제가 보니까 아주 오래된 입법례가 있더라구요
 

14
00:01:06,220 --> 00:01:10,095
요거는 잘 안알려진 사실인데 이걸 어떻게 발견했고
 

15
00:01:10,120 --> 00:01:13,393
파이썬이 어떻게 기여를 했는지 이런 것들을 설명을 드리겠습니다
 

16
00:01:14,080 --> 00:01:17,978
그다음에 약 1990년대로 이제 갑자기 점프를 해요
 

17
00:01:18,025 --> 00:01:22,501
이때 이제 국회에서 의안을 타자기로 쳐가지고 만들다가
 

18
00:01:22,526 --> 00:01:24,032
급하면 손으로 쓰기도 했고요
 

19
00:01:24,490 --> 00:01:26,177
워드프로세서로 넘어가게 됩니다
 

20
00:01:26,536 --> 00:01:31,125
무슨 무슨 무슨 한글3.0 이런 게 나와 가지고
그때 무슨 일이 벌어졌나 

21
00:01:31,150 --> 00:01:33,267
우리가 데이터로 한번 살펴보도록 하겠습니다
 

22
00:01:34,173 --> 00:01:36,313
네 번째는 이제 유사도 검사입니다
 

23
00:01:36,580 --> 00:01:39,712
우리 저 파이썬의 scikit-learn에는
 

24
00:01:40,987 --> 00:01:44,306
TF-IDF Vectorization이라고 하는
 

25
00:01:44,689 --> 00:01:49,396
cosine similarity 문서 유사도 검사하는 도구가 아주 편하게 잘 구성되어 있습니다
 

26
00:01:49,420 --> 00:01:52,404
이걸 이용해서 법률안 끼리 얼마나 비슷한가
 

27
00:01:52,690 --> 00:01:57,736
그래서 이 법률안끼리 서로 좀 많이 복사를 한다
 라고 하는 그런 논의가 있었거든요 

28
00:01:57,760 --> 00:02:00,002
요거를 이제 데이터로 한번 살펴보려고 합니다
 

29
00:02:00,831 --> 00:02:03,503
마지막은 결론입니다
시작하겠습니다 

30
00:02:03,965 --> 00:02:08,238
먼저 시작하기 전에 제가 주로 사용한 데이터를 설명을 드리겠습니다
 

31
00:02:08,500 --> 00:02:13,976
1948년부터 2019년 말까지 법률 텍스트 데이터를 구축을 했습니다
 

32
00:02:14,500 --> 00:02:16,281
조문별 텍스트 데이터인데요
 

33
00:02:16,600 --> 00:02:19,700
이게 왜 2백만 조문이 되냐면 겹쳐져 있어서 그렇습니다
 

34
00:02:19,725 --> 00:02:24,967
그러니까 법률을 개정할 때마다 새로운 텍스트가 그 위에 덧붙여지는 거죠
 

35
00:02:25,270 --> 00:02:29,129
이 층층이 쌓인 층들을 다 텍스트로 이제
 

36
00:02:29,154 --> 00:02:33,043
웹크롤링 통해가지고 누적을 시킨 겁니다
 

37
00:02:33,760 --> 00:02:35,836
그래서 이제 개정/폐지 연혁은 약 3만번
 

38
00:02:35,860 --> 00:02:38,485
그러니까 우리나라 법률은 약 3만번 변했다라는 거죠
 

39
00:02:38,510 --> 00:02:42,760
그러니까 3만번 변할 때마다 바뀐 텍스트들을 쭉 켜켜이 쌓아온 것입니다
 

40
00:02:43,270 --> 00:02:47,836
자세히 웹크롤링을 어떻게 했는지를 설명
드리기가 좀 시간 부족도 있고 좀 어렵고요 

41
00:02:47,860 --> 00:02:51,227
밑에 그림을 보시면 이제 데이터는 이렇게 구성되어 있습니다
 

42
00:02:51,549 --> 00:02:53,384
제일 왼쪽은 이제 인덱스고요
 

43
00:02:53,590 --> 00:02:59,574
두 번째로 lawid라고 하는 그 컬럼은
이 법률별로 고유한 아이디 번호입니다 

44
00:02:59,599 --> 00:03:04,036
그래서 2019라고 써있는거는 2019년에 제정된 법률을 말하는 것이고요
 

45
00:03:04,060 --> 00:03:05,737
뒤에 일련번호가 써있습니다
 

46
00:03:05,762 --> 00:03:07,974
그러니까 ver이라고 하는 거는 버전입니다
 

47
00:03:08,270 --> 00:03:11,629
법률이 이게 제정 됐으면 1번 버전이고요
 

48
00:03:11,715 --> 00:03:13,519
한 번 개정됐으면 2번 버전입니다
 

49
00:03:13,990 --> 00:03:18,016
그래서 이렇게 각 버전마다 텍스트를 촘촘히 쌓아올리는 거죠
 

50
00:03:18,040 --> 00:03:25,032
그리고 각 버전마다 1조부터 몇조까지 법률들이 조문
jo라고 하는 이 컬럼에 쭉 저장이 되어 있는 것입니다 

51
00:03:25,271 --> 00:03:30,406
목적, 정의, 다른 법률과의 관계와 같이 각 조문의 내용이
조별로 한 줄씩 이렇게 되어 있는 데이터 입니다 

52
00:03:33,461 --> 00:03:37,636
사실은 제가 이 한국법의 탄생에 대해서 연구를 할려고 했는데
 

53
00:03:37,660 --> 00:03:40,156
미국에는 훨씬 더 멋있는 연구가 있었어요
 

54
00:03:40,180 --> 00:03:45,736
법학자들이 무려 법학자들이 그 사이언스에 게재한 논문인데
 

55
00:03:45,760 --> 00:03:50,767
미국이 1776년에 독립전쟁으로 독립을 했는데 판례가 독립을 못한 거예요
 

56
00:03:51,220 --> 00:03:56,806
나라는 독립을 했는데 판사들은 여전히
영국의 판례를 인용하던 그런 웃기는 상태가 

57
00:03:56,830 --> 00:03:58,665
한참 동안 지속되었던 거죠
 

58
00:03:58,744 --> 00:04:03,900
그런데 어느 날 이제 '어 이러면 안 되겠다' 라고 하는 생각이 누적되다 보니까
 

59
00:04:03,925 --> 00:04:05,915
미국 법률이란 게 생겼어요 없다가
 

60
00:04:06,340 --> 00:04:10,730
그래서 네트워크라는 게 그냥 영국에 종속되어 있던 네트워크가
 

61
00:04:10,755 --> 00:04:13,366
한 1820년쯤 거의 한50년 걸렸네요
 

62
00:04:13,390 --> 00:04:20,415
1820년쯤에 갑자기 어느 순간 미국 판례끼리 
인용한 네트워크가 창발적으로 등장했다 

63
00:04:20,440 --> 00:04:23,536
Emerge했다 라고 하는 그런 아주 훌륭한 연구가 있습니다
 

64
00:04:23,560 --> 00:04:26,310
그래서 이거를 모방을 하고 싶었어요 한국에 대해서도
 

65
00:04:26,860 --> 00:04:32,006
그런데 좀 공부를 해보니까 아 한국의 상황이 이렇지는 않더라고요
 

66
00:04:32,031 --> 00:04:34,171
왜냐하면 한국은 판례법 국가가 아니고
 

67
00:04:36,311 --> 00:04:40,028
우리가 줄 글로 써 있는 아까 보셨던 그런 법률이기 때문에 그렇기도 하고
 

68
00:04:40,053 --> 00:04:41,646
또 복잡한 역사가 있기 때문입니다
 

69
00:04:41,830 --> 00:04:43,306
배경 설명을 한번 드릴게요
 

70
00:04:43,754 --> 00:04:46,527
1948년에 우리가 법률을 만들었어요
 

71
00:04:47,500 --> 00:04:50,746
뭐 역사를 아시겠지만 이제 제헌헌법을 만들었는데
 

72
00:04:50,770 --> 00:04:52,174
거기에 100조에 이렇게 써 있습니다
 

73
00:04:52,199 --> 00:04:56,806
현행 법령은 이 헌법에 저촉되지 아니하는 한 효력을 가진다
 

74
00:04:56,830 --> 00:04:59,720
아니 근데 나라가 새로 생겼는데 현행 법령이 어딨냐는 거예요
 

75
00:05:00,212 --> 00:05:05,008
보니까 무슨 법령이 있었냐 면은 조선총독부 법령이랑 미군정법령 있었어요
 

76
00:05:05,470 --> 00:05:07,602
그러니까 나라는 새로 만들었는데
 

77
00:05:08,368 --> 00:05:14,886
우리가 예를 들어서 뭐 교통신호를 지키고 매일
생활하면서 법률에 적용이 안 될 수가 없잖아요 

78
00:05:15,058 --> 00:05:19,606
나라가 갑자기 생겼다고 하지만 일상생활은 여전히
 

79
00:05:19,630 --> 00:05:21,489
일제강점기를 벗어나지 못했던 거예요
 

80
00:05:21,590 --> 00:05:25,230
조선총독부 법령이 여전히 현행법으로서 적용이 되던 상태였다
 

81
00:05:25,600 --> 00:05:29,037
그런데 문제는 역사를 보시면 아시겠지만
 

82
00:05:29,062 --> 00:05:34,366
1950년대에 많이 힘들었어요
전쟁도 하고 뭐 정치적 파동도 많았고요 

83
00:05:34,390 --> 00:05:39,194
그래서 1960년까지도 조선총독부 법령을 다 제거를 하지 못했어요
 

84
00:05:39,610 --> 00:05:44,750
방치를하고 있었는데 1961년에 아쉽게도 이제 국회가 해산됐습니다
 

85
00:05:45,656 --> 00:05:46,633
쿠데타가 있었죠
 

86
00:05:46,658 --> 00:05:50,806
그래서 이제 국가재건최고회의가 설치가 되고
 

87
00:05:50,830 --> 00:05:54,406
구법령 정비사업이라고 하는 사업이 시행이 됐어요
 

88
00:05:54,431 --> 00:05:58,718
그래서 이렇게 선언합니다 
구악을 일소 하겠다 

89
00:05:58,743 --> 00:05:59,938
우리가 구악을 일소하겠다
 

90
00:05:59,963 --> 00:06:06,892
그래서 이때 뭐 그 조선총독부령을 다 없애겠다라고 해가지고
 

91
00:06:07,384 --> 00:06:12,676
사업을 진행을 했는데 문제는 국가재건최고회의에 전문가들을 모셨는데
 

92
00:06:12,700 --> 00:06:16,590
전문가가 주로 법조인이 아니라 일본어를 잘 하는 번역 전문가였던 거예요
 

93
00:06:17,035 --> 00:06:20,566
그래서 결국 총독부법령의 내용을 그냥 그대로 번역하게 되는
 

94
00:06:20,590 --> 00:06:23,082
그러한. 그랬다고 하는 회고가 있습니다
 

95
00:06:23,440 --> 00:06:31,736
문제는 이걸 파이썬으로 어떻게
우리가 분석할 수 있을 것이냐를 한번 생각을 해본 겁니다 

96
00:06:33,180 --> 00:06:37,508
얼마나 많은 법률이 총독부 법령 일괄정비로 탄생을 했는가
 

97
00:06:37,930 --> 00:06:41,000
지금까지 관이 이어져 내려오는가 이걸 우리가 데이터로 볼 수가 있어요
 

98
00:06:41,620 --> 00:06:45,102
어떤 데이터가 있냐면 법률에는 부칙이라고 하는 그런 사항이 있습니다
 

99
00:06:45,127 --> 00:06:48,136
법률 말미에 어떤 텍스트가 있냐면
 

100
00:06:48,160 --> 00:06:52,605
시행일 이라든가 또는 어떤 법률을 폐지하고 입법한
것인지에 대한 정보가 써 있는 

101
00:06:52,630 --> 00:06:55,613
그런 부칙이라고 하는 그런 정보 텍스트들이 있습니다
 

102
00:06:56,140 --> 00:06:59,116
이것들이 총 40만 줄짜리 이런 데이터인데요
 

103
00:06:59,436 --> 00:07:03,223
이 그림을 보시면 이게 부칙의 Pandas 데이터프레임입니다
 

104
00:07:03,248 --> 00:07:06,700
그래서 보시면 각 법률마다 부칙들이 쭉 쌓여 있죠
 

105
00:07:07,060 --> 00:07:11,839
그래서 총독부 법령을 계승하는 이런 법률들은
부칙에 다음과 같이 규정을 하고 있습니다 

106
00:07:11,864 --> 00:07:16,245
1926년 조선총독부령 제 몇 호 무슨 무슨 무슨 령
 

107
00:07:16,270 --> 00:07:20,986
예를 들어 뭐 조선민사령 아니면 조선감화령을 폐지한다 라고 써 있는 거죠
 

108
00:07:22,090 --> 00:07:25,590
그러니까 그 우리 법률 텍스트에 다 근거가 남아 있는 거예요
 

109
00:07:26,004 --> 00:07:30,442
이 법률은 원래는 조선총독부령 이었는데 이걸 언제
 

110
00:07:30,467 --> 00:07:35,443
우리 한국 법률로 바꿨다 라고 하는 걸
우리가 텍스트를 통해서 추적을 할 수가 있다 라는 거죠 

111
00:07:35,740 --> 00:07:39,521
그래서 우리가 이를 부칙에 있는 간단한 키워드 검사만 해주면 됩니다
 

112
00:07:39,825 --> 00:07:43,692
그래서 그 부칙 텍스트 안에 '조선총독부령' 있습니까?
 

113
00:07:44,290 --> 00:07:46,550
'제령'이 있습니까? '칙령'이 있습니까?
 

114
00:07:46,575 --> 00:07:48,832
'각령'이 있습니까? '황실령'이 있습니까?
 

115
00:07:48,880 --> 00:07:53,149
황실령은 그 형식적으로 남아 있던 조선..
 

116
00:07:53,625 --> 00:07:56,206
조선이 아니죠 대한제국 황실을 얘기하는 것입니다
 

117
00:07:56,230 --> 00:07:57,527
이황가라고 그때는 불렀었죠
 

118
00:07:57,552 --> 00:08:02,086
아무튼 이러한 그 조선총독부령에 종류들이 쭉 있어요
 

119
00:08:02,110 --> 00:08:05,031
이러한 키워드를 갖고 있는지를 검사를해서
 

120
00:08:05,056 --> 00:08:07,899
있는 경우 만을 우리가 데이터를 추출할 수가 있는 거죠
 

121
00:08:09,413 --> 00:08:15,045
키워드는 간단합니다 if / elif 써가지고
부칙의 그 데이터프레임 행수만큼 

122
00:08:15,070 --> 00:08:18,320
반복을 해가지고 있냐 없냐 검사를 하는 겁니다
 

123
00:08:19,030 --> 00:08:23,295
그래서 쭉 이러한 한국법 부칙에 데이터들을 좀 모아서
 

124
00:08:24,070 --> 00:08:26,599
이런 빈도분포열을 만듭니다
 

125
00:08:26,624 --> 00:08:29,466
그런데 문제는 도출된 결과는 중복 데이터를 포함합니다
 

126
00:08:29,491 --> 00:08:34,858
왜냐면은 부칙은 한번 법률 뒤에 붙으면 법률이 계속 누적되기 때문이죠
 

127
00:08:35,155 --> 00:08:39,556
그러니까 예를 들어서 1950년에 우리가 총독부령을
 

128
00:08:39,580 --> 00:08:42,454
없애고 어떤 A라는 법률을 만들었으면은
 

129
00:08:43,090 --> 00:08:48,418
A라는 법률을 1952년에 개정을 하면은 그 부칙이 또 켜켜이 쌓여요
 

130
00:08:48,820 --> 00:08:54,616
그래서 그 조선총독부령을 계승한 한국법이 여러 번 나타난다 라는 거죠
 

131
00:08:54,640 --> 00:08:57,145
그래서 어떻게 제거를 할 수 있느냐 이경우에는 우리가
 

132
00:08:57,186 --> 00:09:02,037
보통 Pandas에서 쓰는 그런 그 데이터 중복을 검사하는 방식으로 쓸 수가 없고
 

133
00:09:02,225 --> 00:09:05,866
다행히 우리에게는 법률 별로 고유한 lawid라고
하는 컬럼 데이터가 있습니다 

134
00:09:07,300 --> 00:09:10,253
여기 lawid가 같은 것들을 제거해주면 되는 거죠
 

135
00:09:10,810 --> 00:09:16,020
그래서 우리는 일단 몇 개나 도대체 이런 그 조선총독부령을 계승하는
 

136
00:09:16,045 --> 00:09:19,529
한국법이 있나라는 걸 알기 위해서로 lawid의 갯수를 세 주면 됩니다
 

137
00:09:19,900 --> 00:09:25,251
그럼 이걸 어떻게 세 줬냐? value_counts라고
하는 그러한 함수를 써가지고 index만 출력하면 됩니다 

138
00:09:26,350 --> 00:09:31,857
이러면 이제 같은 lawid를 갖고 있는 것들은
하나의 인덱스로 이제 축약이 되겠죠 

139
00:09:31,943 --> 00:09:34,364
그래서 해보니까 결과는 255개가 있더라
 

140
00:09:34,990 --> 00:09:40,154
많죠? 이 255개가 언제 된 것이냐 이것을 한 번 알려고 하면요
 

141
00:09:40,600 --> 00:09:46,701
아까 말씀을 드렸다시피로 lawid는 처음엔 네 글자가 바로 제정된 연도입니다
 

142
00:09:46,840 --> 00:09:49,402
그러면 이 법률이 과연 언제 제정이 됐느냐
 

143
00:09:49,750 --> 00:09:54,359
그러면 lawid의 첫 네 개의 텍스트를 추출하고요
 

144
00:09:55,990 --> 00:09:58,216
그런데 이게 재미있어요
 

145
00:09:58,241 --> 00:10:02,842
이게 사실은 이 데이터가 타입이 뭔지를 항상 우리가 봐야 되잖아요
 

146
00:10:03,220 --> 00:10:08,326
이 lawid 데이터가 어떻게 하다 보니까 사실은
 

147
00:10:08,350 --> 00:10:09,787
int 타입인 거예요
 

148
00:10:10,045 --> 00:10:14,896
이거를 이제 첫 네 글자를 빼오려면 글자, str으로 바꿔줘야 되겠죠
 

149
00:10:14,920 --> 00:10:20,176
str로 바꿔주고 그다음에 앞에 네 개의 글자를 따온 다음에
 

150
00:10:20,200 --> 00:10:23,926
다시 데이터 처리를 하려면 다시 int로 바꿔줘야 되겠죠
 

151
00:10:23,950 --> 00:10:28,426
그래서 그렇게 int로 바꿔준 다음에 그 결과물들을 쭉 누적을 해보니까
 

152
00:10:28,450 --> 00:10:30,848
오른쪽에 보시는 그런 아웃풋 값이 나옵니다
 

153
00:10:31,210 --> 00:10:39,210
그래서 대부분의 법률, 대부분의 총독부령을
대체하는 법률들은 1961년부터 63년까지 만들어졌더라 

154
00:10:39,310 --> 00:10:44,169
그러니까 정상적인 입법과정을 거친 게 아니라
 

155
00:10:44,356 --> 00:10:48,616
국가재건최고회의에서 번역가들을 동원해서 만든 법들이 대부분이었다
 

156
00:10:48,640 --> 00:10:50,124
라는 걸 우리가 볼 수 있습니다
 

157
00:10:50,740 --> 00:10:52,107
시각화를 해야 되겠죠
 

158
00:10:52,132 --> 00:10:56,146
데이터가 있으면 항상 시각화를 하고 싶은 그런 충동을
 

159
00:10:56,170 --> 00:10:57,825
저는 갖고 있습니다
 

160
00:10:58,883 --> 00:11:04,164
사실은 그 데이터 시각화는 굉장히 코드 줄이 많이 필요합니다
 

161
00:11:04,780 --> 00:11:06,706
특히 파이썬의 특징일까요?
 

162
00:11:06,730 --> 00:11:11,509
파이썬 같은 경우는 이제 ready-made로
 이렇게 좀 되어 있는 게 아니라 

163
00:11:11,534 --> 00:11:13,352
여러 가지 우리가 조정할 수가 있잖아요
 

164
00:11:13,377 --> 00:11:15,634
그래서 이 조정하는 것들을 쭉 다 써놓은 겁니다
 

165
00:11:16,090 --> 00:11:20,472
저는 seaborn 을 불러와가지고 sns라는 이름으로 썼고요
 

166
00:11:21,276 --> 00:11:24,955
matplotlib을 썼고요. numpy를 썼습니다
 

167
00:11:25,119 --> 00:11:28,548
그래서 'whitegrid'라고 하는 스타일을 먹여서
 

168
00:11:29,001 --> 00:11:33,810
figsize, plt.figure를 해주고 폰트 설정을 해주고
 

169
00:11:34,240 --> 00:11:36,108
그다음에 우리가 히스토그램을 그리는 겁니다
 

170
00:11:36,133 --> 00:11:42,346
1948년부터 1963년까지 빈도가 얼마나 있느냐
 plt.hist 라고 

171
00:11:42,370 --> 00:11:44,151
하는 그런 명령어를 사용합니다
 

172
00:11:44,680 --> 00:11:48,344
쭉 이제 우리가 컬러도 지정을 해주고 뭐 이런 것도 할 수 있고요
 

173
00:11:48,820 --> 00:11:50,865
그 다음에 두 번째가 그 재미있는 건데요
 

174
00:11:50,890 --> 00:11:52,146
vlines 이라고 하는 것입니다
 

175
00:11:52,171 --> 00:11:53,740
plt.vlines 라는 건데요
 

176
00:11:53,765 --> 00:11:55,872
이거는 Vertical Line 입니다
 

177
00:11:55,897 --> 00:11:58,022
그러니까 세로줄을 그려주는 거죠
 

178
00:11:58,240 --> 00:12:01,966
왜냐면 우리가 1961년부터가 이제 우리가 관심 있어 하는 데이터잖아요
 

179
00:12:02,350 --> 00:12:07,239
그럼 이거를 이제 dashed 스타일로, linestyles='dashed'로 그려주는 겁니다
 

180
00:12:07,264 --> 00:12:10,232
빨간색으로요. 한번 어떤 그림이 나오는지 볼게요
 

181
00:12:11,470 --> 00:12:16,048
총 255개의 법률이 총독부령을 폐지하고 그 자리에 대신 입법이 되었는데
 

182
00:12:16,390 --> 00:12:20,093
정상적인 입법과정을 거친 경우가 42건. 1960년까지죠
 

183
00:12:20,470 --> 00:12:26,356
그 다음에 우리의 구법령 정비사업을 통해서 재빠르게 속성으로 입법된 경우가
 

184
00:12:26,380 --> 00:12:28,005
213건이라고 할 수가 있겠습니다
 

185
00:12:29,230 --> 00:12:34,576
그러면 우리가 추적을 해봅시다
그래서 이때 만든 법률이 아직까지 살아있느냐 

186
00:12:34,600 --> 00:12:36,084
제 관심사인 거죠
 

187
00:12:36,460 --> 00:12:41,256
그래서 해당 법률, 그러니까 우리가 지금
갖고 있는 데이터에는 lawid가 있습니다 

188
00:12:41,650 --> 00:12:46,579
lawid가 있는데 그 lawid가 지금까지 이어져 내려오느냐는 거죠
 

189
00:12:46,884 --> 00:12:52,163
개정을 쭉 해오면 lawid로 버전이 뭐 30, 40까지 올라가겠죠
 

190
00:12:52,188 --> 00:12:54,570
3-40번 개정을 하다 현행법으로 살아있느냐를 보는 거죠
 

191
00:12:54,595 --> 00:13:00,316
그러면 우리 데이터의 그 해당 lawid 를 갖고 있는 데이터 중에 가장
 

192
00:13:00,340 --> 00:13:04,147
최신 연혁으로 해당되는 것을 뽑아보자
 

193
00:13:04,366 --> 00:13:11,850
즉 마지막 줄. 우리가 Pandas 데이터프레임에서
한 줄을 뽑아오는 명령어가 .iloc 죠 

194
00:13:12,079 --> 00:13:16,306
그래서 우리가 여기서 index number를 -1 이라고 하면
제일 뒤에 것을 뽑아오는 겁니다 

195
00:13:16,330 --> 00:13:20,806
그러니까 제일 마지막 줄을 뽑아와서 개정 종류가 뭡니까 물어보는 겁니다
 

196
00:13:21,370 --> 00:13:26,877
왜냐하면 개정이 만약에 폐지로 끝나면 폐지된 채로 없어졌다는 얘기죠
 

197
00:13:27,182 --> 00:13:30,307
근데 폐지가 아니고 다른 걸로 돼 있다면 아직 살아있다는 얘기입니다
 

198
00:13:31,060 --> 00:13:33,364
그런데 폐지는 11개밖에 없었어요
 

199
00:13:33,790 --> 00:13:37,516
그다음에 3개의 법률은 제정 후 한 번도 개정되지 않았어요
 

200
00:13:37,540 --> 00:13:43,576
가서 확인해 보니까 그냥 방치, 그냥 사문화
제정을 한 뒤에 전혀 손을 안 봤다는 

201
00:13:43,600 --> 00:13:44,836
거의 사문화 되었다는 얘기입니다
 

202
00:13:44,860 --> 00:13:51,188
그대로 14개 정도는. 255개 중에 14개 정도는 안 살아있는 거죠
 

203
00:13:52,930 --> 00:13:59,242
그러면 나머지는 그럼 어떻게 된 거냐 봤더니 이제
 

204
00:14:00,460 --> 00:14:02,626
타법폐지, 일부개정 이런 것들 있죠
 

205
00:14:02,650 --> 00:14:06,142
그래서 199개의 법률은 현행법으로 계승되었다고 볼 수가 있는데
 

206
00:14:06,670 --> 00:14:07,920
다음으로 넘어가겠습니다
 

207
00:14:11,710 --> 00:14:17,116
그래서 아까 보셨다시피 53개 법률은
이제 그냥 개정해가지고 현행법으로 살아있는데 

208
00:14:17,140 --> 00:14:19,396
나머지 146개 법률은 '타법폐지'로 돼 있어요
 

209
00:14:19,420 --> 00:14:21,248
그래서 폐지가 됐으니까 안 살아있는 것 같은데
 

210
00:14:21,273 --> 00:14:26,656
문제는 '타법폐지'라는 거는 폐지를 하면서
다른 법률로 계승됐다는 걸 표시하는 겁니다 

211
00:14:26,680 --> 00:14:30,225
그런데 물론 타법폐지를 했기 때문에 법률이 바뀌었죠
 

212
00:14:30,250 --> 00:14:31,966
그러니까 lawid가 달라집니다
 

213
00:14:31,990 --> 00:14:34,919
그러니까 우리가 lawid로 추적하는 방식으로는
 

214
00:14:34,944 --> 00:14:38,672
53개 법률은 현행법으로 이어졌다는 걸 우리가 정확히 알 수가 있는데
 

215
00:14:38,914 --> 00:14:44,148
146개 법률은 어딘가에 남아 있을 것 같은데 
어디로 갔는지는 아직 잘 모르는 상태예요 

216
00:14:44,398 --> 00:14:46,991
그럼 이 타법폐지를 어떻게 했느냐
 

217
00:14:47,020 --> 00:14:52,395
그래서 타법폐지 법률들을 계승한 법률을
연혁을 이용해가지고 추적을 할 수가 있습니다 

218
00:14:52,600 --> 00:14:59,506
왜냐하면 타법폐지를 할 때 역시 부칙에 
어떤 법률로 이어졌는지 명시가 돼 있어요 

219
00:15:00,040 --> 00:15:04,606
그래서 이렇게 다시 부칙 데이터를 불러와가지고 부칙에다 묻는 겁니다
 

220
00:15:04,630 --> 00:15:08,895
이 법률을 타법폐지를 했는데 그럼 어느 법률로 계승이 됐습니까?
 

221
00:15:09,075 --> 00:15:12,153
이거를 이제 텍스트 함수들을 이용해 가지고 불러오는 거죠
 

222
00:15:12,820 --> 00:15:17,640
그래서 이것들을 쭉 이렇게 계속 계속 연속적으로
우리가 추적을 할 수 있다 라는 거죠 자동으로 

223
00:15:18,160 --> 00:15:20,650
추적을 해보니까 우리가 익숙한 법률들이 많이 보여요
 

224
00:15:20,675 --> 00:15:24,315
타법폐지된 것들이 현행법까지 내려오고 있더라
 

225
00:15:24,820 --> 00:15:29,234
산림법이라든지 전기통신법. 지금은 전기통신사업법으로 바뀌었죠
 

226
00:15:29,507 --> 00:15:32,296
도로교통법. 이건 토씨 하나 틀리지 않고 계속 쓰고 있어요
 

227
00:15:32,320 --> 00:15:38,835
도로교통법 이런 것들 다 1961년이나 62년에 국가재건최고회의에서
 

228
00:15:38,860 --> 00:15:44,063
일본어 법령을 번역해가지고 만든 법률이 조금씩 수정을 해가지고
 

229
00:15:44,088 --> 00:15:45,286
많이 수정했을 수도 있죠
 

230
00:15:45,310 --> 00:15:46,767
지금까지 내려오고 있다는 겁니다
 

231
00:15:47,890 --> 00:15:52,202
그래서 결론은 약 200개의 법률이 아직까지 내려오고 있더라 라는 것입니다
 

232
00:15:55,780 --> 00:15:59,866
그런데 아까 그 분석의 한계는 있어요
 

233
00:15:59,890 --> 00:16:03,286
그러니까 우리가 쭉 이어져 내려온 걸 볼 수는 있지만
 

234
00:16:03,310 --> 00:16:08,056
내용이 얼마나 계승 됐느냐는 아직 제가 기술이 부족해서 아직 못했습니다
 

235
00:16:08,080 --> 00:16:14,266
그런데 이런 것들을 자동으로 분석하려면 이제
법률의 텍스트 내용을 인식을 해서 처리를 할 수 있는 

236
00:16:14,290 --> 00:16:18,493
어떤 자연어
 

237
00:16:19,300 --> 00:16:24,016
Natural Language Processing 이나 AI 이런게
필요하지만 아직까지는 좀 힘들 것 같아요 

238
00:16:24,040 --> 00:16:29,047
인간 연구자들이 이런 부분에 대해서 많이 좀
연구를 해줬으면 좋겠다. 라고 하는 그런 생각이 듭니다 

239
00:16:30,040 --> 00:16:31,211
다음 주제입니다
 

240
00:16:32,020 --> 00:16:34,059
징벌적 손해배상에 대한 이야기입니다
 

241
00:16:36,100 --> 00:16:39,310
누군가 불법행위를 해서 배상 책임을 지게 됐을 때
 

242
00:16:39,940 --> 00:16:45,299
그런 불법행위가 악질인 경우에 우리는 증명된
손해액보다 더 높은 배상금을 내도록 그렇게 하고 있습니다 

243
00:16:46,030 --> 00:16:52,216
우리가 잘 알고 있는 그 가습기 살균제 사건
굉장히 도덕적으로 아주 잘못됐죠 

244
00:16:52,240 --> 00:16:58,458
그런 것들 같은 경우에는 그냥 이제
손해배상을 그 사람의 손해본 만큼만 하는 게 아니라 

245
00:16:58,840 --> 00:17:05,004
그 손해액 세 배까지 가중을 해가지고 손해배상금을
내라고 하는 그런 입법들이 최근에 된 바가 있습니다 

246
00:17:05,320 --> 00:17:12,016
그래서 이런 식으로 보니까 손해액의 3배 까지를
배상할 수 있게 하는 방식의 입법이 들어오는데 

247
00:17:12,040 --> 00:17:17,891
이게 그 법학자들 사이에선 알려져 있기를
2011년 하도급법에 처음 도입되었다고 알려져 있습니다 

248
00:17:19,210 --> 00:17:20,881
도입될 때 말들이 많았어요
 

249
00:17:21,819 --> 00:17:26,397
법학자들도 다들 반대를 했을 뿐만 아니라
판례에도 이런 얘기들이 있습니다 

250
00:17:26,833 --> 00:17:32,427
"우리 민사법체계에서 인정되지 아니하는
형법적 배상으로써 우리나라 공서양속에 반할 수 있다' 

251
00:17:32,452 --> 00:17:37,575
뭐 이런 얘기들을 이제 엄숙하게 판사님들께서 
95, 96년도에 언급을 하고 있습니다 

252
00:17:39,940 --> 00:17:44,150
그런데 저는 사실은 생각이 다르거든요
 

253
00:17:44,588 --> 00:17:47,506
그 징벌적 손해배상 입법으로 도입하는 게 뭐가 문제가 되느냐
 

254
00:17:47,530 --> 00:17:50,389
물론 요즘 법학자들은 많이들 그렇게 생각하십니다
 

255
00:17:50,414 --> 00:17:53,956
그런데 1910년대 또는 아 죄송합니다
 

256
00:17:53,980 --> 00:17:58,675
2010년대 또는 2000년대에 그런 징벌적 손해배상에 대한 생각은 그랬는데
 

257
00:17:58,990 --> 00:18:01,638
제가 이런 통념을 깰 수 있는 입법례를 하나 찾았어요
 

258
00:18:02,140 --> 00:18:06,108
무려 1949년에 징벌적 손해배상 입법례가 있었다는 겁니다
 

259
00:18:06,550 --> 00:18:09,909
이거 제가 우연찮게 발견했는데 발견과정을 한번 공유를 하겠습니다
 

260
00:18:13,930 --> 00:18:19,156
원래 제가 대학원을 다니고 있는데 대학원에서 이제 그 과제를 하려고
 

261
00:18:19,660 --> 00:18:23,980
징벌적 손해배상 입법례가 정확히 어디에 얼마만큼 있느냐를
 

262
00:18:24,005 --> 00:18:27,183
이제 탐색을 하려고 이 코드를 짰어요
 

263
00:18:27,520 --> 00:18:32,266
그래서 징벌적 손해배상의 텍스트 특징이라고 할 수 있는
 

264
00:18:32,290 --> 00:18:36,461
네 번째 줄을 보시면 if '3배'가 텍스트에 있고
 

265
00:18:36,486 --> 00:18:43,905
그리고 '손해' 또는 '배상' 또는 '피해'라는 
3개의 단어 중에 하나 이상을 포함하고 있는 경우 

266
00:18:44,014 --> 00:18:47,889
다 뽑아주세요 라고 코드를 짜가지고 돌리면 다 나옵니다
 

267
00:18:48,520 --> 00:18:52,006
그래서 뭐 최근에 20건이 있었다 뭐 이런 식으로 나오고
 

268
00:18:52,030 --> 00:18:55,156
중요한 게 언제 생겼는지가 나오기 때문에 그림을 그릴 수 있거든요
 

269
00:18:55,180 --> 00:18:59,351
그래서 숙제를 잘했는데 숙제를 하다 보니까 이상한 일이 생기는 거예요
 

270
00:19:00,070 --> 00:19:01,523
다음번으로 넘어갈게요
 

271
00:19:05,183 --> 00:19:11,783
그 결과물을 제가 Jupyter Notebook에 출력을 해보니까
 

272
00:19:11,808 --> 00:19:15,616
1949년 11월 28일에 제정된 법이 있다는 거예요
 

273
00:19:15,640 --> 00:19:16,936
있을 수 없는 일이거든요
 

274
00:19:16,960 --> 00:19:21,944
그래서 이게 뭐냐 해가지고 이제
보는 방법은 간단하죠 

275
00:19:22,450 --> 00:19:26,856
result, 제가 도출한 결과값 데이터프레임에서
 

276
00:19:26,881 --> 00:19:32,012
proc라고 하는 그런 컬럼을 갖고 와서
이건 제정일입니다 

277
00:19:32,200 --> 00:19:35,551
value_counts 해보고 그 다음에 그 value_counts를 
 

278
00:19:35,576 --> 00:19:38,800
보통 value_counts를 쓰면은 빈도수 순서대로 나옵니다
 

279
00:19:38,825 --> 00:19:41,692
많은 순서대로. 그게 아니라 시간 순서대로 볼려면
 

280
00:19:41,708 --> 00:19:44,090
sort_index 해가지고 날짜별로 볼 수가 있는 거죠
 

281
00:19:44,129 --> 00:19:49,496
봤더니 이제 제일 첫 번째 줄이 1949년이더라 
텍스트가 뭔지 확인을 해보면 되는 겁니다 

282
00:19:49,781 --> 00:19:50,582
넘어갈게요
 

283
00:19:53,080 --> 00:19:58,516
그래서 Pandas에서 datetime의 기간 type으로 조건을 줘서 우리가 살펴보면
 

284
00:19:58,540 --> 00:20:02,500
그러니까 우리가 Pandas 데이터프레임에서 우리가 원하는 데이터를 살펴보려면
 

285
00:20:02,525 --> 00:20:07,634
보통 여러 가지 조건값들 줍니다
똑같거나 낮거나 이런 걸 하는데 

286
00:20:07,659 --> 00:20:11,146
제가 쓰고 있는 데이터의 proc 라고 하는 데이터는
 

287
00:20:11,170 --> 00:20:16,336
지금 datetime이라고 하는 파이썬에서 시간을 다루는
 

288
00:20:16,360 --> 00:20:20,746
시간을 서로 빼주고 더해주고 시간의 차이를 계산해주는
 

289
00:20:20,770 --> 00:20:26,303
그런 타임스탬프라고 그러죠 그런 datetime이라고 하는
그런 모듈을 쓰고 있는데 

290
00:20:26,328 --> 00:20:30,676
datetime을 이용해가지고 1950년보다 전에 있었던 입법례가 뭔지
 

291
00:20:30,700 --> 00:20:33,309
찾아주세요 라고 하는 그런 명령어를 짠 겁니다
 

292
00:20:33,730 --> 00:20:38,783
그랬더니 밑에 그림처럼 결과가 나왔죠 상표법입니다
 

293
00:20:38,808 --> 00:20:42,847
상표법 30조에 보면은 이렇게 돼 있어요
 

294
00:20:43,030 --> 00:20:47,608
법원은 증명된 손해액을 근거로 적당한 배상액을 정할 수 있으나
 

295
00:20:47,633 --> 00:20:51,676
그 전액은 그 금액은 손해액의 3배를 초과할 수 없다
 

296
00:20:51,700 --> 00:20:55,254
그러니까 요즘에 하고 있는 징벌적 손해배상 입법과 거의 유사합니다
 

297
00:20:55,990 --> 00:21:00,613
그래서 뭐 이번 편은 약간 좀 허무해요
그냥 발견하고 말았다는 얘기인데 

298
00:21:00,638 --> 00:21:05,755
그래서 뒤에 얘기를 말씀드리면 1949년에
입법례는 미국 상표법을 그대로 베껴온 거래요 

299
00:21:06,122 --> 00:21:10,245
이게 증언이 있습니다
1949년이나 50년쯤에 쓴 논문들이 있어요 

300
00:21:10,270 --> 00:21:13,332
잊혀졌는데
그 논문들을 발굴하다 보니까 

301
00:21:13,357 --> 00:21:19,179
이 법안을 만들 때 특허 국장이었던 분이 
미국에 유학 가가지고 영어로 논문을 쓰셨더라고요 

302
00:21:19,204 --> 00:21:24,789
한국상표법은 미국상표법하고 독일의 상표법을 
참고해서 만들었습니다 라고 증언을 하고 계시고 

303
00:21:25,030 --> 00:21:28,905
그런데 재미있는 게 1990년에 징벌적 손해배상이 없어져요
 

304
00:21:29,290 --> 00:21:32,719
그런데 의원님들이나 변리사들이 모여서 없앤 게 아닙니다
 

305
00:21:33,400 --> 00:21:35,986
상표법이란 법은 특이한 법인데 되게 전문법이에요
 

306
00:21:36,010 --> 00:21:39,992
상표법을 읽는 사람들은 거의 대부분 변리사 밖에 없어요
 

307
00:21:40,226 --> 00:21:45,256
왜냐하면 상표를 등록해주고 취소해주는 업무를 하는 사람들이 그 사람들이거든요
 

308
00:21:45,280 --> 00:21:48,764
상공부에서. 옛날엔 특허청이 상공부 소속에 있었습니다
 

309
00:21:49,060 --> 00:21:53,372
상공부에서 이제 상표법을 전부 개정을 한 번 했는데
 

310
00:21:54,009 --> 00:21:57,189
원래 상공부 초안에는 이제 징벌적 손해배상 규정이 있었어요
 

311
00:21:57,550 --> 00:22:00,076
그런데 법제처에서 심사를 할 때 조용히 없어집니다
 

312
00:22:00,100 --> 00:22:01,636
의원들이 없앤 게 아니에요
 

313
00:22:01,660 --> 00:22:04,738
법제처에 있는 법제관들. 그러니까 공무원들이 조용히 없었는데
 

314
00:22:05,200 --> 00:22:07,876
재밌어요. 법제처 공무원들이 어떤 사람들이냐
 

315
00:22:08,267 --> 00:22:11,335
법률에 대해서 직업적으로 많이 다룬 사람들
 

316
00:22:11,360 --> 00:22:16,531
그러니까 법학적인 지식을 배우고 법학으로
이렇게 트레이닝이 많이 된 사람들입니다 

317
00:22:16,900 --> 00:22:21,478
이 사람들이 보니까 징벌적 손해배상은
한국민법에 어긋나거든요. 자기들이 보기엔 

318
00:22:21,503 --> 00:22:22,814
그래서 조용히 없애버린 거예요
 

319
00:22:23,590 --> 00:22:25,707
법학자들은 이런 게 있었다는 것도 몰랐죠
 

320
00:22:25,732 --> 00:22:30,474
왜냐면은 상표법은 대부분 변리사들만 보던 법이었거든요
 

321
00:22:30,880 --> 00:22:33,715
그래서 한미 FTA 때 미국이 한국에 요청을 해요
 

322
00:22:34,044 --> 00:22:37,465
상표법에 당신의 상표법에 3배상을 도입을 해라
 

323
00:22:37,512 --> 00:22:41,184
왜냐하면 상표권을 강하게 보호를 하려면 그렇게 해야 된다 라는 거죠
 

324
00:22:41,239 --> 00:22:43,065
그랬더니 법학자들이 들고 일어나는 겁니다
 

325
00:22:43,090 --> 00:22:47,621
전래 없다. 대륙법이니까 우리는 불가능하다 라고 결사 반대를 했었는데
 

326
00:22:47,668 --> 00:22:52,117
알고 보니까 1949년부터 40년간 입법례가 있었고 판례도 있어요
 

327
00:22:52,142 --> 00:22:55,957
판례도 있고 아주 평화롭게 잘 집행이 됐어요
 

328
00:22:56,500 --> 00:22:59,806
상표법의 역사를 생각하면 매우 아이러니다
 

329
00:22:59,830 --> 00:23:02,947
이런 것들을 우리가 파이썬으로 볼 수 있다는 점도 한번 살펴봤습니다
 

330
00:23:04,570 --> 00:23:09,826
그런데 재밌는 거는 징벌적 손해배상이 지금 20개 정도 입법이 됐는데
 

331
00:23:09,850 --> 00:23:11,468
상표법은 아직도 입법이 안 됐어요
 

332
00:23:12,160 --> 00:23:13,863
정말 역설적이라고 할 수 있겠습니다
 

333
00:23:16,210 --> 00:23:17,655
다음 차례입니다
 

334
00:23:17,710 --> 00:23:21,976
제가 이번에는 또 연구실에서 이제 또 다른 연구를 하기 위해서
 

335
00:23:23,200 --> 00:23:27,262
우리나라에서 만든 법률안들의 페이지 수를 이제 데이터로 만들고 있었습니다
 

336
00:23:27,640 --> 00:23:31,765
미국에서는 물리적 입법생산성이라 그래가지고
 

337
00:23:31,890 --> 00:23:38,452
의회가 만드는 법률이 과연 몇 페이지냐를 알기 위해서
 페이지수를 세 가지고 사람들 다 제공을 해주고 있었어요 

338
00:23:38,538 --> 00:23:40,545
그거를 제가 재헌을 해보려고
 

339
00:23:40,570 --> 00:23:43,952
pypdf2라고 하는 그런 모듈을 갖고 와가지고
 

340
00:23:44,680 --> 00:23:48,930
PDF를 다운로드 받고 그거를 다시 불러와서
 

341
00:23:48,984 --> 00:23:51,046
몇 페이지입니까? 물어보고
 

342
00:23:51,070 --> 00:23:56,632
그 데이터를 추출을 해서 그거를 다시 우리가 제가
 

343
00:23:57,716 --> 00:24:00,436
list라던가 아니면 Pandas 데이터프레임에 저장을 시키고
 

344
00:24:00,460 --> 00:24:03,888
다시 닫는 거죠. 이런 방식으로 해서 데이터를 만들고 있었어요
 

345
00:24:04,840 --> 00:24:09,894
그런데 이 데이터 만들면서 시행착오가 있었는데
처음에는 PDF로 그냥 다 다운로드 받고 

346
00:24:10,371 --> 00:24:15,660
getNumPages라고 하는 명령을 써서 하다 보니까 갑자기
제가 노트북에서 하고 있었거든요 

347
00:24:16,270 --> 00:24:19,516
문제가 생기는 거예요. 갑자기 용량을 너무 많이 쓰는 거예요
 

348
00:24:19,540 --> 00:24:24,827
그래가지고 이런 작업을 할 때는 PDF를 다운로드
받은 다음에 삭제를 해가면서 해야 되겠습니다 

349
00:24:24,852 --> 00:24:26,773
왜냐면 의안이 7만 건이거든요
 

350
00:24:29,470 --> 00:24:33,876
근데 데이터를 이제 만들었으면 한번 시각화를 해야 될 거 아닙니까
 

351
00:24:34,300 --> 00:24:40,006
그래서 이 가로세로 축을 빈도하고 페이지 수로 해가지고
 

352
00:24:40,030 --> 00:24:42,676
이거를 이제 로그 스케일로 해가지고 그려봤습니다
 

353
00:24:42,700 --> 00:24:45,520
그런데 원래 좀 익숙하지 않은 분도 있을 텐데
 

354
00:24:45,545 --> 00:24:49,857
X축 Y축을 다 로그스케일로 그린 그림은 한 줄로 예쁘게 나와야 돼요
 

355
00:24:49,888 --> 00:24:53,769
이게 뭐 이렇게 휘었든 아니면 이렇게 직선으로 나오든
 

356
00:24:53,794 --> 00:24:56,544
그런데 그때 두 줄이 나오는 거예요
 

357
00:24:56,575 --> 00:25:01,403
그러면 이게 뭔 얘기냐면 4 페이지짜리 법률, 5 페이지짜리 법률,
 

358
00:25:01,428 --> 00:25:04,660
6 페이지짜리의 법률의 그 빈도수가 들쭉날쭉이라는 거예요
 

359
00:25:05,285 --> 00:25:11,495
도대체 왜 그러냐
원인은 페이지 수의 홀짝 비율이 달랐던 거예요 

360
00:25:11,863 --> 00:25:12,753
제가 엄청 고민을 했어요
 

361
00:25:12,778 --> 00:25:17,746
도대체 코드를 잘못 짰나 진짜 
한 이틀 밤을 고민을 했는데 

362
00:25:17,770 --> 00:25:20,745
허무하더라고요
간단한 코드입니다 

363
00:25:20,770 --> 00:25:24,106
그래서 ph라고 하는 건 국회 대수 입니다
 

364
00:25:24,130 --> 00:25:27,776
그러니까 19대 국회에서 페이지 수의 분포를 불러와요
 

365
00:25:28,135 --> 00:25:33,409
그 다음에 그것들을 이제 각 페이지 수로 2로 나눕니다
 

366
00:25:33,760 --> 00:25:38,385
% 그 연산을 보통 잘 안 쓰는데 
2로 나누면 나머지가 나온다는 얘기에요 

367
00:25:38,770 --> 00:25:42,480
그럼 나머지가 0이냐 1이냐를 본 거죠
그러니까 홀수냐 짝수냐 

368
00:25:42,801 --> 00:25:48,051
비율를 봤더니 2대부터 거의 한 보시면 14대 국회까지는
 

369
00:25:48,580 --> 00:25:52,150
거의 1입니다. 거의 모든 법률안이 다 짝수라는 거죠
 

370
00:25:53,050 --> 00:26:00,076
도대체 이게 무슨 일이냐 봤더니 
이거를 다시 시각화를 해야 되겠죠 

371
00:26:00,101 --> 00:26:05,836
아까의 그런 혼란한 시각화를 버리고. 14대 국회까지 따로 그리고
그거를 이제 초록색으로 그렸습니다 

372
00:26:05,860 --> 00:26:09,646
그다음에 15대 국회부터 20대 국회까지를 다시 파란색으로 따로 그렇습니다
 

373
00:26:09,670 --> 00:26:14,115
그러니까 15대 국회부터 20대 국회까지는 홀짝이 딱 맞아서
 

374
00:26:14,740 --> 00:26:17,911
예쁜 한 줄의 그림이 나옵니다 이게 제가 원했던 그림이에요
 

375
00:26:18,068 --> 00:26:22,486
코드를 한번 보겠습니다. 코드 설명을 드릴게요 코드가 좀 긴데요
 

376
00:26:22,510 --> 00:26:27,724
우선 그 데이터프레임에서 'th'라고 하는 건 아까 말씀드렸지만은 대수 입니다
 

377
00:26:27,771 --> 00:26:31,112
그래서 14대 초과. 부등호를 잘 보셔야 됩니다
 

378
00:26:31,137 --> 00:26:35,717
14대 초과면은 15대부터죠
15대부터 데이터를 불러와서 

379
00:26:36,100 --> 00:26:39,443
page라고 하는 걸 불러와서 value_counts를 합니다
 

380
00:26:39,468 --> 00:26:42,796
.page 라고 하는 거는 이 데이터프레임에
 

381
00:26:42,820 --> 00:26:49,015
18대 국회, 17대 국회, 16대 국회에 속하는
데이터들을 불러와서 다시 page 컬럼을 불러오는거고 

382
00:26:49,218 --> 00:26:53,000
그리고 page 컬럼을 불러 오면 그게 Series가 되는거죠
Pandas Series가 되는데 

383
00:26:53,039 --> 00:26:58,591
Pandas Series를 value_counts 해가지고
이제 index로 정렬을 하는 거죠 

384
00:26:58,873 --> 00:27:02,663
그 다음에 index를 불러오고 값을 빈도로 불러오는 겁니다
 

385
00:27:03,070 --> 00:27:07,413
왜냐하면 우리가 산포도를 그리려면 X,Y축이
있어야 되잖아요. 이렇게. 아 이렇게 해야 되는군요 

386
00:27:07,720 --> 00:27:12,704
그러면 이제 X축하고 Y축으로 불러 와서 각각 데이터를
입력을 해줘야지 우리가 산포도를 그릴 수도 있는데 

387
00:27:13,180 --> 00:27:16,842
X축은 이제 index가 되는 거고 Y축은 빈도가 되는 겁니다
 

388
00:27:16,867 --> 00:27:21,124
따라서 이렇게 두 번 불러오는 거죠
index를 불러오고 값 자체를 불러오는 거죠 

389
00:27:21,580 --> 00:27:28,486
이렇게 해가지고 산포도를 그려주고 
두 번째로 이제 ax.plot 두 번째 그 코도를 보시면은 

390
00:27:28,595 --> 00:27:32,085
14대까지 1대 부터 14대까지 불러와가지고
 

391
00:27:32,110 --> 00:27:35,336
이제 index를 불러오고 빈도를 불러온 다음에
 

392
00:27:35,361 --> 00:27:37,977
X, Y로 해가지고 산포도를 그려주는 겁니다
 

393
00:27:38,440 --> 00:27:42,158
나머지는 이제 뭐 label 설정해주고
 

394
00:27:42,183 --> 00:27:44,690
scale을 이제 log scale로 해주고 이런 것들이죠
 

395
00:27:45,040 --> 00:27:50,110
이제 이유가 궁금하죠 
이유가 뭐냐고 제가 그 고민을 많이 해봤는데 

396
00:27:50,912 --> 00:27:52,741
오래 일하신 분한테 물어봤어요
 

397
00:27:52,766 --> 00:27:57,460
국회에 한20년 넘게 일하신 이런 분한테 
물어보니까 이렇게 얘기하시더라고요 

398
00:27:58,750 --> 00:28:01,066
의안은 법률안은 항상 양면으로 복사를 합니다
 

399
00:28:01,090 --> 00:28:03,769
종이를 아끼려고 그러는 것 같다
아니면 넘겨보기 편하니까 

400
00:28:04,120 --> 00:28:07,479
과거에 이제 타자기로 의안을 작성을 해서 양면인쇄를 했는데
 

401
00:28:07,838 --> 00:28:13,759
홀수면에서 끝나면 제일 마지막 짝수 페이지에 
'공백'을 도장으로 꽝 찍어버린대요 옆에 보시는 것처럼 

402
00:28:14,770 --> 00:28:19,855
그러면 이거를 이제 전자화가 안 된 상태로 우리가 보관을 하다가
 

403
00:28:20,418 --> 00:28:24,435
국회가 이제 2000년 넘어가면서 데이터들을 다 전자화를 했어요
 

404
00:28:24,460 --> 00:28:27,537
스캐너로 읽는데 공백이 있는 페이지를 안 읽을 수 없잖아요
 

405
00:28:27,850 --> 00:28:31,357
읽다 보니까 PDF 파일들이 다 짝수가 다 되어 버렸다는 겁니다
 

406
00:28:32,140 --> 00:28:36,530
재밌는 게 1995년에 아래아 한글 3.0이 출시가 됐죠
 

407
00:28:37,360 --> 00:28:39,422
15대 국회 96년도에 시작을 해요
 

408
00:28:39,719 --> 00:28:43,695
그랬더니 마법같이 15대 국회부터 홀짝이 일대일로 정상화되는 겁니다
 

409
00:28:45,280 --> 00:28:51,051
그래서 이 입법이라고 하는 게 우리가 보통은 뭐 정치학 하시는 분들은
 

410
00:28:51,076 --> 00:28:56,832
정치적인 요인들 뭐 정당 뭐 지역구 뭐 이해관계 뭐 이런 걸로 설명을 하고
 

411
00:28:56,857 --> 00:28:58,666
뭐 제도로도 설명을 하고 하는데
 

412
00:28:58,690 --> 00:29:02,330
아주 기술적인 아주 그 기계적인 이런 것들도
 

413
00:29:02,355 --> 00:29:05,416
우리 입법에 영향을 미친다 라고 볼 수 있는 사례인 거죠
 

414
00:29:05,890 --> 00:29:08,460
보시면 이제 법안 문서 작성이 용이해진게
 

415
00:29:08,485 --> 00:29:11,132
법안 발의 증가를 설명할 수 있는 하나의 가설이 아니냐
 

416
00:29:11,397 --> 00:29:13,429
라고 제가 감히 얘기를 한번 해볼게요
 

417
00:29:13,741 --> 00:29:19,514
참고로 전통적인 설명을 보면 뭐 공천제도 때문에
그렇다 아니면 뭐 법안 발의 요건을 완화해서 그렇다 

418
00:29:19,561 --> 00:29:23,740
시민단체들이 이제 법안을 건수로 평가를 하니까 많이 발의를 하게 됐다
 

419
00:29:23,980 --> 00:29:25,698
뭐 이런 것들이 얘기가 되고 있었죠
 

420
00:29:26,350 --> 00:29:27,685
다음으로 넘어가겠습니다
 

421
00:29:29,200 --> 00:29:30,746
법률안 유사도 검사입니다
 

422
00:29:34,660 --> 00:29:39,676
사실 법률안에 대해서 복사해서 붙여넣기 입법이라고 그래가지고
 

423
00:29:39,700 --> 00:29:43,426
유사법률안을 반복 발의하는 경향이 있다 라고 하는 그런 주장이 있었습니다
 

424
00:29:44,470 --> 00:29:47,868
관련해서 한경 뉴스래빗이라고 제가 즐겨보는
 

425
00:29:47,893 --> 00:29:50,921
그 데이터 저널리즘의 분석이 이미 있었습니다
 

426
00:29:51,093 --> 00:29:54,569
20대 국회에서 발의된 법안들을 쭉 긁어 와가지고
 

427
00:29:55,060 --> 00:30:00,736
제안이유, 주요내용을 서로 비슷한 것들. 유사도 검사를 한 거죠
 

428
00:30:00,760 --> 00:30:03,728
그때는 R을 이용한 것 같아요
코드가 공개되어 있지는 않지만 

429
00:30:04,180 --> 00:30:06,855
그런데 저는 이제 그걸 이제 파이썬으로
 

430
00:30:06,880 --> 00:30:10,414
전체 국회에 대해서 왜냐하면 저희는 전체 데이터가 있으니까
 

431
00:30:10,439 --> 00:30:13,812
1대 부터 20대 국회까지 모두 다 해보는 겁니다
 

432
00:30:13,821 --> 00:30:23,148
그래서 scikit-learn의 TfidfVectorizer
모듈을 이용해가지고 할려고 합니다 

433
00:30:23,187 --> 00:30:27,327
데이터는 data.go.kr에서 오픈 API로 다운로드 받을 수 있습니다
 

434
00:30:28,084 --> 00:30:32,936
그래서 API에서 제공해주는 내용 중에
주요내용, summary 라고 하는 그런 컬럼이 있거든요 

435
00:30:32,961 --> 00:30:36,233
그 다음에 billName 의안명이라고 하는 컬럼
이 두가지만 있으면 할 수 있습니다 

436
00:30:36,498 --> 00:30:37,615
시작하겠습니다
 

437
00:30:39,662 --> 00:30:43,201
먼저 설명을 해야되는데 그럼 유사도라는 게 뭐냐
 

438
00:30:43,226 --> 00:30:48,247
또 유사도 행렬이라는 게 뭐냐 라는 걸
 아주 간략하게 아주 정확하지 않게 설명하겠습니다 

439
00:30:49,210 --> 00:30:53,436
cosine 유사도는 이제 어떤 두 문서가 있으면
 

440
00:30:53,461 --> 00:30:57,428
우리가 텍스트 문서라고 하는 건 사실은 뭐 여러가지 관점이 있습니다마는
 

441
00:30:57,760 --> 00:31:02,416
단어들의 주머니 Bag of Words라고
이렇게 생각을 할 수가 있습니다 

442
00:31:03,220 --> 00:31:08,337
두 문서들을 단어들로 구성된 벡터로 만들고 일치하는 단어가 얼마나 되는지
 

443
00:31:08,579 --> 00:31:12,625
즉 벡터의 방향이 얼마나 비슷한지를 계산한다 이렇게 표현을 할 수가 있어요
 

444
00:31:13,000 --> 00:31:17,906
예를 들면 '나는 어제 밥을 먹었다' 라고 하는 그런 문장하고요
 

445
00:31:18,460 --> 00:31:23,206
'나는 그저께 밥을 안 먹었다' 라고 하는 문장이 있으면은
 

446
00:31:23,230 --> 00:31:28,714
'나는'하고 '어제'라고 하는.. 아 '어제'가 아니죠
 '밥을' 하고 겹치죠 

447
00:31:28,870 --> 00:31:31,471
이런 것들을 이제 벡터로 만들 수가 있다는 겁니다
 

448
00:31:32,290 --> 00:31:37,000
그래서 이 유사도 계산을 여러 문서에
대해서 반복을 한다음 행렬로 정리를 했습니다 

449
00:31:37,240 --> 00:31:40,802
오른쪽 그림을 보시면 문서 1부터 문서 4까지
 

450
00:31:41,140 --> 00:31:45,716
그 다음에 세로가 있고 가로,
행렬이 있는데 그러면은 이렇습니다 

451
00:31:45,741 --> 00:31:51,116
이 행렬은 문서 행에 있는 문서하고 열에 있는 문서가
 

452
00:31:51,141 --> 00:31:54,897
얼마나 비슷한 지를 이제 유사도 검사를 계산한 결과값입니다
 

453
00:31:55,600 --> 00:31:59,357
보시면 문서1하고 문서4는 매우 비슷하죠. 0.9가 나왔습니다
 

454
00:31:59,680 --> 00:32:04,306
그런데 대각, 1-1 또는 2-2 이런 부분을 보시면 다 1입니다
 

455
00:32:04,330 --> 00:32:07,297
왜냐하면 같은 문서에 대해서 유사도를 계산했기 때문이죠
 

456
00:32:07,322 --> 00:32:10,142
같은 문서를 유사도 계산하면 당연히 1이 나오겠죠
 

457
00:32:10,750 --> 00:32:13,125
그리고 대칭 행렬입니다
 

458
00:32:14,800 --> 00:32:17,831
2-1하고 1-2가 같죠 0.2, 0.2
 

459
00:32:18,001 --> 00:32:23,517
왜냐면 문서2-문서1의 유사도 하고 문서1-문서2 유사도는 같죠
 

460
00:32:23,798 --> 00:32:25,743
그래서 이런 행렬이 나옵니다
 

461
00:32:28,480 --> 00:32:31,837
그래서 18대 국회 법안에 대해서 코드를 예를 들어서 설명해볼게요
 

462
00:32:31,862 --> 00:32:34,291
18대 국회 법안은 약 만4천개가 있는데요
 

463
00:32:34,750 --> 00:32:39,500
아까 보셨다시피 df라고 하는 데이터프레임에서 18대만 선택을 할 수 있습니다
 

464
00:32:39,970 --> 00:32:43,227
각 법안의 제안이유간 유사도를 구해서 행렬로 만듭니다
 

465
00:32:43,630 --> 00:32:47,887
이 행렬은 문서의 개수가 행의 수가 되겠죠
 

466
00:32:48,250 --> 00:32:51,766
14000 곱하기 14000의 numpy array 입니다
 

467
00:32:51,790 --> 00:32:58,415
굉장히 크죠
그런데 사실은 원래 TF-IDF 분석을 할 때 형태소 분석을 합니다 

468
00:32:58,688 --> 00:33:04,477
보통 제가 잘은 모르지만은 예를 들면 우리가 추천 시스템 같은 거 만들 때
 

469
00:33:05,200 --> 00:33:08,385
비슷한 텍스트를 찾아가지고 붙여줘야 되는 경우가 있잖아요
 

470
00:33:08,410 --> 00:33:10,605
이 텍스트하고 비슷한 게 뭡니까 할 때
 

471
00:33:11,113 --> 00:33:13,597
토씨 하나 틀리지 않고 비슷한 걸로 하면은
 

472
00:33:14,027 --> 00:33:17,536
너무 그 제대로 된 결과가 안 나오겠죠
 

473
00:33:17,560 --> 00:33:21,436
그래서 형태소 그러니까 '은/는/이/가'를 빼주는 형태소 분석을 해주고
 

474
00:33:21,460 --> 00:33:24,646
뒤에 TF-IDF 분석을 하는 게 원래 상례인데
 

475
00:33:24,670 --> 00:33:27,166
저 같은 경우에는 일부러 형태소 분석을 안 했습니다
 

476
00:33:27,190 --> 00:33:32,666
왜냐면 저희가 파악하려고 하는건 토씨 하나까지
똑같은 문서를 탐색하려는 것이기 때문이죠 

477
00:33:32,950 --> 00:33:35,371
덕분에 코드가 많이 간단해졌습니다
 

478
00:33:35,710 --> 00:33:42,226
밑에 코드를 보시면은 tfidf_matrix를
.T를 해준거 이게 transpose 입니다 

479
00:33:42,251 --> 00:33:49,882
그러니까 행렬을 이렇게 바꾼 거죠 이거를 두 개를 곱해주고
그러면 이제 document_distances 라는게 나옵니다 

480
00:33:49,907 --> 00:33:54,024
이게 행렬연산에 관한거라가지고 자세히 설명드리가 좀 어렵네요
 

481
00:33:54,055 --> 00:33:57,592
그래서 adjm 이라고 하는 이런 행렬을 구하는 거죠
 

482
00:33:57,617 --> 00:34:05,038
이게 바로 document distances 그러니까 adjacency matrix라고 해서
인접행렬 네트워크 분석이라고 하는 인접행렬이 되겠습니다 

483
00:34:08,248 --> 00:34:14,236
이 유사도가 그럼 0부터 1까지 나오는데 분석을 간단하게 하려고
 

484
00:34:14,260 --> 00:34:15,586
이렇게 바꿨습니다
 

485
00:34:15,610 --> 00:34:19,306
우리가 사실은 그 로직스틱 회귀분석을 할 때도
 

486
00:34:19,330 --> 00:34:22,578
우리가 보통 머신러닝할 때 로직스틱 회귀분석을 하면
 

487
00:34:22,603 --> 00:34:26,485
threshold, 문턱을 두고 0.8 이상이면 1, 0.8이하이면 0
 

488
00:34:26,510 --> 00:34:29,925
이런 식으로 바꿔주는 식으로 우리가 보통 분류 문제를 풀죠
 

489
00:34:29,949 --> 00:34:33,549
그거랑 비슷하게 이제 유사도의 임의의 경계값을 두고
 

490
00:34:33,574 --> 00:34:35,917
그 이상은 1, 그 이하는 0을 할당을 해줍니다
 

491
00:34:36,370 --> 00:34:38,713
그 다음에 비슷한 문서군집으로
 

492
00:34:38,738 --> 00:34:42,945
1로 연결된 그런 네트워크는 컴포넌트
네트워크 이론인데요 

493
00:34:42,969 --> 00:34:45,256
연결된 덩어리로 이제 파악을 해주는 거죠
 

494
00:34:45,280 --> 00:34:47,067
그래서 일정 기준 이상의 컴포넌트
 

495
00:34:47,092 --> 00:34:50,615
그러니까 컴포넌트가 뭐 10개 미만인 경우에는
 

496
00:34:50,640 --> 00:34:53,836
이제 뭐 그냥 별 의미가 없다 그래서 빼주고요
 

497
00:34:53,860 --> 00:34:58,750
20개 이상 그러니까 20개의 이상과 비슷한
문서 덩어리들을 이제 계속 파악을 해주는 겁니다 

498
00:34:59,469 --> 00:35:02,416
그렇게 다 그런 것들을 쭉 다 모아보는 그런 코드입니다
 

499
00:35:02,440 --> 00:35:04,373
networkx, nx로 불러왔어요
 

500
00:35:04,398 --> 00:35:07,585
NetworkX 라고 하는 그런 모듈을 썼습니다
 

501
00:35:10,000 --> 00:35:11,062
분석 결과는 이렇습니다
 

502
00:35:11,087 --> 00:35:15,242
그런 컴포넌트를 쭉 다 갖고 와가지고 더해주면은
 

503
00:35:15,375 --> 00:35:19,804
예를 들어 유사도 기준별 비슷한 의안의 총수가 나오겠죠
 

504
00:35:20,080 --> 00:35:24,447
그러면 0.85기준, 0.90기준, 0.95기준으로 이렇게 쭉 해보니까
 

505
00:35:25,650 --> 00:35:30,854
18대 국회 이후부터 굉장히 유사한 법안들이
많이 늘어나기 시작했다는 것을 알 수가 있었습니다 

506
00:35:31,180 --> 00:35:35,195
그래서 0.85 기준으로 했을 때 약 15% 정도가
 

507
00:35:35,220 --> 00:35:37,586
다른 법률안과 내용이 거의 동일한
 

508
00:35:37,610 --> 00:35:40,773
복사해서 붙여넣기 입법, 복붙 입법이라고 볼 수가 있겠습니다
 

509
00:35:41,680 --> 00:35:45,422
가장 아주 보수적으로
 

510
00:35:47,620 --> 00:35:51,936
오검사가 안 나오게 0.95로 기준을 높여가지고 우리가 해보니까
 

511
00:35:52,210 --> 00:35:58,186
그래도 한 5%에서 9%대 의안은 좀 복사해서
붙여넣기 했다. 라고 볼 수가 있겠습니다 

512
00:35:58,867 --> 00:36:04,461
의정활동 내용이 뭐 명예훼손은 아닙니다만
어쨌든 이름이 노출되면 조금 안 될 거 같아 가지고 

513
00:36:04,486 --> 00:36:06,274
좀 죄송하지만 이름을 가렸습니다
 

514
00:36:06,940 --> 00:36:08,299
궁금하신 분도 있을 텐데요
 

515
00:36:09,865 --> 00:36:13,529
이름을 보면은 아마 뭐 짐작가시는 분들도 있을 겁니다
 

516
00:36:13,560 --> 00:36:18,536
그래서 시기별로 중복법안을 발의한 사람의 상위 10명이 누구냐를 봤어요
 

517
00:36:19,480 --> 00:36:22,995
정부가 상위에 속하는 경우는 뭐 흔한 경우입니다
 

518
00:36:23,020 --> 00:36:27,285
왜냐하면 정부는 비슷한 법률을 비슷한 주제
 

519
00:36:27,310 --> 00:36:29,776
예를 들어 알기 쉬운 법령 만들기 같은 사업들이 있거든요
 

520
00:36:29,800 --> 00:36:32,416
법령 정비사업을 하기 때문에 법제처에서
 

521
00:36:32,440 --> 00:36:37,213
그런 것들은 항상 이제 149개 297개 이런
식으로 비슷한 법안이 나올 수밖에 없습니다 

522
00:36:37,840 --> 00:36:42,199
보시면 17대 국회하고 18대 국회가 분기점이었다 라고 볼 수가 있겠죠
 

523
00:36:44,140 --> 00:36:45,436
유형들을 이제 추출했습니다
 

524
00:36:45,460 --> 00:36:48,405
그럼 왜 이런, 어떤 법률이 비슷한 법률로 나오느냐
 

525
00:36:49,270 --> 00:36:55,770
이게 가장 데이터 저널리즘 아까 보셨던
그 기사에서 비판했던 그런 내용입니다 

526
00:36:56,512 --> 00:36:59,215
각 공공기관에 대해서 유리천장위원회를 만들어요
 

527
00:36:59,920 --> 00:37:04,809
여성의 경제참여를 증대시키고 여성 임원들이 부족하다는 거예요
 

528
00:37:04,834 --> 00:37:09,238
취지는 굉장히 좋죠. 여성의 어떤 고위직 진출을 돕기 위해서
 

529
00:37:09,263 --> 00:37:13,206
유리천장위원회를 만들어서 좀 이렇게 성평등과
 

530
00:37:13,231 --> 00:37:16,966
그 다음에 성 주류화 같은 걸 해보자 라고 하는 취지는 좋은데
 

531
00:37:16,990 --> 00:37:19,935
문제는 똑같은 법안을 227개 발의한 것입니다
 

532
00:37:20,920 --> 00:37:23,560
각 공공기관 설치법마다 다 한 줄씩 넣은 거예요
 

533
00:37:24,305 --> 00:37:28,133
사실은 한 개 법안을 해도 될 것 같아요 제 생각에는
 

534
00:37:28,234 --> 00:37:31,476
공공기관 운영에 관한 법률에 하나만 넣으면
 

535
00:37:31,671 --> 00:37:35,716
공공기관 운영법 적용받는 모든 공공기관 200몇 개에 다 적용이 되거든요
 

536
00:37:35,740 --> 00:37:40,756
그런데 꼭 그렇다고 할 순 없겠지만
 

537
00:37:40,780 --> 00:37:45,098
아주 높은 개연성으로 이거는 한개 법안을 낼 수 있는 걸
 

538
00:37:45,123 --> 00:37:49,598
220배 부풀렸다. 성과 부풀리기 였다. 라고 좀 볼 수 있는 여지도 있습니다
 

539
00:37:49,623 --> 00:37:52,824
꼭 그렇다는 건 아니에요. 따로 넣어야 될 실익도 있을 수 있어요
 

540
00:37:52,849 --> 00:37:56,208
왜냐하면 공공기관법에서 공공기관이 계속 변하거든요
 

541
00:37:56,410 --> 00:37:59,238
그런 것들을 이제 할 수도 있겠습니다
 

542
00:38:01,180 --> 00:38:04,297
다음에 어려운 단어를 한개 고치는 그런 법안들도 있습니다
 

543
00:38:05,223 --> 00:38:11,848
"일본식 한자어 표현인 땡땡땡땡을 보다 알기 쉬운 표현인 
땡땡땡으로 개정하려는 것임" 

544
00:38:12,430 --> 00:38:20,000
아니면은 우리가 뭐 근로라고 하는 단어가 안 좋으니까 
노동이라고 바꾸는 법안 

545
00:38:20,406 --> 00:38:23,116
이런 법안들이 많이 있었어요
 

546
00:38:23,140 --> 00:38:27,086
이런 법안들도 있습니다. 예를 들어 우리가 이제 기금이라는 것들이 있습니다
 

547
00:38:27,111 --> 00:38:32,656
예산을 집행할 때 예산을 편성할 때
딴 주머니를 차는 거죠 

548
00:38:32,680 --> 00:38:38,656
이제 우리가 정부 예산에 넣는 게 아니라
수입과 지출이 분리된 기금들을 만듭니다 

549
00:38:38,680 --> 00:38:43,534
그래서 이 기금들을 기금관리사업자들이 그 관리를 하거든요
 

550
00:38:43,559 --> 00:38:48,363
예를 들면은 뭐 고용보험기금 같은 경우
고용보험공단 이런 곳들이 기금사업자들이죠 

551
00:38:48,388 --> 00:38:54,480
그런데 이런 기금을 관리하는 사람들이 자본시장법상으로
지켜야 할 어떤 준수사항이 있어야 된다는거죠 

552
00:38:54,839 --> 00:38:57,526
그러니까 투자를 할 때 공공기금이니까
 

553
00:38:57,550 --> 00:39:04,485
뭐 예를 들어서 손실 보전이나 이런 것들을 약속해서는 안 된다
 이런 것들을 뭐 규제할 수 있어요 할 수는 있는데 

554
00:39:04,510 --> 00:39:09,196
이것도 아까랑 비슷한 케이스죠 각 기금의 설치법 별로 76개 발의를 했어요
 

555
00:39:09,220 --> 00:39:13,441
그런데 기금에 대해서는 사실 국가재정법에서 규율을 합니다
 

556
00:39:13,441 --> 00:39:16,059
그러니까 76번 발의를 할 게 아니라
 

557
00:39:16,084 --> 00:39:19,681
국가재정법을 한 번 고치면 되는 게 아니었냐 라는 생각이 있는 거죠
 

558
00:39:19,706 --> 00:39:24,076
이 경우에도 법안 발의한 성과를 76배 부풀린 게 아니냐
 

559
00:39:24,100 --> 00:39:31,576
뭐 꼭 그렇다고 확정할 수는 없지만 그런 의혹이 있는 거죠
 

560
00:39:31,600 --> 00:39:33,916
이거는 약간 좀 애매한 경우입니다
 

561
00:39:33,940 --> 00:39:36,982
어 우리 법률에 사실은 양벌규정 이라는 게 있어요
 

562
00:39:37,310 --> 00:39:42,770
그래서 예를 들어서 어떤 회사가 있어요
그 회사에 종업원이 있어요 

563
00:39:42,971 --> 00:39:46,441
종업원이 뭔가를 잘못을 해서 형사처벌을 받게 되면
 

564
00:39:47,770 --> 00:39:50,144
그 대표자가 같이 처벌을 받는 경우가 있어요
 

565
00:39:50,144 --> 00:39:51,045
법률에 따라서
 

566
00:39:51,970 --> 00:39:54,048
그런데 이제 18대 국회 때 어떤 얘기가 나오냐면
 

567
00:39:54,048 --> 00:39:58,726
그게 너무 억울하다 
내가 잘못한 것도 아닌데 왜 사장들이나 

568
00:39:58,750 --> 00:40:00,588
그 대표자들이 처벌을 받아야 되느냐
 

569
00:40:00,588 --> 00:40:06,461
그래서 관리감독을 철저히 했으면 그런 책임주의
 

570
00:40:06,461 --> 00:40:10,999
그러니까 책임을 면할 수 있다 라고 하는 조항들을
모든 법률에 다 넣어준 겁니다 

571
00:40:11,500 --> 00:40:15,256
그런데 이게 665번이나 똑같은 법률이 발의가 됐어요
 

572
00:40:15,280 --> 00:40:20,708
예 법률의 복잡성이 굉장히 높아지는 그런 경우인 거죠
 

573
00:40:20,708 --> 00:40:23,645
조금 아쉬운 점이. 이거는 사실은 변명의 여지는 있어요
 

574
00:40:23,645 --> 00:40:28,650
애초에 너무 많은 법률들이 양벌규정이 들어가 있었던 거죠
 

575
00:40:28,650 --> 00:40:32,086
불가피한 측면도 있지 않았냐 생각합니다
 

576
00:40:33,040 --> 00:40:36,758
그래서 결론은 유사법률안이라고 다 나쁜 건 아니다
 

577
00:40:36,758 --> 00:40:42,263
다 유사법률이라는 건 다 이유가 있는 경우도 있고
또 개선이 가능한 것도 있고 

578
00:40:42,263 --> 00:40:47,302
그래서 우리가 할 일은 그 유사법률이 많다라고 
그냥 비판을 하고 끝낼 게 아니라 

579
00:40:47,302 --> 00:40:52,936
왜 생겼느냐? 어떤 내용을 갖고 있느냐?
우리가 어떻게 그거를 고칠 수 있을 것이냐? 

580
00:40:52,960 --> 00:40:55,336
이런 것들을 논하는 게 더 생산적이라고 생각합니다
 

581
00:40:55,360 --> 00:41:00,466
하지만 그런데 그런 논의를 하는 데
있어서 파이썬이 아주 좋은 도구다 라는 거죠 

582
00:41:00,490 --> 00:41:03,076
그런데 이런 질문들을 제가 탐구를 한 겁니다
 

583
00:41:03,100 --> 00:41:05,116
한국법체계는 어떻게 시작되었습니까?
 

584
00:41:05,140 --> 00:41:07,455
입법례는 본받아야 되는 모범입니까?
 

585
00:41:07,455 --> 00:41:12,760
입법례를 끝까지 거슬러 올라가면 무엇이 나옵니까?
바로 조선총독부령이 나오는 경우가 많다 라는 거죠 

586
00:41:12,827 --> 00:41:16,097
징벌적 손해배상. 정말로 한국법에 생소한 이물질입니까?
 

587
00:41:16,097 --> 00:41:16,798
아니다
 

588
00:41:16,798 --> 00:41:19,846
1949년에 이미 받아들인 적이 있다
 

589
00:41:19,870 --> 00:41:25,156
미국법이라는 게 우리가 생각하는 것처럼
한국법이 대륙법인 것만은 아니다 라는 거죠 

590
00:41:25,180 --> 00:41:28,843
그 다음 입법도 문서 작성이니까 문서 기술의 영향을 받지 않을까?
 

591
00:41:28,843 --> 00:41:32,506
받는다 라는 거죠 워드프로세서가 도입되니까 바뀌었다
 

592
00:41:32,530 --> 00:41:37,251
아니면 유사법률안 발의에 문제가 있는데
내용이 뭐냐? 우리가 내용을 앞에서 봤습니다 

593
00:41:39,610 --> 00:41:41,089
그래서 결론입니다
 

594
00:41:41,890 --> 00:41:45,496
법률하고 입법분야에서도 파이썬은 유용합니다
 

595
00:41:45,520 --> 00:41:49,330
입법과 법률은 사실은 데이터 도구 활용이 상당히 지체된 분야죠
 

596
00:41:49,330 --> 00:41:54,826
특히 파이썬은 텍스트를 다루는 데 있어서 아주 뛰어납니다
 

597
00:41:54,850 --> 00:41:57,972
그래서 그 법률안 입법은 다 텍스트로 되어 있죠
 

598
00:41:57,972 --> 00:42:00,908
그래서 파이썬을 쓰시기를 저는 권장을 드립니다
 

599
00:42:01,009 --> 00:42:03,544
파이썬으로 법률을 직접 파보자라는 거죠
 

600
00:42:03,878 --> 00:42:05,847
아까 보셨다시피 코드가 어렵지 않아요
 

601
00:42:05,847 --> 00:42:10,018
텍스트 함수만으로 텍스트 더미에서 유물을 발굴할 수 있습니다
 

602
00:42:10,690 --> 00:42:12,920
그래서 제가 이런 것들을 다 할 수 있는 것은
 

603
00:42:12,920 --> 00:42:16,491
작년 재작년 발표 때도 말씀드렸지만 다 누구한테 배운 거예요
 

604
00:42:16,491 --> 00:42:19,927
파이썬 커뮤니티에서 배운 거라서 
마지막 결론은 이겁니다 

605
00:42:19,927 --> 00:42:21,596
감사합니다 파이썬 커뮤니티
 

606
00:42:22,363 --> 00:42:28,403
여러분도 지금 이렇게 코로나도 있고 
이렇게 파이콘도 못하는 상황이 돼 버렸잖아요 

607
00:42:28,403 --> 00:42:30,605
하지만 파이썬 커뮤니티가 있으니까
 

608
00:42:30,605 --> 00:42:36,577
이 기회에 파이썬 더 열심히 배우시고 
저같이 이렇게 도움을 많이 얻기를 기대합니다 

609
00:42:36,577 --> 00:42:38,780
감사합니다. 들어주셔서 감사합니다


