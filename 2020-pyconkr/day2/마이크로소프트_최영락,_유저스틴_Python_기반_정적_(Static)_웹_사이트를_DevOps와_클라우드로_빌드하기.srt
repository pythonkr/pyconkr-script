1
00:00:11,029 --> 00:00:13,510
안녕하세요 세션을 시작하겠습니다.

2
00:00:13,510 --> 00:00:17,980
저희는 "파이썬 기반 정적 웹 사이트를
devops와 클라우드로 빌드하기"

3
00:00:17,980 --> 00:00:22,860
라는 제목으로 발표를
하게 된 최영락 그리고 유저스틴 입니다.

4
00:00:22,980 --> 00:00:25,200
먼저 제 소개를 간단하게 하자면

5
00:00:25,200 --> 00:00:27,280
저는 마이크로소프트에서

6
00:00:27,280 --> 00:00:29,780
개발자 커뮤니티 및 기업 생태계를 위한

7
00:00:29,780 --> 00:00:31,320
제품 마케팅을 하고 있고요

8
00:00:31,320 --> 00:00:33,820
국내 뿐만 아니라 인접한 싱가폴

9
00:00:33,820 --> 00:00:37,960
말레이시아 뉴질랜드 베트남 등을
담당하는 팀원과 함께

10
00:00:37,960 --> 00:00:40,640
개발자 여러분들의 경험을 더 확장
할 수 있도록

11
00:00:40,640 --> 00:00:42,220
돕는 역할을 하고 있습니다.

12
00:00:43,340 --> 00:00:46,140
네 안녕하세요 저는 저스틴이고요.

13
00:00:46,140 --> 00:00:47,899
마이크로소프트의 devrel 팀에서

14
00:00:47,899 --> 00:00:50,429
senior cloud advocate로 일하고 있습니다

15
00:00:50,429 --> 00:00:53,440
저 역시 한국을 포함한 apac 지역에서

16
00:00:53,440 --> 00:00:57,100
개발자 커뮤니티를 도와서 좋은 컨텐츠를 
공유하는데

17
00:00:57,100 --> 00:00:58,520
돕는 일을 하고 있습니다.

18
00:00:58,600 --> 00:01:00,680
오늘 아젠다는 다음과 같습니다.

19
00:01:00,690 --> 00:01:03,420
먼저 jam stack에 대한 부분을

20
00:01:03,420 --> 00:01:06,289
그리고 정적 웹 사이트에 대한 부분을
저스틴께서 설명 후에

21
00:01:06,289 --> 00:01:08,379
그 다음에 제가 데모와 함께

22
00:01:08,379 --> 00:01:10,479
실제로 파이썬 라이브러리부터 해가지고

23
00:01:10,479 --> 00:01:12,220
어떻게 구축을 클라우드와

24
00:01:12,220 --> 00:01:15,090
devops로 가능한지를 보여드리고자
하고요

25
00:01:15,090 --> 00:01:16,820
마지막으로 다시 저스틴께서

26
00:01:16,820 --> 00:01:18,191
정적 웹 사이트 활용 가치

27
00:01:18,191 --> 00:01:20,590
에 대해서 이야기를 하실 예정입니다.

28
00:01:20,590 --> 00:01:23,360
그럼 먼저 저스틴께서 jam 스택과

29
00:01:23,360 --> 00:01:25,640
정적 웹 사이트에 대해서 설명해
주시겠습니다.

30
00:01:25,640 --> 00:01:27,800
네 감사합니다.

31
00:01:27,810 --> 00:01:29,020
본론에 들어가기에 앞서서

32
00:01:29,020 --> 00:01:30,969
먼저 빌드업을 좀 해 보겠습니다.

33
00:01:30,969 --> 00:01:32,799
그 정적 웹 사이트에 대한 얘기

34
00:01:32,799 --> 00:01:35,039
그리고 jam 스택에 대한 얘기

35
00:01:35,039 --> 00:01:37,549
이것들로 먼저 시작을 하고 싶은데요.

36
00:01:37,549 --> 00:01:41,329
어 먼저 이 4개의 프론트엔드 개발

37
00:01:41,329 --> 00:01:43,320
프레임워크에 대해서 먼저 얘기
해 보겠습니다.

38
00:01:43,320 --> 00:01:49,000
앵귤러 리액터 스벨트 뷰 등으로
대표되는 그 프론트엔드 애플리케이션

39
00:01:49,010 --> 00:01:50,259
개발을 위한

40
00:01:50,259 --> 00:01:52,399
자바스크립트 프레임워크가 있죠.

41
00:01:52,399 --> 00:01:57,259
이게 굉장히 유명합니다. 
그 전에도 프론트엔드

42
00:01:57,259 --> 00:01:59,939
애플리케이션 개발을 위한 자바스크립트
라이브러리라든가

43
00:01:59,939 --> 00:02:01,510
프레임워크도 굉장히 많았어요.

44
00:02:01,510 --> 00:02:05,120
근데 이제 요즘에는 이 4개 정도로
압축되는 상황인 것처럼

45
00:02:05,120 --> 00:02:09,460
보이는데 이런 자바스크립트
프레임워크에

46
00:02:09,469 --> 00:02:11,549
그 등장배경을 놓고 보자면

47
00:02:11,549 --> 00:02:13,080
어떤 풍부한 사용자 경험을

48
00:02:13,260 --> 00:02:16,760
구현하기 적합하다는 데
있습니다.

49
00:02:16,760 --> 00:02:21,260
기존에 그 파이썬 기반의 웹 프레임워크인 
장고 라든가

50
00:02:21,260 --> 00:02:24,540
플라스크를 한 번 생각해 보면 
좋을 것 같아요.

51
00:02:24,540 --> 00:02:27,300
장고라든가 플라스크로 웹 개발을
할 때

52
00:02:27,300 --> 00:02:30,470
개발 경험과 그리고 사용자 경험을
한 번 생각해 보시죠.

53
00:02:30,470 --> 00:02:33,580
주로 동적인 웹 사이트를 만들게
되는데 여기서

54
00:02:33,600 --> 00:02:37,680
이제 동적인 웹 사이트 라고 하는 거는 
어떤 웹 개발 프레임워크가

55
00:02:37,680 --> 00:02:39,120
라우팅이라든가

56
00:02:39,129 --> 00:02:42,080
데이터라든가 이런 것들을 모두
관장 한다는 거죠.

57
00:02:42,080 --> 00:02:46,340
이런 경우에는 주로 서버사이드에 
모든 기능을 담아두고

58
00:02:46,340 --> 00:02:49,680
클라이언트 사이드 는 서버사이드에서 
렌더링을 해 주는

59
00:02:49,680 --> 00:02:53,480
서버 사이드에서 렌더링을 해 주는
html 결과만 보여주는

60
00:02:53,480 --> 00:02:55,400
그런 구조였겠죠.

61
00:02:55,400 --> 00:02:57,299
근데 또한 이렇게 되다 보니까

62
00:02:57,300 --> 00:02:59,660
웹 프론트엔드 애플리케이션이

63
00:02:59,660 --> 00:03:03,500
백엔드 애플리케이션에 대해서 의존성을 
갖게 되는 거예요.

64
00:03:03,510 --> 00:03:05,870
그러다 보니까 다양한 백엔드 
서버들과

65
00:03:05,870 --> 00:03:07,400
커뮤니케이션 해야 되고

66
00:03:07,400 --> 00:03:09,909
이런 와중에 만약에 스케일링 
이라든가

67
00:03:09,909 --> 00:03:13,170
이런 것도 해야 된다면은 예를 들어서

68
00:03:13,170 --> 00:03:15,870
분산처리 환경이라든가 이런 것들을 
구현하기가 굉장히

69
00:03:15,870 --> 00:03:17,660
까다로워졌겠죠.

70
00:03:17,660 --> 00:03:21,659
그런데 앞서 언급해 드렸던 프론트엔드

71
00:03:21,659 --> 00:03:24,550
개발 프레임워크를 사용하게 되면
점점 백엔드

72
00:03:24,550 --> 00:03:25,680
애플리케이션하고 점점

73
00:03:25,680 --> 00:03:28,519
디커플링을 이루게 되는 그런 상황이
됩니다.

74
00:03:28,519 --> 00:03:30,750
그러면서 이제는 반대로

75
00:03:30,750 --> 00:03:35,140
서버쪽에서 다루는 거는 데이터
정도만 되고

76
00:03:35,140 --> 00:03:37,560
나머지는 다 클라이언트 쪽에서

77
00:03:37,760 --> 00:03:41,260
즉 웹 브라우저로 기능이 다 옮겨오게
됐어요.

78
00:03:41,260 --> 00:03:45,040
아마 그 실제로 프론트엔드 애플리케이션
개발을 하다 보면

79
00:03:45,049 --> 00:03:47,400
흔히 보는 npm 명령어가 이런 게
있습니다

80
00:03:47,400 --> 00:03:50,780
npm run build를 하게 되면은 빌드를
해서

81
00:03:50,780 --> 00:03:54,370
애플리케이션 딱 빌드를 하면은
딱 떨어지는 게 html 파일

82
00:03:54,370 --> 00:03:56,420
자바스크립트 파일 그리고 css 파일

83
00:03:56,420 --> 00:04:02,180
3가지가 되는데 즉 이 3가지가 사실은
웹 페이지를 구성하는

84
00:04:02,180 --> 00:04:04,769
가장 근본적인 파일들이면서

85
00:04:04,769 --> 00:04:08,800
현재 웹 프론트엔드 개발 프레임워크는

86
00:04:08,860 --> 00:04:12,120
요 3가지 컴포넌트에 
집중을 하게 됩니다

87
00:04:12,120 --> 00:04:13,120
그리고 이게 다

88
00:04:13,120 --> 00:04:15,430
정적으로 딱 떨어지는 파일들이다 
보니까

89
00:04:15,430 --> 00:04:16,930
이렇게 빌드 정적으로

90
00:04:16,930 --> 00:04:19,659
빌드가 된 파일들은 
깃허브 페이지라든가

91
00:04:19,659 --> 00:04:21,500
이런 정적 웹 사이트 호스팅 도구를

92
00:04:21,500 --> 00:04:24,890
통해서 서비스를 할 수가 있게 되겠죠.

93
00:04:24,890 --> 00:04:27,180
뭐 현재는 깃허브 페이지 뿐만이
아니라

94
00:04:27,180 --> 00:04:28,620
다양한 형태로

95
00:04:28,620 --> 00:04:31,140
정적 웹 사이트를 호스팅 할 수가 
있게 됩니다.

96
00:04:31,150 --> 00:04:32,150
이제 저희가 좀 이따가

97
00:04:32,150 --> 00:04:35,060
다룰 내용도 다양한 깃허브 페이지가
아닌

98
00:04:35,060 --> 00:04:38,690
다양한 형태의 중에 하나가 될 거예요.

99
00:04:38,690 --> 00:04:43,960
기존에 서버사이드 기술에 대해서
의존성을 이제 줄인다고

100
00:04:43,960 --> 00:04:45,400
제가 말씀드렸잖아요

101
00:04:45,400 --> 00:04:48,770
즉 현재의 프론트엔드 웹 개발

102
00:04:48,770 --> 00:04:50,810
프레임워크는 클라이언트 사이드

103
00:04:50,810 --> 00:04:53,520
기술에 집중 하게끔 이제 이렇게
됐는데

104
00:04:53,520 --> 00:04:57,610
이렇게 웹 페이지를 이루는 근본적인
컴포넌트 만으로

105
00:04:57,610 --> 00:04:59,840
웹 애플리케이션을 구성하는 기술이 
있습니다.

106
00:04:59,840 --> 00:05:01,060
이런 기술 스택이 있는데

107
00:05:01,060 --> 00:05:02,710
이거를 jam 스택 이라고 해요

108
00:05:02,710 --> 00:05:06,970
사실 그 jam 스택은 새로운 기술은 
아니고

109
00:05:06,970 --> 00:05:08,370
지금 그림에서 보신 것처럼

110
00:05:08,370 --> 00:05:10,650
어디서 툭 튀어 나온 새로운 기술은 
아니고

111
00:05:10,650 --> 00:05:13,150
기존에 기술들을 클라이언트 사이드에

112
00:05:13,150 --> 00:05:17,770
맞게 정리한 기술의 집합체라고
보시면 됩니다. 즉 이 jam 스택을

113
00:05:17,770 --> 00:05:19,330
이용을 하게 되면은 
웹 브라우저단에서도

114
00:05:19,330 --> 00:05:22,000
충분히 애플리케이션이

115
00:05:22,000 --> 00:05:24,340
잘 작동할 수 있게 됩니다.

116
00:05:24,340 --> 00:05:27,300
그래서 혹시 그 지금까지 제가

117
00:05:27,300 --> 00:05:30,460
이렇게 jam 스택을 이용하면 이렇게
된다라고 말씀을 드렸는데

118
00:05:30,460 --> 00:05:32,660
이젠 jam 스택이 뭔지에 대해서

119
00:05:32,660 --> 00:05:35,860
궁금해 하실 분들이 계실 것 같아요.

120
00:05:35,860 --> 00:05:40,040
어떤 분들은 jam 이라는 단어에서
마치 그 재즈 밴드에 즉흥 연주 세션같은

121
00:05:40,040 --> 00:05:43,580
jam 세션을 떠올리는 분도
계실 거고

122
00:05:43,580 --> 00:05:47,990
어떤 사람들은 이제 저 같이 먹는거 
좋아하는 사람들은 이런 딸기잼이라든가

123
00:05:48,990 --> 00:05:49,990
무슨 잼이라든가

124
00:05:49,990 --> 00:05:51,569
이런 잼들이 잔뜩 쌓여 있는 말
그대로

125
00:05:51,569 --> 00:05:54,800
잼 스택을 떠올리는 분도 계실 거예요.

126
00:05:54,800 --> 00:05:57,060
근데 그런데 사실 jam 이라고 
하는 거는

127
00:05:57,060 --> 00:06:01,160
자바스크립트 api 그리고 마크업의 
약자로서

128
00:06:01,169 --> 00:06:02,449
클라이언트 사이드에서

129
00:06:02,449 --> 00:06:04,620
즉 웹 브라우저에서 돌아가는

130
00:06:04,620 --> 00:06:07,389
가벼운 애플리케이션을 만들기
위한 기술

131
00:06:07,389 --> 00:06:09,190
스택을 모아 놓은 겁니다.

132
00:06:09,190 --> 00:06:11,539
그리고 그러다 보니까

133
00:06:11,539 --> 00:06:13,699
백앤드 쪽과 통신하기 위해서는

134
00:06:13,699 --> 00:06:18,770
api 를 통해서 메시지를 주고 받는
그런 형태가 돼요.

135
00:06:18,770 --> 00:06:22,380
자 이런 jam 스택을 활용한 다양한
웹 애플리케이션

136
00:06:22,380 --> 00:06:27,290
빌드 도구들이 있습니다. 가장 유명한 게 
제킬같은 거죠.

137
00:06:27,290 --> 00:06:29,520
이런 걸 정적 웹 사이트 빌더라고
하는데

138
00:06:29,520 --> 00:06:33,630
제킬은 현재 깃허브 페이지에서
공식적으로 지원하는 도구고요

139
00:06:33,630 --> 00:06:34,830
가장 유명합니다.

140
00:06:34,830 --> 00:06:37,410
그리고 이제 일을

141
00:06:37,410 --> 00:06:41,590
이걸 시발점으로 해서 다른 제일
유명한 그 웹 사이트

142
00:06:41,590 --> 00:06:44,810
정적 웹 사이트 빌드 도구들이 많이
나왔어요.

143
00:06:44,810 --> 00:06:46,190
여기 지금 슬라이드에 보시는 것들은

144
00:06:46,190 --> 00:06:51,020
아마도 적어도 한 번쯤은 이름을
들어보셨을거예요.

145
00:06:51,020 --> 00:06:55,080
자 그러면 이제 앞서 언급했던 제가
언급했던 앵귤라 리액트

146
00:06:55,080 --> 00:06:58,000
스벨트 뷰 같은 대표적인 프론트엔드

147
00:06:58,000 --> 00:06:59,419
개발 프레임워크는 각자

148
00:06:59,419 --> 00:07:02,440
저마다의 정적 웹 사이트 빌더를
갖고 있습니다.

149
00:07:02,440 --> 00:07:06,110
앵귤로 스컬리 리액트는 gatsby 스
벨트는 sapper

150
00:07:06,110 --> 00:07:10,729
그리고 뷰는 vuepress 라는 이런 별도의
정적 웹 사이트

151
00:07:10,729 --> 00:07:12,889
빌드 도구를 따로 제공하는데요.

152
00:07:12,889 --> 00:07:15,520
그렇다면은 이제 제가 기본적인

153
00:07:15,520 --> 00:07:20,440
그 웹 프론트엔드 개발 프레임워크에 
대해서

154
00:07:20,440 --> 00:07:22,379
그리고 jam 스택에 대해서 말씀을
드렸는데

155
00:07:22,379 --> 00:07:24,240
자 그렇다면 이게 도대체

156
00:07:24,240 --> 00:07:26,610
파이썬이랑은 어떻게 연관이 될까

157
00:07:26,610 --> 00:07:30,590
파이썬에서는 도대체 어떤 일이
벌어질 수 있을까에 대해서 궁금하시겠죠

158
00:07:31,580 --> 00:07:35,900
자 이제 영락님을 통해서 한번 얘기를
한번 들어보시죠

159
00:07:35,900 --> 00:07:38,240
영락님 한 번 말씀해 주세요.

160
00:07:38,250 --> 00:07:41,480
그렇다면 이 정적 웹 사이트 빌드
를 위해서 아까

161
00:07:41,490 --> 00:07:43,910
저스틴께서 방금 말씀하셨듯이
이 파이썬

162
00:07:43,910 --> 00:07:47,550
라이브러리가 어떤 것이 있는지부터 
한번 살펴보겠습니다.

163
00:07:47,550 --> 00:07:50,330
그전에 제가 한번 질문을 해 
보겠습니다.

164
00:07:50,330 --> 00:07:52,560
여기에 지금 세 개의 웹사이트가
있습니다

165
00:07:52,560 --> 00:07:54,810
뭐 답이 사실 다 나와 있긴 한데

166
00:07:54,810 --> 00:07:56,840
첫 번째 사이트는 파이콘

167
00:07:56,840 --> 00:07:59,229
2011에 대한 콜롬비아 홈페이지구요.

168
00:07:59,229 --> 00:08:01,199
두 번째는 오픈스택 문서라고 해서

169
00:08:01,199 --> 00:08:04,060
설치 가이드가 상세히 나와 있는
페이지이고요

170
00:08:04,060 --> 00:08:06,210
세 번째는 개인 블로그 페이지입니다.

171
00:08:06,210 --> 00:08:09,580
요 다음 페이지들은 혹시 어떻게
만들어졌을까요

172
00:08:09,580 --> 00:08:12,190
뭐 답을 다 아실 수 있겠지만요

173
00:08:12,190 --> 00:08:15,349
파이썬 기반으로 어떤 라이브러리를 
써서 만든 겁니다.

174
00:08:15,349 --> 00:08:18,000
어떤 라이브러리를 써서 만들었냐면요

175
00:08:18,000 --> 00:08:20,169
첫 번째 같은 경우는 렉터lektor 라고
하는 파이썬

176
00:08:20,169 --> 00:08:24,460
라이브러리에서 pip install lektor 라는
걸 통해서 설치 해 가지고서

177
00:08:24,460 --> 00:08:27,280
static 정적 웹 사이트를 빌드하실
수가 있고요

178
00:08:27,280 --> 00:08:28,780
두 번째 가운데 있는 오픈스택

179
00:08:28,780 --> 00:08:32,129
문서는 이제 스핑크스sphinx 라고
하는 어떤 라이브러리를 사용 해

180
00:08:32,129 --> 00:08:33,129
가지고서

181
00:08:33,129 --> 00:08:35,669
빌드에서 역시 html latex에 기반한

182
00:08:35,669 --> 00:08:37,789
pdf 등을 만드실 수가 있구요.

183
00:08:37,789 --> 00:08:41,320
세 번째는 펠리칸 pelican 하는 역시
라이브러리가 있고요.

184
00:08:41,320 --> 00:08:42,820
이 라이브러리를 써가지고서

185
00:08:42,820 --> 00:08:45,680
개인 블로그 페이지를 또 만드실 수가
있습니다.

186
00:08:45,690 --> 00:08:47,040
자 그렇다면 이 각각에 대해서

187
00:08:47,040 --> 00:08:49,610
조금 더 자세하게 살펴보도록 하겠습니다.

188
00:08:49,610 --> 00:08:53,850
먼저 파이콘 콜롬비아 홈페이지
를 살펴보게 되면요.

189
00:08:53,850 --> 00:08:56,970
이쪽 같은 경우는 파이썬 3를 기반으로
해 가지고서

190
00:08:56,970 --> 00:08:59,700
제가 한 번 쭉 살펴보았는데요.

191
00:08:59,700 --> 00:09:03,270
지금 보시면은 그 virtualenv

192
00:09:03,270 --> 00:09:07,440
pyconco라고 해서 콜롬비아는 
virtual env를 만들어 가지고 pip로

193
00:09:07,560 --> 00:09:09,440
이제 해당 라이브러리를 설치하고

194
00:09:09,450 --> 00:09:11,710
렉터 플러그인으로 실제 
리인스톨하고

195
00:09:11,710 --> 00:09:14,460
플러그인 설치하고 
정적 웹 사이트소스

196
00:09:14,460 --> 00:09:16,590
클론한데서 돌리기만 하면요

197
00:09:16,590 --> 00:09:19,360
다음과 같이 정적 웹 페이지가 바로
나오실 수 있습니다.

198
00:09:19,360 --> 00:09:22,510
즉 여러분께서 이게 기본적인 의존성만 해결한 채

199
00:09:22,510 --> 00:09:25,970
다음과 같이 하시면은 바로 여러분도 
직접 빌드도 가능하다는

200
00:09:25,970 --> 00:09:26,970
이야기이고요.

201
00:09:26,970 --> 00:09:28,670
그 다음에 오픈스택 문서

202
00:09:28,670 --> 00:09:31,030
설치 가이드 같은 경우는 약간 조금

203
00:09:31,030 --> 00:09:33,450
다른 부분이 이제 tox라고 해가지고서

204
00:09:33,450 --> 00:09:35,110
파이썬에서 여러 가지 테스트

205
00:09:35,110 --> 00:09:38,060
아니면 빌드에 대한 스크립트를
미리 모아가지고

206
00:09:38,060 --> 00:09:39,290
만드는 부분이 있습니다.

207
00:09:39,290 --> 00:09:43,620
그래서 그 라이브러리 파일을 같이
사용해 가지고서요 requirements.txt

208
00:09:43,620 --> 00:09:47,100
에 있는 내용을 읽어와 가지고서
관련 라이브러리를 설치 해 가지고

209
00:09:47,100 --> 00:09:48,100
역시

210
00:09:48,100 --> 00:09:51,290
빌드에서 결과 static 페이지도 확인
하실 수가 있고요.

211
00:09:51,290 --> 00:09:55,010
자 마지막으로 펠리칸 같은 경우도 
여러분이 이제 아까

212
00:09:55,010 --> 00:09:58,460
지금 개인 블로그 페이지는 소스를 
찾을 수가 없어 가지고

213
00:09:58,460 --> 00:09:59,460
제가 펠리칸 블로그

214
00:09:59,460 --> 00:10:02,650
예제 페이지를 있는 내용을 기반으로
했는데요.

215
00:10:02,650 --> 00:10:04,860
역시 소스 클론을 한 다음에

216
00:10:04,860 --> 00:10:07,150
이제 파이썬3을 기반으로 해 가지고

217
00:10:07,150 --> 00:10:11,270
빌드 스크립트가 약간 일부는 파이썬2로 
샘플은 되어있더라고요

218
00:10:11,270 --> 00:10:15,030
하지만 그럼에도 기본적인 세팅에서
뭐 make html이나

219
00:10:15,030 --> 00:10:16,690
아무 문제가 없어 가지고

220
00:10:16,690 --> 00:10:18,180
이렇게 잘 빌드가 되는 것까지를

221
00:10:18,180 --> 00:10:20,880
다 확인할 수가 있었습니다.

222
00:10:20,880 --> 00:10:24,330
이제 정적 웹 사이트를 위한 파이썬
라이브러리는요

223
00:10:24,330 --> 00:10:25,630
여러분들께서 깃허브

224
00:10:25,630 --> 00:10:29,070
소스만 있으면은 실제로 의존성만 
간단하게 해결하고

225
00:10:29,070 --> 00:10:30,680
라이브러리 설치만 하면요

226
00:10:30,680 --> 00:10:32,580
직접 여러분 로컬 폴더에서도

227
00:10:32,580 --> 00:10:34,780
바로 확인이 가능한 굉장히 쉽게

228
00:10:34,780 --> 00:10:38,530
쉽게 사용하던 사용 가능하다는 
장점이 있습니다.

229
00:10:38,530 --> 00:10:42,700
이 정적 웹 사이트 라이브러리가
사실은 여러 가지가 있습니다.

230
00:10:42,700 --> 00:10:45,420
지금 저는 렉터 스핑크스

231
00:10:45,420 --> 00:10:48,330
펠리칸 요 세 가지를 예시로 들
었는데요.

232
00:10:48,330 --> 00:10:49,530
사실은 그 이외에도

233
00:10:49,530 --> 00:10:52,730
mkdocs 라고 해 가지고서 마크다운
기반으로

234
00:10:52,730 --> 00:10:55,600
또는 이제 yaml 야믈 간단한 설정으로

235
00:10:55,600 --> 00:10:59,230
더 쉽게 구성할 수 있는 정적 웹
사이트 빌더도 있고요.

236
00:10:59,230 --> 00:11:01,630
뭐 그 이외에도 예전엔 여러 가지

237
00:11:01,630 --> 00:11:04,190
정적 웹 사이트 빌더가 있었지만은

238
00:11:04,190 --> 00:11:07,160
지금은 약간 좀 많이 안 쓰이는
그런 정적 웹 사이트 빌더도

239
00:11:07,160 --> 00:11:09,370
굉장히 많은 것들이 있습니다.

240
00:11:09,370 --> 00:11:12,110
여기서 여러 가지들을 살펴보실
수가 있는데요.

241
00:11:12,110 --> 00:11:16,480
먼저 살펴볼 포맷 살펴볼 부분은
지원되는 포맷입니다.

242
00:11:16,480 --> 00:11:19,670
아까 렉터를 기반으로 해 가지고서
파이콘 2011

243
00:11:19,670 --> 00:11:22,480
콜롬비아 홈페이지 되게 예쁘게
만들었어요.

244
00:11:22,480 --> 00:11:26,970
즉 이 페이지는요 텍스트 기반으로
html도 넣을 수 있고요

245
00:11:26,970 --> 00:11:31,510
.lr 이라고 해서 자체적인 렉터에
대한 문법을 사용해 가지고

246
00:11:31,510 --> 00:11:33,860
html도 넣고 텍스트도 넣고 해 가지고서

247
00:11:33,860 --> 00:11:37,170
이쁜 웹 페이지를 만들 수가 있는
거고요.

248
00:11:37,170 --> 00:11:40,020
스핑크스 같은 경우는 
도큐멘테이션 as 코드 쪽에서

249
00:11:40,020 --> 00:11:41,690
많이 쓰이는데요.

250
00:11:41,690 --> 00:11:45,000
보통은 restructuredtext라는 rst 기반으로

251
00:11:45,000 --> 00:11:46,850
마크다운 하고는 약간 비슷하지만

252
00:11:46,850 --> 00:11:51,040
또 다른 문법을 기반으로 해 가지고서 
정적 웹 사이트를 만들어냅니다

253
00:11:51,040 --> 00:11:53,580
펠리칸 같은 경우는 이제 rst

254
00:11:53,590 --> 00:11:56,700
restructuredtext와 마크다운을 모두
지원하고 있고요.

255
00:11:56,700 --> 00:11:58,160
mkdocs 같은 경우는

256
00:11:58,160 --> 00:11:59,570
마크다운을 기반으로 해서

257
00:11:59,570 --> 00:12:01,760
정적 웹 사이트를 빌드하고 있습니다.

258
00:12:01,760 --> 00:12:04,870
이 라이선스도 사실 또 중요한 
부분일텐데

259
00:12:04,870 --> 00:12:07,690
펠리칸이 상대적으로 많이 
대중적인데요

260
00:12:07,690 --> 00:12:10,140
다만 이제 라이선스가 gpl 보다

261
00:12:10,140 --> 00:12:14,180
조금 더 강화된 a-gpl 기반으로 
되어있는데 반해서

262
00:12:14,320 --> 00:12:16,680
렉터라든가 스핑크스 같은 
경우는

263
00:12:16,680 --> 00:12:18,690
BSD기반의 라이선스가 되어 있기 때문에

264
00:12:18,690 --> 00:12:21,920
어떻게 보면 라이선스에 대해서
고민하시는 분들은 렉터라든가

265
00:12:21,920 --> 00:12:25,030
스핑크스를 더 많이 선택하실 수
있을 것 같고요.

266
00:12:25,030 --> 00:12:28,980
또한 이제 실제 프로젝트 저장소를 
살펴보시면서 이슈라든가

267
00:12:28,980 --> 00:12:30,800
깃허브 스타 등의 개수

268
00:12:30,800 --> 00:12:31,960
그리고 뭐 액티브한지

269
00:12:31,960 --> 00:12:35,210
최신 커밋이 얼마 되는지 등등 해
가지고서

270
00:12:35,210 --> 00:12:38,410
여러분이 좀 자유자재로 선택하실
수가 있을 것 같고요.

271
00:12:38,410 --> 00:12:41,770
이러한 정적 웹 사이트 빌더의 장점은 
html

272
00:12:41,770 --> 00:12:43,670
자바스크립트 스타일시트

273
00:12:43,670 --> 00:12:47,350
요거 만으로 된 정적 웹 페이지를
의존성이 거의 없이

274
00:12:47,350 --> 00:12:48,820
지금 아까 보셨던 것처럼

275
00:12:48,820 --> 00:12:52,440
정말 빠르게 만들 수가 있다는 장점이 
있습니다.

276
00:12:52,440 --> 00:12:57,120
그렇다면은 정적 웹 사이트가 클라우드와 
dev ops를 만났을 때

277
00:12:57,130 --> 00:13:02,490
어떤 장점이 있을까요. 
한번 같이 살펴봅시다.

278
00:13:02,490 --> 00:13:03,490
다음 그림이 하나가

279
00:13:03,490 --> 00:13:06,850
있는데요 이 그림은 일반적으로
정적 웹 사이트를

280
00:13:06,850 --> 00:13:08,260
포함하여 쓸 때

281
00:13:08,260 --> 00:13:10,710
대규모 확장 가능한 동적 사이트

282
00:13:10,710 --> 00:13:12,860
파트를 포함한 토탈 아키텍처입니다.

283
00:13:12,860 --> 00:13:14,620
그래서 사실 사용자 입장에서야

284
00:13:14,620 --> 00:13:17,440
여기 단일 페이지를 접속해서 정보를

285
00:13:17,450 --> 00:13:22,450
보는 입장이겠지만요 이 페이지는 지금
토탈 아키텍처 같은 경우는

286
00:13:22,450 --> 00:13:24,840
클라우드와 함께 정적 웹 페이지가
돌아가는

287
00:13:24,840 --> 00:13:26,860
즉 클라우드에서 
정적 웹페이지를

288
00:13:26,870 --> 00:13:28,730
보다 잘 액세스할 수 있으려면요

289
00:13:28,730 --> 00:13:31,410
콘텐트 딜리버리 네트워크라고
해가지고

290
00:13:31,410 --> 00:13:35,430
여러가지 지역의 굉장히 
가까운 쪽에 html부터

291
00:13:35,430 --> 00:13:36,430
스타일시트

292
00:13:36,430 --> 00:13:38,560
자바스크립트 등 소스를 더 갖다
줄 수 있어야 되고요

293
00:13:38,560 --> 00:13:42,080
그런 것들은 일종의 블롭 스토리지
이제

294
00:13:42,080 --> 00:13:43,660
파일을 저장하는 스토리지를

295
00:13:43,660 --> 00:13:45,190
기반으로 해서 가져와야 될 겁니다.

296
00:13:45,190 --> 00:13:49,940
자 동적인 기반같은 경우는 사실
날짜라든가

297
00:13:49,940 --> 00:13:52,660
로그인 기능 여러 가지 기능들이
있을 텐데

298
00:13:52,660 --> 00:13:55,750
뭐 가상 머신 기반으로 해 가지고서 
쓰실 수도 있겠지만요

299
00:13:55,750 --> 00:13:58,810
조금 더 어떤 클라우드에 장점을
더 많이 누리면서

300
00:13:58,810 --> 00:14:00,050
쓰게 된다면은

301
00:14:00,050 --> 00:14:02,820
애저 펑션이라든가 아니면 
코스모스 db 같은

302
00:14:02,820 --> 00:14:06,680
nosql 기반 데이터베이스 
또는 api 매니지먼트 등을

303
00:14:06,680 --> 00:14:08,470
잘 활용하셔서
가지고요

304
00:14:08,470 --> 00:14:11,160
서버리스에 가까운 어떤 아키텍처를 
고민하시는

305
00:14:11,160 --> 00:14:12,650
것도 좋을 것 같습니다.

306
00:14:12,650 --> 00:14:15,640
그 이외에도 이 아키텍처를 
살펴 보게 되면은

307
00:14:15,640 --> 00:14:17,230
오른쪽 위에 ci/cd 라고

308
00:14:17,230 --> 00:14:19,580
해 가지고서 devops를 고려했고

309
00:14:19,580 --> 00:14:21,420
이제 기본적인 모니터링 이라든가

310
00:14:21,420 --> 00:14:25,460
인증이라든가 해 가지고 이 페이지를
아무나 액세스할 수 없도록

311
00:14:25,460 --> 00:14:27,620
즉 인증이 있는 권한이 있는 사용자만

312
00:14:27,620 --> 00:14:31,330
액세스 할 수 있도록 이렇게 잘
구성할 수가 있겠죠.

313
00:14:31,330 --> 00:14:32,860
여기는 모든 부분을 오늘

314
00:14:32,860 --> 00:14:36,110
이번 세션에서 저희가 다 다룰 수는
없을 것 같고요.

315
00:14:36,110 --> 00:14:37,760
위에 이 중에서 윗부분

316
00:14:37,760 --> 00:14:42,240
즉 하나의 웹 페이지를 정적인 콘텐츠
만으로 해가지고서

317
00:14:42,240 --> 00:14:45,190
어떻게 클라우드에서 잘 액세스가
될 수가 있는가

318
00:14:45,190 --> 00:14:46,260
라는 부분을요

319
00:14:46,260 --> 00:14:50,620
이 정적 콘텐츠에 대한 부분을 azure
static web app으로 해 가지고서

320
00:14:50,620 --> 00:14:54,530
어떻게 잘 구성을 하고 또 깃허브
액션을 같이 사용해 가지고서

321
00:14:54,530 --> 00:14:59,790
이 ci/cd에 있는 기능을 어떻게 잘
활용할 수 있는지를 파이썬 라이브러리

322
00:14:59,790 --> 00:15:03,230
렉터와 스핑크스 요 두 가지를 사용해
가지고서

323
00:15:03,230 --> 00:15:06,290
데모에서 한 번 살펴 볼 수 있도록
하겠습니다.

324
00:15:06,290 --> 00:15:08,850
그 데모 환경을 자세하게 살펴보기

325
00:15:08,850 --> 00:15:10,930
전에 azure static web app과

326
00:15:10,930 --> 00:15:14,020
깃허브 액션을 대한 짧은 소개는
필요할 것 같습니다.

327
00:15:14,020 --> 00:15:15,990
먼저 데모에서 보이고자 하는 azure

328
00:15:15,990 --> 00:15:21,050
static web app은 현재는 발표 영상을
녹화하는 시점에서는

329
00:15:21,050 --> 00:15:23,030
정식 런칭된 것은 아니고 프리뷰고요.

330
00:15:23,030 --> 00:15:26,420
조만간 아마 정식 런칭이 될 거
같습니다. 이 서비스는

331
00:15:26,420 --> 00:15:27,720
처음 아까 저스틴께서

332
00:15:27,720 --> 00:15:29,600
이야기하신 잘 알려진

333
00:15:29,600 --> 00:15:32,410
정적 웹 사이트 빌더들을 기본으로
지원하고 있어요.

334
00:15:32,410 --> 00:15:36,720
아까 모 휴고라든가 개츠비라든가 
그런 부분을 기본으로 지원하고

335
00:15:37,980 --> 00:15:41,410
아키텍처에서 소개됐던 인증에
대한 통합 부분까지도

336
00:15:41,410 --> 00:15:43,360
손쉽게 지원을 하고 있고요.

337
00:15:43,360 --> 00:15:47,260
구체적으로는 아키텍처에서 이야기
했던 블롭 스토리지 및 cdn

338
00:15:47,260 --> 00:15:49,410
요 두 가지를 핵심으로 해 가지고서

339
00:15:49,410 --> 00:15:53,030
클라우드 인프라에서 여러분이
클라우드 리소스에서 cdn 이건

340
00:15:53,030 --> 00:15:55,590
블롭 스토리지건 하나 하나를

341
00:15:55,590 --> 00:15:56,680
직접 찾아서 구성할

342
00:15:56,680 --> 00:15:58,630
필요 없이 이 서비스가 알아서

343
00:15:58,630 --> 00:16:01,760
손쉽게 구성을 해준다는 장점이
있습니다.

344
00:16:01,760 --> 00:16:02,760
또한 이 정적

345
00:16:02,760 --> 00:16:05,610
동적 콘텐츠에 대한 다른 애저 서비스
와 연계를 지원

346
00:16:05,610 --> 00:16:06,610
하고 있는데요

347
00:16:06,610 --> 00:16:08,810
아까 아키텍처에서 보셨던 
애저 펑션

348
00:16:08,810 --> 00:16:12,400
그런 부분을 쉽게 파이썬에서 또
연동할 수가 있는데

349
00:16:12,400 --> 00:16:15,250
오늘은 이 부분은 생략하고자 합니다.

350
00:16:15,250 --> 00:16:17,660
그 다음 깃허브 액션 같은 경우는요.

351
00:16:17,660 --> 00:16:21,410
깃허브 저장소 요즘 이 깃허브 저장소
다들 많이 사용하시자나요.

352
00:16:21,410 --> 00:16:24,480
거기 깃허브 리포지토리에 있는
내용을 손쉽게

353
00:16:24,480 --> 00:16:28,310
ci/cd 연동이 가능하다는 장점이
있습니다.

354
00:16:28,310 --> 00:16:29,770
야믈 형태 yaml

355
00:16:29,770 --> 00:16:31,240
야믈 형태로 해 가지고서

356
00:16:31,240 --> 00:16:34,360
원하는 워크플로우를 손쉽게 정의
하고요.

357
00:16:34,360 --> 00:16:38,120
그 정의된 파일을 .github의 
workflows 디렉토리에

358
00:16:38,120 --> 00:16:41,220
저장해 놓기만 하면요 깃허브 액션의 
ci/cd가

359
00:16:41,220 --> 00:16:43,420
원하는 대로 돌아가고요.

360
00:16:43,420 --> 00:16:46,350
뿐만 아니라 이미 만들어진 
액션들을 이용해서

361
00:16:46,350 --> 00:16:50,440
손쉽게 원하는 작업을 ci/cd 구성도
할 수 있고 원하신다면

362
00:16:50,440 --> 00:16:55,210
이 액션을 자바스크립트 또는 
도커 기반 이미지를 잘 활용해 가지고서

363
00:16:55,211 --> 00:16:58,110
쉽게 또 구현을 하실 수가 있습니다.

364
00:16:58,110 --> 00:17:04,560
그러면은 실제 데모를 한 번 같이
살펴보도록 하겠습니다.

365
00:17:04,560 --> 00:17:06,330
먼저 살펴볼 부분은요

366
00:17:06,330 --> 00:17:10,419
이제 렉터라는 이제 라이브리를
잘 활용해 가지고서

367
00:17:10,419 --> 00:17:13,380
어떻게 동작하는지 한 번 
살펴보도록 하겠습니다.

368
00:17:13,380 --> 00:17:16,900
이 렉터라는 거는 이제 처음에 여기저기
사용하시려면

369
00:17:16,900 --> 00:17:19,160
사실 여러 가지 방법이 
있겠지만요

370
00:17:19,160 --> 00:17:21,699
가장 좋은 방법은 가상 환경 
virtual env

371
00:17:21,699 --> 00:17:25,070
또는 venv 를 사용하시는 게 가장
좋을 것 같습니다.

372
00:17:25,070 --> 00:17:29,610
저 같은 경우는 파이썬3에 내장된
venv를 사용해서 일단 액티베이션

373
00:17:29,610 --> 00:17:31,970
한 다음에 그 버추얼

374
00:17:31,970 --> 00:17:36,520
가상 환경에서 pip install wheel 휠
같은 기본적인 의존성만 해결한채

375
00:17:36,520 --> 00:17:39,510
그리고 이제 렉터 에 대한 부분을
pip install로 해

376
00:17:39,510 --> 00:17:42,280
가지고서 바로 설치를 하였고요

377
00:17:42,280 --> 00:17:46,630
이렇게 해서 설치가 완료되면은
이제 렉터에서 여러분들이

378
00:17:46,630 --> 00:17:47,710
도큐멘테이션을 보시면요

379
00:17:47,710 --> 00:17:49,760
퀵스타트라는 것을 통해 가지고

380
00:17:49,760 --> 00:17:54,240
바로 이제 뭐 원하는 프로젝트 네임만 
입력하고 블로그

381
00:17:54,240 --> 00:17:55,980
네임 등등에 블로그 쓸 것인지

382
00:17:55,980 --> 00:18:00,070
author 네임을 쓸 것인지 그런 
기본적인 것만 지정을 하면요

383
00:18:00,070 --> 00:18:03,770
여러분이 쉽게 이제 샘플 사이트를
바로 만드실 수가 있어요.

384
00:18:03,770 --> 00:18:05,180
그래서 저 같은 경우는

385
00:18:05,180 --> 00:18:07,530
샘플로 만든 사이트를 가지고서요

386
00:18:07,530 --> 00:18:10,890
일단 로컬에서 동작해 가지고 잘
되는지를 한번 살펴보겠습니다.

387
00:18:10,890 --> 00:18:13,360
lektor server라고만 해 두면은

388
00:18:13,360 --> 00:18:18,200
이제 기본적으로 파일들이 
제 컴퓨터에 .cache라는

389
00:18:18,200 --> 00:18:19,870
폴더에 저장이 돼가지고서요

390
00:18:19,870 --> 00:18:22,360
이제 5000번 로컬호스트에

391
00:18:22,360 --> 00:18:25,000
포트 5000번을 해 가지고서 확인하실 수가
있습니다.

392
00:18:25,000 --> 00:18:27,170
요렇게 형태로 해가지고 하게 되면요

393
00:18:27,170 --> 00:18:28,570
렉터를 기반으로 해가지고

394
00:18:28,570 --> 00:18:31,550
프로젝트를 기본으로 생성을 
했고요.

395
00:18:31,550 --> 00:18:35,770
저 같은 경우는 그래서 요거를 지금
사전에 만들어 놓았던 깃허브에

396
00:18:35,770 --> 00:18:37,010
저장소만 딱 만들어 두고

397
00:18:37,010 --> 00:18:40,180
아무것도 된 되지 않은 저장소에

398
00:18:40,180 --> 00:18:43,800
git remote add 해서 origin 해가지고서
이 소스를

399
00:18:43,800 --> 00:18:46,300
그대로 올리도록 하겠습니다.

400
00:18:46,300 --> 00:18:47,880
git commit을 통해 가지고서

401
00:18:47,880 --> 00:18:50,370
기본적인 메시지 지정을 하고요

402
00:18:50,370 --> 00:18:54,100
initialize initial commit 등등 
해 가지고서 간단하게 지정

403
00:18:54,100 --> 00:18:57,690
해가지고서 저장을 한 다음에 
이제 push를 하도록 하겠습니다.

404
00:18:57,690 --> 00:19:01,350
push origin을 지정하는 것이 
좋겠고요.

405
00:19:01,350 --> 00:19:02,420
다만 이제 지금 환경에서는

406
00:19:02,420 --> 00:19:05,830
제가 author name까지는 제가 
사전에 지정을 못 해 가지고서요

407
00:19:05,830 --> 00:19:09,560
아마 ubuntu라는 기본적인 이름으로
나오긴 할텐데

408
00:19:09,560 --> 00:19:12,010
여러분들께서 직접 하실 때는 author
name이라든가

409
00:19:12,010 --> 00:19:15,110
기본적인 깃허브 설정을 잘 하실
것으로 봅니다.

410
00:19:15,110 --> 00:19:17,000
자 이렇게 해서 설정을 하게 
되면은

411
00:19:17,000 --> 00:19:19,930
이제 깃허브로 이제 내용까지 
올라갔지요.

412
00:19:19,930 --> 00:19:23,520
자 이 환경에서 이제 좀 더 본격적인
데모로 해 가지고서

413
00:19:23,520 --> 00:19:25,190
azure static web app과

414
00:19:25,190 --> 00:19:27,170
깃허브 액션을 통해 가지고서

415
00:19:27,170 --> 00:19:29,030
클라우드와 ci/cd의 장점을

416
00:19:29,030 --> 00:19:32,690
어떻게 누리는지를 살펴보도록
하겠습니다.

417
00:19:32,690 --> 00:19:33,950
자 다음 데모에서는 실제

418
00:19:33,950 --> 00:19:37,280
애저에서 어떻게 동작하는지 
살펴보도록 하겠습니다.

419
00:19:37,280 --> 00:19:40,950
지금 보시는 하면은 portal.azure.com
이라고 해 가지고서

420
00:19:40,950 --> 00:19:44,050
애저 포털 화면입니다. 이 포털
화면에서요

421
00:19:44,050 --> 00:19:46,030
이제 저같은 경우 새로 리소스를

422
00:19:46,030 --> 00:19:47,230
곧 생성을 할 겁니다.

423
00:19:47,230 --> 00:19:50,520
그래서 이제 이제 보통은 애저에서

424
00:19:50,520 --> 00:19:53,400
이렇게 보시는 화면과 같이 프라이빗

425
00:19:53,400 --> 00:19:57,110
대시보드 등 해가지고 원하시는
대시보드를 커스터마이징 하실

426
00:19:57,110 --> 00:19:58,110
수도 있어요.

427
00:19:58,110 --> 00:20:00,880
그래서 뭐 저같은 경우는 
메뉴판을 눌러가지고

428
00:20:00,880 --> 00:20:05,890
리소스 만들기를 선택한 다음에
azure static web 정도로 해 가지고서

429
00:20:05,890 --> 00:20:09,350
검색을 하게 되면은 이제 
azure static web app이

430
00:20:09,350 --> 00:20:13,150
현재는 preview라고 나와 있는 부분을
확인하실 수가 있어요.

431
00:20:13,150 --> 00:20:15,750
그래서 그거를 기반으로 해 
가지고서 한 번

432
00:20:15,750 --> 00:20:17,350
새로운 리소스를 애저 클라우드에서

433
00:20:17,350 --> 00:20:19,420
만들어 보도록 하겠습니다.

434
00:20:19,420 --> 00:20:21,560
역시 미리보기 라고 나와 있고요.

435
00:20:21,560 --> 00:20:24,460
지금 리소스 그룹은 어떻게 보면
여러가지 리소스를

436
00:20:24,460 --> 00:20:25,630
논리적으로 저장을 해두는

437
00:20:25,630 --> 00:20:27,640
어떤 공간이라고 보시면 되겠습니다.

438
00:20:27,640 --> 00:20:31,570
애저 위에서요. 그래서 파이콘 데모로
간단하게 만들고요.

439
00:20:31,570 --> 00:20:34,580
실제 애저에서 사용할 이름을 만들고

440
00:20:34,580 --> 00:20:38,410
현재 리전은 테스트로 몇 개 
안되기 때문에 한국하고

441
00:20:38,410 --> 00:20:41,041
조금 가깝다고 할 수 있는 
미국 서부를 선택하고

442
00:20:41,041 --> 00:20:43,960
프리뷰기 때문에 비용은 무료입니다.

443
00:20:43,960 --> 00:20:46,720
깃허브 계정 제가 사전에 연동을
해 놔 가지고서요.

444
00:20:46,720 --> 00:20:50,981
제 계정에서 리포지터리 찾아 가지고
lektor-pyconkr2020

445
00:20:50,981 --> 00:20:54,170
선택하고 마스터 브랜치를 
선택하겠습니다.

446
00:20:54,170 --> 00:20:55,750
빌드 사전설정 여기 보시면은 아까

447
00:20:55,750 --> 00:20:59,630
저스틴께서 설명하셨던 프레임워크와 
어떤 static 빌더를

448
00:20:59,630 --> 00:21:02,740
알려진 것을 바로 
보실 수가 있구요.

449
00:21:02,740 --> 00:21:06,120
기본적으로 지금 이 세팅만 해서
넘어가게되면요

450
00:21:06,120 --> 00:21:07,730
검토 했을 때 문제가 없기 때문에

451
00:21:07,730 --> 00:21:10,200
바로 자원을 만들도록 하겠습니다.

452
00:21:10,200 --> 00:21:13,030
시간 관계상 이제 저 같은 경우
이렇게 생성하는데

453
00:21:13,030 --> 00:21:16,950
한 10-15초정도 그렇게 오래 
걸리지는 않더라고요.

454
00:21:16,950 --> 00:21:19,910
그래서 기다리시면 봐로 확인하
실수가 있을 것 같고요.

455
00:21:19,910 --> 00:21:21,980
자 배포가 그래서 잘 진행이 되고

456
00:21:21,980 --> 00:21:24,340
해가지고서 배포가 완료되게 
되면요.

457
00:21:24,340 --> 00:21:25,630
바로 이 완성된 리소스를

458
00:21:25,630 --> 00:21:28,050
여러분들께서 확인을 하실 수가
있습니다.

459
00:21:28,050 --> 00:21:29,050
그래서 배포 성공이

460
00:21:29,050 --> 00:21:30,320
오른쪽 위에 나와서

461
00:21:30,320 --> 00:21:33,770
저는 바로 리소스로 이동하기를
클릭을 하였고요

462
00:21:33,770 --> 00:21:36,210
이 리소스로 이동하기를 
클릭하면은

463
00:21:36,210 --> 00:21:37,820
url 하나가 나오는데요

464
00:21:37,820 --> 00:21:41,540
나중에 여러분들이 dns 등에서 
설정도 가능합니다만은

465
00:21:41,540 --> 00:21:42,960
지금 보시면 아직 렉터로

466
00:21:42,960 --> 00:21:46,450
아까 그 빌드했던 그 페이지의 내용은
나오지 않고 있어요.

467
00:21:46,450 --> 00:21:49,830
그 이유는 이제 추가적인 설정이
필요한데요.

468
00:21:49,830 --> 00:21:50,941
이제 깃허브 액션 ci/cd의

469
00:21:50,941 --> 00:21:52,920
기능을 활용해 가지고서

470
00:21:52,920 --> 00:21:54,700
구체화를 하고자 합니다.

471
00:21:54,700 --> 00:21:57,580
지금 하나의 커밋이 더 하나가 
생성이 됐고요.

472
00:21:57,580 --> 00:22:00,770
.github에 .workflows에 가면 새로운
파일이 있는데

473
00:22:00,770 --> 00:22:04,170
그거를 제가 제 로컬 환경에서 
pull을 해 가지고서

474
00:22:04,170 --> 00:22:06,040
저는 vi 에디터를 통해 가지고서

475
00:22:06,040 --> 00:22:08,200
간단하게 좀 살펴 보도록 하겠습니다.

476
00:22:08,200 --> 00:22:13,670
.github/workflows로 가서 해당 파일을
vi로 열겠습니다.

477
00:22:13,670 --> 00:22:16,180
다음과 같은 형태가 야믈 형태가
되겠고요.

478
00:22:16,180 --> 00:22:18,850
azure static web app으로 여러분들이
자원을 생성

479
00:22:18,850 --> 00:22:20,340
하시게 되면은 깃허브

480
00:22:20,340 --> 00:22:23,540
액션이 기능이 자동으로 하나가
샘플로 해 가지고

481
00:22:23,540 --> 00:22:26,280
딱 기본적인 게 연동이 되는데요.

482
00:22:26,280 --> 00:22:29,530
지금 제가 구성한 환경은 파이썬
기반으로 해서

483
00:22:29,530 --> 00:22:31,590
어떻게 이 앱이 동작을 빌드를

484
00:22:31,590 --> 00:22:34,420
하는지에 대한 부분이 언급이 
안 돼 있어요.

485
00:22:34,420 --> 00:22:35,460
그래서 해당 스크립트를

486
00:22:35,460 --> 00:22:38,980
제가 vi에서 set paste 기능을 통해
가지고서

487
00:22:38,980 --> 00:22:40,510
카피를 하겠습니다.

488
00:22:40,510 --> 00:22:43,080
대략적으로 여기 있는 내용을
설명하자면요

489
00:22:43,080 --> 00:22:45,150
깃허브 액션에서 이제 우분투

490
00:22:45,150 --> 00:22:48,450
최신버전을 기반으로 해 가지고서
이미지를 이미지를 사용해서

491
00:22:48,450 --> 00:22:51,230
깃허브에 있는 소스를 
가져와서

492
00:22:51,230 --> 00:22:54,460
파이썬 버전을 3.7 64비트로 
셋업을

493
00:22:54,460 --> 00:22:58,510
하고 그 다음에 파이썬에 대한 
의존성을 기본으로 설치하고

494
00:22:58,510 --> 00:23:01,920
wheel lektor 설치하고 뭐 로깅을 위해
가지고서

495
00:23:01,920 --> 00:23:04,160
파이썬 환경을 다시 한 번 보여주고

496
00:23:04,160 --> 00:23:06,430
필요하다면 플러그인을 설치하고

497
00:23:06,430 --> 00:23:07,550
여기서 보시면 또 output을

498
00:23:07,550 --> 00:23:10,810
제가 site라는 폴더로 output path를
해 놨어요.

499
00:23:10,810 --> 00:23:13,790
요 요 부분이 생각보다 중요할 수가
있는데요.

500
00:23:13,790 --> 00:23:15,790
왜냐면은 빌드된 정적 웹 사이트에

501
00:23:15,790 --> 00:23:18,970
대한 html 파일을 
azure static web app으로

502
00:23:18,970 --> 00:23:22,740
올려 줘야 되겠죠. 그래서 이 밑에
올려 주는 부분에다가

503
00:23:22,740 --> 00:23:26,840
applocation을 /site로 정확하게 
지정을 해 준 다음에

504
00:23:26,840 --> 00:23:30,560
제가 해당 부분을 git commit으로 해서
업데이트를 하고서

505
00:23:30,560 --> 00:23:32,230
커밋을 시켜보도록 하겠습니다.

506
00:23:32,230 --> 00:23:37,720
change azure static web app definition 아니면
깃허브 액션 등 해 가지고서

507
00:23:37,720 --> 00:23:40,310
이렇게 지정하시면 될 거 같고요
.

508
00:23:40,310 --> 00:23:42,130
그렇게 해서 저장이 되면은 git push를

509
00:23:42,130 --> 00:23:46,409
통해 가지고서 이 소스를
푸시를 시키도록 하겠습니다.

510
00:23:46,410 --> 00:23:49,140
그렇게 되면은 역시 git author로

511
00:23:49,140 --> 00:23:50,960
이름을 바꾸는 게 좋겠다고 나오는데

512
00:23:50,960 --> 00:23:55,530
일단 커밋은 된거고요. 이 커밋
된 결과를 제가 뭐 업데이트

513
00:23:55,530 --> 00:23:56,530
리프레시 해가지고서

514
00:23:56,530 --> 00:23:57,530
확인을 하게 되면요

515
00:23:57,530 --> 00:24:00,220
여기 깃허브 저장소에 보시면

516
00:24:00,220 --> 00:24:03,410
이제 중간에 위에 actions라는 
탭이 있습니다.

517
00:24:03,410 --> 00:24:04,970
이 탭에 가 보시면요

518
00:24:04,970 --> 00:24:09,930
현재 지금 올라온 커밋을 기반으로
해 가지고서 깃허브 액션

519
00:24:09,930 --> 00:24:12,770
지금 워크플로 정의된 야믈 파일을
기준으로

520
00:24:12,770 --> 00:24:16,450
하나하나 단계별로 실행이 되는
것을 보실 수가 있습니다.

521
00:24:16,450 --> 00:24:18,559
처음에 베이스 이미지를 하고

522
00:24:18,559 --> 00:24:20,880
깃허브 액션에 static web app 에

523
00:24:20,880 --> 00:24:23,880
대한 부분을 pull로 해서 가져오게
되고요

524
00:24:23,880 --> 00:24:28,080
그 다음에 리포지토리 소스를 가져와 
가지고서 파이썬 셋업하고

525
00:24:28,080 --> 00:24:33,070
디펜던시 설치하고 pip 정의된대로 
해가지고서 그대로

526
00:24:33,070 --> 00:24:35,220
예 제가 예상하는 내용대로

527
00:24:35,220 --> 00:24:37,860
그대로 잘 동작하는 걸 보실 수가
있고요.

528
00:24:37,860 --> 00:24:39,040
파이썬 현재 뭐

529
00:24:39,040 --> 00:24:42,200
버전이 어떻게 되는지 각각 라이브러리
버전도 확인했고요.

530
00:24:42,200 --> 00:24:45,360
여기에 중간에 약간 에러가 나오는
부분은요. 사실

531
00:24:45,360 --> 00:24:48,900
azure static web app은 정적인 콘텐츠
뿐만 아니라

532
00:24:48,900 --> 00:24:50,980
동적인 콘텐츠도 지원을 하기 때문에

533
00:24:50,980 --> 00:24:53,720
현재 동적 콘텐츠가 없다는 얘기고요

534
00:24:53,720 --> 00:24:56,270
이 부분은 추후에 애저 펑션이라는
그런 것과

535
00:24:56,270 --> 00:24:58,050
또 연동도 가능합니다.

536
00:24:58,050 --> 00:25:03,390
어쨌든 지금 보면은 빌드가 잘 되어
가지고 모든 잘 성공을 했네요.

537
00:25:03,390 --> 00:25:06,070
그렇게 되면 완료 표시가 잘 나오게
되고요.

538
00:25:06,070 --> 00:25:08,470
그 이렇게 완료 표시가 나오게 되면은

539
00:25:08,470 --> 00:25:12,750
깃허브에서 여러분들이 커밋 내역을 
가보시게 되면요

540
00:25:12,750 --> 00:25:13,750
체크 표시가 떠요.

541
00:25:13,750 --> 00:25:16,280
아까 같은 경우는 뭔가 이유로 인해
가지고서

542
00:25:16,280 --> 00:25:19,450
디폴트 옵션 으로 그 앱을 검출
할 수가 없었기 때문에

543
00:25:19,450 --> 00:25:21,140
엑스라는 표시가 나왔는데

544
00:25:21,140 --> 00:25:23,830
제가 워크플로우 파이썬을 기반으로 해서

545
00:25:23,830 --> 00:25:27,120
정확하게 정의를 하니까 잘 나온 것을 
보실 수가 있고

546
00:25:27,120 --> 00:25:28,770
새로고침을 역시 하니까

547
00:25:28,770 --> 00:25:29,990
렉터에 있는 내용이 이렇게

548
00:25:29,990 --> 00:25:32,559
잘 나온 것을 보실 수가 있습니다.

549
00:25:32,559 --> 00:25:33,870
다음과 같이 해 가지고서

550
00:25:33,870 --> 00:25:38,200
여러분들이 정적 웹 페이지를 azure
static web app을 사용하고

551
00:25:38,200 --> 00:25:40,230
깃허브 액션을 사용해 가지고서

552
00:25:40,230 --> 00:25:42,470
여러분들이 빌드를 하실 수가 있구요.

553
00:25:42,470 --> 00:25:44,900
이렇게 하시면 향후에 여러분이
커밋을 하게

554
00:25:44,900 --> 00:25:48,150
되면은 커밋을 한 내용이 푸시가
될 때마다

555
00:25:48,150 --> 00:25:49,670
이제 최신 내용을 기준으로 해서

556
00:25:49,670 --> 00:25:52,860
쭉 빌드가 돼 가지고서 어떻게 잘
동작을 하는지

557
00:25:52,860 --> 00:25:54,900
아니면 어떤 문제가 있는지 없는지

558
00:25:54,900 --> 00:25:59,711
ci/cd 기능으로 해서 쭉 확인하실
수가 있겠죠.

559
00:25:59,711 --> 00:26:03,400
그 마지막으로는요. 이제 제가 오픈스택

560
00:26:03,400 --> 00:26:05,320
이제 컨트리뷰톤 이라는 프로젝트를

561
00:26:05,320 --> 00:26:07,110
지금 이제 진행을 하고 있는데요

562
00:26:07,110 --> 00:26:08,450
그 쪽에 있는 내용에서

563
00:26:08,450 --> 00:26:12,270
이제 컨트리뷰터 멘티로 
참여하시는 분들이 파이썬 기반

564
00:26:12,270 --> 00:26:15,440
스핑크스 기반으로 문서화 하는 것을
제안을 했고요.

565
00:26:15,440 --> 00:26:16,860
그것을 기반으로 하는 것을 azure

566
00:26:16,860 --> 00:26:19,520
static web app으로 빌드를 했습니다.

567
00:26:19,520 --> 00:26:22,680
그래서 다음과 같이 뱃지도 잘 달아놓아서
깃허브 ci/cd

568
00:26:22,680 --> 00:26:24,950
깃허브 액션 ci/cd가 현재

569
00:26:24,950 --> 00:26:27,780
잘 동작하고 있다고 확인을 했고요.

570
00:26:27,780 --> 00:26:30,710
최신 내용을 최신 커밋을 기준으로
해 가지고서

571
00:26:30,710 --> 00:26:32,270
현재 잘 동작을 하고 있는지

572
00:26:32,270 --> 00:26:33,430
아니면 어떤 이슈가 있는지

573
00:26:33,430 --> 00:26:35,630
등을 한번 확인해 보도록 하겠습니다.

574
00:26:35,630 --> 00:26:39,300
역시 이슈없이 잘 빌드가 된 것을
확인하실 수가 있구요.

575
00:26:39,300 --> 00:26:41,550
마찬가지로 actions 탭에 가면요

576
00:26:41,550 --> 00:26:44,010
다음과 같이 최신 커밋이 잘 빌드가 
됐고

577
00:26:44,010 --> 00:26:45,010
빌드 되는데 뭐

578
00:26:45,010 --> 00:26:47,520
얼마 정도 시간이 걸렸고 등에 대한

579
00:26:47,520 --> 00:26:49,480
기본적인 정보를 보실 수가 있고

580
00:26:49,480 --> 00:26:50,790
이제 저같은 경우는

581
00:26:50,790 --> 00:26:53,700
이제 워크플로우 파일을 여기서
한번 열어 가지고서

582
00:26:53,700 --> 00:26:56,520
실제로 어떻게 정의가 되었는지를
살펴볼텐데요

583
00:26:56,520 --> 00:26:59,980
그전에 모든 단계가 잘 성공한 거
보실 수가 있구요

584
00:26:59,980 --> 00:27:01,670
아까랑 거의 비슷합니다.

585
00:27:01,670 --> 00:27:04,790
소스를 체크아웃 해 가지고서 
디펜던시를 하는데

586
00:27:04,790 --> 00:27:07,410
아까하고는 달리 스핑크스는 
이제 오픈스택

587
00:27:07,410 --> 00:27:11,710
문서는 tox를 기반으로 빌드하는 것을 
권장하고 있기 때문에 똑같이

588
00:27:11,710 --> 00:27:12,710
사용을 하였구요.

589
00:27:12,710 --> 00:27:16,380
그 다음에 tox를 기반으로 
sphinx build를 하고

590
00:27:17,380 --> 00:27:20,840
이제 추가로 이제 컨트리뷰톤 테스트를 
위해 가지고요

591
00:27:20,840 --> 00:27:22,900
간단한 lint 기능을 통해 가지고서
이제

592
00:27:22,900 --> 00:27:25,980
어떤 문법적인 오류가 있는지 없는지 
등을 체크를 했고

593
00:27:25,980 --> 00:27:28,640
그 결과를 역시 업로드했는데

594
00:27:28,640 --> 00:27:30,250
지금 보시면은 doc에 build에

595
00:27:30,250 --> 00:27:32,880
html 폴더로 업로드가 되어 있죠.

596
00:27:32,880 --> 00:27:36,110
역시 마찬가지로 여기도 
azure static web app에서

597
00:27:36,110 --> 00:27:37,160
그럼 데스티네이션

598
00:27:37,160 --> 00:27:39,320
실제적으로 소스가 생성되는 폴더에

599
00:27:39,320 --> 00:27:40,920
기준이 어딘지에 대해서

600
00:27:40,920 --> 00:27:44,220
명확하게 설정이 필요할 것 같습니다.

601
00:27:44,220 --> 00:27:46,820
역시 그래서 이 사이트 들어가서
확인을 해 보면은

602
00:27:46,820 --> 00:27:50,290
이제 컨트리뷰톤 2020 
오픈스택 팀이라고 해서

603
00:27:50,290 --> 00:27:52,510
잘 빌드가 된 것을 확인하실 수가
있고요.

604
00:27:52,510 --> 00:27:53,750
또 실제 워크플로우 파일도

605
00:27:53,750 --> 00:27:56,140
한번 간단하게 살펴보도록 하겠습니다.

606
00:27:56,140 --> 00:27:58,250
아까랑 거의 비슷하긴 하면서도

607
00:27:58,250 --> 00:28:02,700
약간 다른 것 같은데요. 여기 보시면은
지금 뭐 전체적으로

608
00:28:02,700 --> 00:28:05,640
ubuntu 최신버전 이용해 가지고 체크아웃

609
00:28:05,640 --> 00:28:09,010
해 가지고 하는 과정은 전체적으로
다 비슷한데요

610
00:28:09,010 --> 00:28:13,030
아까하고의 약간 차이가 있다면
아까는 제가 파이썬 3.7

611
00:28:13,030 --> 00:28:15,480
이라는 걸 정확하게 지정을 했는데요

612
00:28:15,480 --> 00:28:18,340
여기서 제가 테스트 할 때는 
파이썬 버전을 우분투

613
00:28:18,340 --> 00:28:21,110
최신 버전에 내장된 디폴트로 사용
했습니다

614
00:28:21,110 --> 00:28:22,830
그 차이가 있고

615
00:28:22,830 --> 00:28:25,480
역시 appartifact에 대한 로케이션이 
doc에

616
00:28:25,480 --> 00:28:28,170
build에 html이라고 정확하게 지정한
부분이

617
00:28:28,170 --> 00:28:29,920
차이가 있는데요.

618
00:28:29,920 --> 00:28:31,620
조금 더 구체적으로 이야기하자면

619
00:28:31,620 --> 00:28:35,380
지금 여기서 지정을 왜 안했냐 
하는 부분은요

620
00:28:35,380 --> 00:28:37,450
사실은 지정하는 것을 더 선호합니다.

621
00:28:37,450 --> 00:28:39,390
그래서 비교를 위해 가지고

622
00:28:39,390 --> 00:28:42,180
지금 이게 보여드렸 보여 드린 부분이고요.

623
00:28:42,180 --> 00:28:44,370
이 지정을 하는 부분도

624
00:28:44,370 --> 00:28:46,170
깃허브 액션에서는 매트릭스

625
00:28:46,170 --> 00:28:49,080
라는 기능이 있어 가지고
n x m으로 해 가지고

626
00:28:49,080 --> 00:28:53,580
예를 들면 파이썬 뭐 여전히 2를
쓰신다고 하면은 2.7

627
00:28:53,580 --> 00:28:54,580
3.5

628
00:28:54,580 --> 00:28:55,940
3.6 3.7

629
00:28:55,940 --> 00:29:01,090
이렇게 네 개를 지정하고 대상 이제
실행되는 빌드 환경을 우분투

630
00:29:01,090 --> 00:29:02,870
윈도우 지정하게 되면요

631
00:29:02,870 --> 00:29:04,260
4 곱하기 2 해 가지고서

632
00:29:04,260 --> 00:29:07,340
8번의 테스트를 크로스로 하실 수가
있어요.

633
00:29:07,340 --> 00:29:10,920
그런 등등의 ci/cd 에서 ci/cd를 쓰는
이유는

634
00:29:10,920 --> 00:29:13,550
커밋에 대해서 문제가 있는지 검사를 
하고

635
00:29:13,550 --> 00:29:16,670
정적 웹 사이트 빌드를 위해서 사용하기는 
했는데요

636
00:29:16,670 --> 00:29:18,710
여러분이 여러 가지 os 라든가

637
00:29:18,710 --> 00:29:21,410
다양한 파이썬 버전 등에서 문제가
있는지

638
00:29:21,410 --> 00:29:25,719
없는지 등을 체크하는 기능으로
도 많이 쓰실 수가 있기 때문에요.

639
00:29:25,720 --> 00:29:27,580
그런 부분도 여러분들이 잘 쓰시면은

640
00:29:27,580 --> 00:29:28,620
이제 devops 기능을

641
00:29:28,620 --> 00:29:31,500
제대로 활용하실 수가 있을 것 같습니다.

642
00:29:31,500 --> 00:29:33,490
자 여기까지 해서 설명을 했고요

643
00:29:33,490 --> 00:29:35,900
그 다음에는 다시 저스틴께서

644
00:29:35,900 --> 00:29:39,170
정적 웹 사이트 활용 가치를 
설명하실 겁니다.

645
00:29:39,170 --> 00:29:42,130
자 그렇다면은 왜 이렇게

646
00:29:42,130 --> 00:29:45,640
정적 웹 사이트를 만들어서 
사용하는 것이 좋을까

647
00:29:45,640 --> 00:29:48,470
대한 고민을 또 하실 수 
있을 것 같아요.

648
00:29:48,470 --> 00:29:51,809
아무래도 이런 정적 웹 사이트를
만들어 사용을 한다면은

649
00:29:51,809 --> 00:29:54,520
거기에 대한 어떤 가치가 있기 
때문일텐데

650
00:29:54,520 --> 00:29:56,830
이런 활용 가치에 대해서도 잠깐

651
00:29:56,830 --> 00:29:59,260
언급을 하면 좋을 것 같습니다.

652
00:29:59,260 --> 00:30:02,720
자 먼저 정적 웹 사이트를 만들어서
사용을 하게 되면은

653
00:30:02,720 --> 00:30:04,570
이제 다양한 장점들이 있습니다.

654
00:30:04,570 --> 00:30:10,370
우선 여기서는 한 5가지 장점 정도만 
정리를 해 볼게요.

655
00:30:10,370 --> 00:30:13,350
가장 먼저 보면은 cms 기능이에요

656
00:30:13,350 --> 00:30:17,380
정적 웹 사이트는 cms 기능으로 주로
작동을 동작을 하는데

657
00:30:17,380 --> 00:30:21,570
왜 그러냐 하면은 일단 대부분의
웹사이트들이 그다지

658
00:30:21,570 --> 00:30:25,740
큰 큰 뭐 어떤 거창한 기능들이
많이 필요가 없습니다

659
00:30:25,740 --> 00:30:27,770
거의 콘텐츠 관리 시스템 용도로

660
00:30:27,770 --> 00:30:29,650
사용하는 것들이 대부분이죠.

661
00:30:29,650 --> 00:30:31,260
예를 들자면 블로그 라던가

662
00:30:31,260 --> 00:30:36,520
뭐 회사 이벤트용 마이크로 페이지
라든가 이런 것들이 대부분인데

663
00:30:36,520 --> 00:30:39,120
이제 그러다 보니까 어떤 전체적으로

664
00:30:39,120 --> 00:30:41,920
웹 사이트의 형태는 크게 바뀌지를 
않고

665
00:30:41,920 --> 00:30:44,930
오로지 컨텐츠가 딱 돌아가는 
그 부분만 바뀌는 거 같아요.

666
00:30:44,930 --> 00:30:48,890
자 이런 경우에는 굳이 
동적 웹사이트를 이용을 해서

667
00:30:48,890 --> 00:30:51,270
서버 사이드에서 렌더링을 해 가지고

668
00:30:51,270 --> 00:30:54,790
클라이언트 사이드로 보내줄 이유가
별로 없죠.

669
00:30:54,790 --> 00:31:00,679
두 번째는 정적 웹 사이트가 
갖고 있는 어떤 보안 얘깁니다.

670
00:31:00,679 --> 00:31:03,660
정적 웹 사이트는 그 자체로 
완결성을 갖는데요

671
00:31:03,660 --> 00:31:07,870
다른 말로 하면 다른 애플리케이션이나 
다른 서버나

672
00:31:07,870 --> 00:31:09,270
이런 쪽이랑 연결할 일이

673
00:31:09,270 --> 00:31:11,760
거의 없다고 보시면 될 것 같아요.

674
00:31:11,760 --> 00:31:15,160
웹 사이트가 즉 정적 웹 사이트를
호스팅하는 그 부분이

675
00:31:15,160 --> 00:31:17,470
보안에 취약해졌다고 하더라도

676
00:31:17,470 --> 00:31:19,860
다른 애플리케이션이 이로 인해서

677
00:31:19,860 --> 00:31:21,809
영향을 받을 일이 거의 없다는 거죠.

678
00:31:21,809 --> 00:31:23,260
왜냐하면 연결이 안 되어 있으니까.

679
00:31:23,260 --> 00:31:25,540
그만큼 어떤 전체 애플리케이션

680
00:31:25,540 --> 00:31:29,290
아키텍처에 어떤 보안의 관점에서

681
00:31:29,290 --> 00:31:32,270
어떤 정적 웹 사이트를 호스팅하는 것 
자체가

682
00:31:32,270 --> 00:31:35,080
영향을 미치지는 않습니다.

683
00:31:35,080 --> 00:31:39,140
또 한 가지는 성능 측면인데요

684
00:31:39,140 --> 00:31:41,360
저희가 이제 정적 웹 사이트를 
만든 다음에

685
00:31:41,360 --> 00:31:45,559
컨텐츠 빌더를 정적 웹 사이트 
빌더를 통해서 html 파일

686
00:31:45,559 --> 00:31:48,950
그 다음에 css 파일 자바스크립트
파일 등을 만들잖아요.

687
00:31:48,950 --> 00:31:50,730
이미 딱 떨어지는 거란 말이예요.

688
00:31:50,730 --> 00:31:55,450
이미 만들어져 있는 컨텐츠이기 때문에 
이거를 호스팅할 때

689
00:31:55,450 --> 00:31:56,760
성능면에서 굉장히 빠르겠죠.

690
00:31:56,760 --> 00:32:00,179
그냥 그대로 웹 브라우저로 다운로드
받아서 사용하면 됩니다

691
00:32:00,179 --> 00:32:02,100
자 한번 생각을 해 보시면 좋을 것 
같아요.

692
00:32:02,100 --> 00:32:06,640
이렇게 이미 만들어져 있는 html
파일을 서빙하는 것과

693
00:32:06,640 --> 00:32:11,320
서버단에서 html 문서를 만들기 위해서
막 렌더링을 하고

694
00:32:11,320 --> 00:32:14,870
데이터를 모아서 쭉 데이터를 
조합하는 것과

695
00:32:14,870 --> 00:32:17,760
어떤 게 더 빠를까 생각을 해 보시면은 
아마도

696
00:32:17,760 --> 00:32:21,320
이게 어떤 의미인지 아실 수 있을 것 같습니다.

697
00:32:21,320 --> 00:32:25,270
또 한 가지는 확장성 측면에서 굉장히
좋은데요.

698
00:32:25,270 --> 00:32:26,960
왜냐면은 정적 웹 사이트는 아까

699
00:32:26,960 --> 00:32:29,830
잠깐 말씀드렸다시피 
백엔드 어플리케이션하고

700
00:32:29,830 --> 00:32:31,820
디커플링이 돼 있어요.

701
00:32:31,820 --> 00:32:36,590
즉 백엔드 애플리케이션에 대한 
의존성이 거의 없기 때문에

702
00:32:36,590 --> 00:32:38,340
분산 처리라든가 이런 고민할 
필요가 없죠

703
00:32:38,340 --> 00:32:42,829
확장 확장을 해야 되는 상황에서
트래픽이 몰릴 경우는 확장을 해야 되는데

704
00:32:42,830 --> 00:32:45,990
그럴 경우에는 보통 이제 데이터베이스와 
연결한다

705
00:32:45,990 --> 00:32:48,200
이렇게 하면 분산 처리 시스템이라든지

706
00:32:48,200 --> 00:32:49,770
이런 것들을 고민하지만

707
00:32:49,770 --> 00:32:53,540
정적 웹사이트일 경우에는 
이런 고민들을 거의 할 필요가 없죠

708
00:32:53,540 --> 00:32:55,679
그냥 서버 하나만 더 만들면 되니까

709
00:32:55,679 --> 00:32:59,309
그리고 그렇게 만들어진 
서버들 사이에서도 굳이

710
00:32:59,309 --> 00:33:01,179
서로 연결할 필요가 없기 때문에

711
00:33:01,179 --> 00:33:05,200
굉장히 확장성에서도 측면에서도 
용이합니다.

712
00:33:05,200 --> 00:33:08,250
자 그리고 마지막으로 
비용적인 측면에서도

713
00:33:08,250 --> 00:33:09,820
고려해 봐야 될 것 같아요.

714
00:33:09,820 --> 00:33:12,740
그러면은 그 저희가 웹 서버는 있지만

715
00:33:12,740 --> 00:33:17,808
웹 애플리케이션을 구동시키기 위한 
웹 애플리케이션 서버 필요없죠.

716
00:33:17,809 --> 00:33:19,830
그다음에 데이터베이스 서버 같은 거 
필요 없죠

717
00:33:19,830 --> 00:33:22,160
뭐 이런 거 여러 가지 이런 것들이
다 필요가 없어요

718
00:33:22,160 --> 00:33:25,400
예를 들어 프록시 서버 같은 것도
별로 필요가 없을 거란 말이예요.

719
00:33:25,580 --> 00:33:29,400
그냥 웹 호스팅만 할 수 있는 아주
단순한 서버만 있으면은

720
00:33:29,410 --> 00:33:30,549
모든 게 다 가능합니다.

721
00:33:30,549 --> 00:33:34,580
즉 기업의 입장에서 웹 사이트를
운영하는 기업의 입장에서도

722
00:33:34,580 --> 00:33:35,580
어떤 비용이라든가

723
00:33:35,580 --> 00:33:36,950
이런 측면에서 봤을 때

724
00:33:36,950 --> 00:33:41,120
굉장히 효과적인 개발 방식이라고
할 수 있겠습니다.

725
00:33:41,120 --> 00:33:45,070
그러면은 제가 여기까지 웹 사이트에 
정적 웹 사이트의

726
00:33:45,070 --> 00:33:47,030
효용 가치에 대해서 말씀을 드렸고요.

727
00:33:47,030 --> 00:33:51,530
다시 이어서 영락님께서 마무리를 
지어 주시겠습니다.

728
00:33:51,530 --> 00:33:56,140
네 정말 다양한 정적 웹 사이트에 
대한 활용 가치가 있네요.

729
00:33:56,140 --> 00:33:58,920
이제 마무리를 하면서 발표를 마치도록 
하겠습니다.

730
00:33:58,920 --> 00:34:01,580
사실 파이썬으로 이제 할 수 있는게

731
00:34:01,580 --> 00:34:05,490
정말 엄청나게 많다라고 다시 한 번 
느끼고 있습니다.

732
00:34:05,490 --> 00:34:08,049
그래서 오늘 이 세션에서는 사실
아까 뭐 여러

733
00:34:08,049 --> 00:34:10,070
사이트를 보였을 때 정적 웹 사이트

734
00:34:10,070 --> 00:34:13,490
동적 웹 사이트 인증 여러 가지가 
있었지만요

735
00:34:13,490 --> 00:34:16,960
이제 프론트엔드 유저 분들께는
사실 이런 정적 웹 사이트

736
00:34:16,960 --> 00:34:19,750
동적 웹 사이트가 저스틴께서 
말씀하셨듯이

737
00:34:19,750 --> 00:34:21,960
뭐 jam 스택이라든가 그런 것 덕분에

738
00:34:21,960 --> 00:34:24,359
요즘 많이 친근한 거 같습니다만은

739
00:34:24,359 --> 00:34:27,480
파이썬 개발자 분들께는 
어떻게 보면은 다소

740
00:34:27,480 --> 00:34:29,550
생소하실 수도 있는

741
00:34:29,550 --> 00:34:32,200
이 정적 웹 사이트 빌더들을 중심으로 
해가지고서

742
00:34:32,200 --> 00:34:35,919
파이썬에서 몇 가지 대중적인 
렉터, 스핑크스

743
00:34:35,919 --> 00:34:40,270
펠리칸 그런 정적 웹 사이트 빌더들을 
먼저 소개 하였고요

744
00:34:40,270 --> 00:34:44,169
이제 이후에 파이썬 개발자 분들도 
손쉽게 연동가능한 ci/cd 환경을

745
00:34:44,169 --> 00:34:48,490
깃허브 액션으로 데모와 
함께 설명드렸고

746
00:34:48,490 --> 00:34:51,300
마지막으로 이 무궁무진한 
클라우드 환경

747
00:34:51,300 --> 00:34:54,810
정말 클라우드 환경에서는 
다양한 활용이 가능하고요

748
00:34:54,810 --> 00:34:56,280
뭐 오늘 보셨던

749
00:34:56,280 --> 00:35:00,104
정적에 대한 부분을 cdn과 
블롭으로 하는 부분을 애저로부터 하는 부분을

750
00:35:00,104 --> 00:35:01,104
azure static web app으로 하는
데모를

751
00:35:01,104 --> 00:35:04,590
ci/cd와 함께 설명하였는데요

752
00:35:04,590 --> 00:35:08,330
그것뿐만 아니라 정말 동적인 부분을
애저 펑션이라든가

753
00:35:08,330 --> 00:35:10,730
서버리스 nosql 등 해가지고

754
00:35:10,730 --> 00:35:13,081
정말 다양한 부분을 ci/cd와

755
00:35:13,081 --> 00:35:15,820
함께 재미있게 활용할 수가 있을 것 
같습니다.

756
00:35:15,820 --> 00:35:19,070
이와 같은 많은 내용들이 점차 변화하는

757
00:35:19,070 --> 00:35:21,140
it 세상 속에서 파이썬 개발자 분들도

758
00:35:21,140 --> 00:35:24,280
더 이상 낯설지 않은 환경이 되기를

759
00:35:24,290 --> 00:35:27,290
조심스럽게 빌고자 합니다.

760
00:35:27,290 --> 00:35:29,690
이상으로 해서 오늘 발표를 
마치고자 합니다.

761
00:35:29,690 --> 00:35:31,540
다시 한번 들어 주셔서 감사하고요

762
00:35:31,540 --> 00:35:34,590
오늘 발표는 아래 언급된 링크를

763
00:35:34,590 --> 00:35:37,810
또는 qr 코드를 통해 가지고서 
받으실 수가 있습니다.

764
00:35:37,810 --> 00:35:41,040
자 이렇게 후원사 발표 세션을 
마치고자 합니다.

765
00:35:41,040 --> 00:35:43,830
앞으로도 마이크로소프트와 파이썬

766
00:35:43,830 --> 00:35:47,510
많은 관심 부탁드리겠습니다. 감사합니다.
고맙습니다.



