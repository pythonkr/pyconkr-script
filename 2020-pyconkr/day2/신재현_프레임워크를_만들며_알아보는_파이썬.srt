1
00:00:11,650 --> 00:00:13,660
제 이름은 신재현이구요

2
00:00:13,710 --> 00:00:19,720
현재 메가존 클라우드에서 클라우드 관리 배포 및
SpaceOne을 개발 중에 있습니다

3
00:00:20,040 --> 00:00:23,910
저희 팀이 만들고 있는 SpaceOne은 오픈소스로 개발 중인데요

4
00:00:23,940 --> 00:00:30,000
그러다보니 자연스럽게 내부적으로 사용할 기능을 PyPI로 공개하는 편입니다

5
00:00:30,240 --> 00:00:35,010
제가 적어놓은 Homi, 오늘 이제 발표할 프레임워크이고요
그 이외에도

6
00:00:35,280 --> 00:00:39,960
gRPC 를 편하게 요청할 수 있는 grpc-requests

7
00:00:40,190 --> 00:00:43,160
그리고 파워포인트를 템플릿화 해서

8
00:00:43,200 --> 00:00:49,930
쉽게 리포팅 같은 것을 제작할 수 있는
PPTT 같은 라이브러리를 현재 관리 중에 있습니다

9
00:00:50,440 --> 00:00:54,800
오늘 발표 주제인 gRPC 프레임워크에 대해 설명하기에 앞서

10
00:00:55,010 --> 00:00:58,780
먼저 gRPC가 어떤 것인지 간단하게 좀 설명을 드리고

11
00:00:58,980 --> 00:01:03,260
그리고 어떤 식으로 기존에는 gRPC를 개발을 했는지

12
00:01:03,980 --> 00:01:06,720
그리고 어떤 부분이 이제 불편해서

13
00:01:06,740 --> 00:01:11,110
gRPC 프레임워크를 개발하게 됐는지 설명을 드릴까 합니다

14
00:01:11,140 --> 00:01:16,470
그리고 마지막으로 이를 위해서 사용하였던
Decorator나 Inspect Module에 대해서

15
00:01:16,500 --> 00:01:19,590
좀 더 자세히 이야기를 해볼까 합니다

16
00:01:19,950 --> 00:01:23,450
먼저 gRPC씨에 대해서 한번 이야기를 해보겠습니다

17
00:01:23,760 --> 00:01:28,340
요즘에 gRPC, gRPC 하면서 많은 업체에서 사용하고 있는데요

18
00:01:28,560 --> 00:01:32,360
gRPC는 구글에서 개발해서 많은 업체에서 사용중인데요

19
00:01:32,390 --> 00:01:37,550
요즘 핫한 Kubernetes
역시 백엔드가 gRPC기반으로 만들어져 있습니다

20
00:01:37,950 --> 00:01:43,800
국내에서도 '타다'나 '뱅크샐러드' 등에서 어떻게 gRPC를 사용했는지

21
00:01:44,100 --> 00:01:46,210
블로그를 통해서 공유를 해주셨고요

22
00:01:46,340 --> 00:01:50,540
저희 SpaceOne 역시 백엔드 API로 gRPC를 채택 중입니다

23
00:01:51,570 --> 00:01:56,210
많은 분들이 gRPC을 채택하게 된 이유는 바로 성능인데요

24
00:01:56,390 --> 00:02:03,160
이 그래프는 어떤 분께서
RESTAPI와 gRPC 의 성능을 측정해서 배포한 것입니다

25
00:02:04,620 --> 00:02:10,230
gRPC 와 REST는 페이로드가 작을 경우에는
그렇게 차이가 나지 않는대요

26
00:02:10,260 --> 00:02:17,290
그런데 페이로드가 굉장히 클 경우에는
대략 2초 정도의 차이가 나는 것을 볼수가 있습니다

27
00:02:18,660 --> 00:02:22,460
이렇게 큰 차이가 나는 가장 큰 이유는 바로

28
00:02:23,980 --> 00:02:30,080
이는 기존의 REST가 JSON이나 XML포맷으로 메시지를 주고받는 것과 달리

29
00:02:30,100 --> 00:02:35,080
gRPC는 ProtoBuf로
메시지를 주고받기 때문에 발생한 차이입니다

30
00:02:35,110 --> 00:02:40,550
일반적으로 JSON에서는 데이터를 주고받을 때 매번 키와 값을 전송합니다

31
00:02:40,780 --> 00:02:46,090
하지만 ProtoBuf는
서버와 클라이언트 모두 어떤 키와 어떤 값이 올지

32
00:02:46,120 --> 00:02:49,690
알고 있기 때문에 이를 간소화시킬 수가 있는데요

33
00:02:49,720 --> 00:02:54,180
가령 Person에서 userName과 favourite_number, interests

34
00:02:54,210 --> 00:02:57,140
보낼 것이라고 서로 알고 있기 때문에

35
00:02:57,170 --> 00:03:02,380
그럼 userName은 1번, favourite_number 2번, interests는 3번이라고

36
00:03:02,400 --> 00:03:06,800
보낸다고 서로 약속을 하는 것이
바로 ProtoBuf 입니다

37
00:03:07,450 --> 00:03:13,480
그래서 이를 이용해서 같은 데이터를
좀 더 적게 보내고 데이터를 처리할 때 역시

38
00:03:14,010 --> 00:03:19,890
별도의 파싱 작업 없이
'1번은 userName이니까 거기에 있는 값을 읽어오면 돼'

39
00:03:19,920 --> 00:03:26,410
이런 식으로 처리하기 때문에 처리 속도 역시
약 20배에서 100배 정도 훨씬 더 빠릅니다

40
00:03:27,280 --> 00:03:30,930
하지만 뭐든지 얻는 게 있으면 잃는 것도 있죠

41
00:03:31,270 --> 00:03:36,160
바로 서버와 클라이언트 모두 동일한 proto파일을 가지고 있고

42
00:03:36,190 --> 00:03:39,720
이를 통해 메시지를 주고받아야 한다는 점인데요

43
00:03:41,110 --> 00:03:48,040
gRPC에서는 이를 조금 더 용이하게 하고자
proto 파일을 빌드하면 stub 파일을 생성해 주고

44
00:03:48,120 --> 00:03:51,680
이는 이제 뒷에서 좀 더 자세하게 설명을 드리겠습니다

45
00:03:52,750 --> 00:03:57,550
일단 간단하게 설명을 드리자면은
이 stub 파일은 일종의 SDK 로서

46
00:03:57,580 --> 00:04:03,680
클라이언트와 서버가 손쉽게 ProtoBuf
메시지를 보내고 받을 수 있도록 도와줍니다

47
00:04:04,900 --> 00:04:08,920
이를 이용하면은 언어에서는 별도의 처리 없이

48
00:04:08,950 --> 00:04:13,950
바로 이제 요청을 주고 받고 해서 정말 RPC처럼

49
00:04:14,590 --> 00:04:16,740
서비스를 개발할 수가 있습니다

50
00:04:17,310 --> 00:04:20,550
그러면 이제 어떻게 ProtoBuf 파일을 작성하고

51
00:04:20,570 --> 00:04:24,660
이를 이용하여 서버를 만드는지 한번 설명을 드리겠습니다

52
00:04:25,450 --> 00:04:30,220
gRPC 서버를 만드는 거는 크게 네 단계로 나눠지는데요

53
00:04:31,180 --> 00:04:34,540
먼저 ProtoBuf 파일을 명세를 합니다

54
00:04:34,570 --> 00:04:39,510
이렇게 할 경우 helloworld,proto 파일이란 결과물이 나오게 되고요

55
00:04:39,840 --> 00:04:43,290
이제 컴파일해서 stub 파일를 만듭니다

56
00:04:43,310 --> 00:04:47,200
파이썬 같은 경우 이를 이용해 stub 파일을 만들면은

57
00:04:47,230 --> 00:04:49,740
이렇게 helloworld_pb2,py

58
00:04:49,760 --> 00:04:57,180
그다음에 helloworld_pb2_grpc,py
이 두개의 파일이 이제 생성이 되고요

59
00:04:58,840 --> 00:05:03,350
그 다음에 이를 이용해서 이제 서비스를 직접 구현을 하면 됩니다

60
00:05:04,300 --> 00:05:09,050
그리고 마지막으로 개발한 서비스를 이제 서버에 등록해서

61
00:05:09,430 --> 00:05:13,060
서버를 실행시키면 gRPC 서버가 완성이 되는 겁니다

62
00:05:13,090 --> 00:05:17,280
그 다음에 이제 단계 단계별로 자세히 설명을 드리겠습니다

63
00:05:18,040 --> 00:05:21,550
제일 먼저 ProtoBuf 파일을 명세를 하면 되는데요

64
00:05:21,580 --> 00:05:26,410
ProtoBuf 파일은 REST API에서 쓰는 Swagger와 굉장히 문장입니다

65
00:05:26,440 --> 00:05:34,490
Swagger도 어떤 요청으로 어떻게 요청을 하면은
어떻게 응답을 할 거야라고 명세를 만들듯이

66
00:05:34,510 --> 00:05:38,290
이제 ProtoBuf 역시 어떤 서비스에 어떤 요청이 있고

67
00:05:38,320 --> 00:05:41,930
어떻게 메시지를 주고받을 거야 라고 명세를 하는 과정입니다

68
00:05:43,660 --> 00:05:46,810
그래서 제일 먼저 ProtoBuf 명세를 할 때는

69
00:05:46,840 --> 00:05:49,280
이 서비스에 어떤 메소드가 있는지

70
00:05:49,300 --> 00:05:54,640
예를 들어서 helloworld라는 패키지에 Greeter라는 서비스에는

71
00:05:54,670 --> 00:05:57,270
총 네 가지의 메소드가 있는데요

72
00:05:57,970 --> 00:06:02,750
SayHello, SayHelloGroup, HelloEveryone, SayHelloOneByOne

73
00:06:02,770 --> 00:06:06,540
이라는 메소드를 지원 할거야 라고 먼저 명세를 하고

74
00:06:07,510 --> 00:06:11,780
그다음에 각각의 메소드들을 어떻게 이제 요청을 하는지

75
00:06:12,610 --> 00:06:14,410
메시지 타입을 이제 적습니다

76
00:06:14,440 --> 00:06:16,830
그런데 보시면 이제 stream 이라고 있는데요

77
00:06:16,850 --> 00:06:21,650
이거는 이제 gRPC에서 요청이 단순히 일회성의 요청이 아니고

78
00:06:21,840 --> 00:06:28,870
stream하는 식으로 여러번 요청을 할 수 있는
기능이 있어서 그거의 스펙을 명시해 주는 것입니다

79
00:06:30,250 --> 00:06:34,580
그리고 이제 어떤 식으로 응답을 받을 수 있는지 메시지 타입을 적고

80
00:06:35,110 --> 00:06:43,110
마지막으로 위에 적은 응답과 요청 메시지 타입의 형식이 어떻게 되는지

81
00:06:43,170 --> 00:06:48,130
하단에 서술 하시면 이제 ProtoBuf가 완성이 됩니다

82
00:06:48,250 --> 00:06:50,920
그래서 지금 현재 서비스 같은 경우에는

83
00:06:50,970 --> 00:06:58,330
HellowRequest의 이름을 받아서
HelloReply에서는 이제 message를 전달해주고

84
00:06:58,350 --> 00:07:05,760
그래서 이 두개의 요청과 응답 메세지를 이용해서
네 개의 서비스를 만든 것을 확인하실 수가 있습니다

85
00:07:06,520 --> 00:07:12,400
이렇게 만든 ProtoBuf 파일를 이제 컴파일해서
stub 파일로 생성을 해야 되는데요

86
00:07:12,700 --> 00:07:16,340
파이썬에서는 grpc_tools라는 패키지를 이용해서

87
00:07:16,370 --> 00:07:22,780
proto 파일을 컴파일 하게 되면은 아래 처럼 두개의 파일이 나오는데요

88
00:07:22,810 --> 00:07:29,520
먼저 이제 _pb2,py 파일은 서비스 및 메시지에 대한
ORM과 유사한 코드가 생성이 되고요

89
00:07:29,850 --> 00:07:35,390
내부적으로는 이를 이용해서 메시지를 직렬화 할 때 사용하게 됩니다

90
00:07:35,680 --> 00:07:38,560
그 다음에 pb2_grpc,py 같은 경우에는

91
00:07:38,580 --> 00:07:43,300
서버와 클라이언트를 구현할 수 있는 이제
헬퍼 클래스 위주로 해서 생성이 되는데요

92
00:07:43,360 --> 00:07:49,150
그래서 보통은 pb2_grpc 파일을 이용해서 서버를 구현하고

93
00:07:49,180 --> 00:07:51,690
혹은 클라이언트를 만들 때 이를 이용해서

94
00:07:51,720 --> 00:07:56,640
서버에 요청을 호출하는 식으로 개발을 하게 됩니다

95
00:07:57,250 --> 00:08:02,840
네, 이렇게 만들어진 stub 파일을 이용해서
이제 서비스를 직접 구현하시면 되는데요

96
00:08:02,860 --> 00:08:06,170
helloworld_pb2_grpc에 파일에는

97
00:08:06,200 --> 00:08:10,720
처음에 명세했던 Greeter 서비스에 대한 헬퍼 클래스가 있고요

98
00:08:10,750 --> 00:08:15,340
이를 이용해서 이제 메소드들을 로직을 채워 넣으면 됩니다

99
00:08:15,880 --> 00:08:20,770
이렇게 만드는 서비스를 이제 마지막으로 서버에 등록을 하게 되면 되는데요

100
00:08:20,980 --> 00:08:26,580
이제 grpc,server 에서 gRPC 헬퍼 함수를 이용해서

101
00:08:26,620 --> 00:08:29,400
GreeterService를 서버에 등록을 하게 되고

102
00:08:29,420 --> 00:08:34,410
그다음 서버를 실행하게 되면 최종적으로 gPRC 서버가 완성되게 됩니다

103
00:08:34,420 --> 00:08:40,700
 얼핏 보면은 뭐 gRPC 서버 만드는데 어렵지 않겠네 하지만은

104
00:08:41,040 --> 00:08:47,680
사실 이걸 하나하나 만들기 시작하면은
뭔가 불편한 점들이 한두개씩 떠오르게 되는데요

105
00:08:48,080 --> 00:08:53,720
가장 먼저 제가 개인적으로 불편 했던 거는 request 객체의 접근성이었습니다

106
00:08:55,680 --> 00:09:02,840
이 서비스는 제가 아까 SayHello에
HelloRequest를 받겠다라고 명세를 했기 때문에

107
00:09:02,920 --> 00:09:07,640
이 request에는 HellowRequest 메시지 타입이 들어오게 될 것입니다

108
00:09:07,680 --> 00:09:13,000
그래서 메시지로 내가 이제 리턴을 보낼 때는 '안녕'하고 들어온 이름을

109
00:09:13,040 --> 00:09:17,680
그대로 내보내려고 하기 때문에 그런 이름을 꺼내올때는

110
00:09:17,680 --> 00:09:23,120
request,name 에서 이름을 가져오면
쉽게 데이터를 꺼내 올수가 있습니다

111
00:09:23,200 --> 00:09:29,040
어 여기까진 좋네 하는데 문제는 이제 여기서부터입니다

112
00:09:29,360 --> 00:09:34,360
제가 코드 안에서 breakpoint를 걸어서 request를 한번 분석해 봤습니다

113
00:09:34,680 --> 00:09:40,760
먼저 일단 request가 어떤 class인지 보고 싶어서 request를 한번 쳐봤는데요

114
00:09:41,840 --> 00:09:47,520
조금 이상합니다, 보통은 어떤 클래스의 객체이다라고 나와 있는 반면에

115
00:09:47,600 --> 00:09:50,880
여기에서는 'name: "tom"'이라고 합니다

116
00:09:51,080 --> 00:09:56,800
일반적으로 굳이 커스텀을 하지 않는
이상은 저런 식으로 이제 구현을 하지 않는데요

117
00:09:57,040 --> 00:10:02,880
그래서 좀 이상하네? 하면서 request,name 을 했을때는
값이 정상적으로 들어옵니다

118
00:10:04,440 --> 00:10:09,800
그리고 나서 이제 그럼 이 request에는
어떤 attribute가 있는지 내용을 쭉 살펴봤는데요

119
00:10:10,000 --> 00:10:17,360
네 그래서 이번에는 한번 ListFields를 이용해서
어떤 필드들이 있는지 한번 보려고 테스트를 해봤습니다

120
00:10:19,320 --> 00:10:23,160
그런데 이제 ListFields를 했는데 제가 이제 생각했던 거는

121
00:10:23,160 --> 00:10:31,080
뭔가 dict 안에 키-값이 같이 있거나
혹은 list 에 키-값에 대한 묶음들이 있거나

122
00:10:31,080 --> 00:10:33,960
그런 결과물을 생각을 했었는데요

123
00:10:34,160 --> 00:10:39,320
이제 막상 ListFields를 해보니 뭔가 이제 FieldDescriptor라는

124
00:10:39,320 --> 00:10:43,320
객체가 있고 그 다음에 값이 들어있는 것을 볼 수가 있었습니다

125
00:10:43,360 --> 00:10:49,200
그래서 만약에 내가 이 request를 받아서
이 내용을 이제 dict로 만들고 싶어 했을 때는

126
00:10:49,240 --> 00:10:53,600
아래처럼 이제 필드의 첫번째에서

127
00:10:53,640 --> 00:10:56,320
name을 꺼내와서 키를 가져오고

128
00:10:56,320 --> 00:11:02,360
그 다음에 두 번째 인자는 값으로 해서 dict를 만드는 과정을 붙이거나

129
00:11:02,480 --> 00:11:05,960
혹은 이제 protobuf에서 제공하는 MessageToDict라는

130
00:11:06,000 --> 00:11:08,880
함수를 이용해서 dict를  만들어야 했습니다

131
00:11:09,200 --> 00:11:14,600
하지만 이 부분은 개인적으로 매번 request를 dict 처럼 보고 싶을 때는

132
00:11:14,640 --> 00:11:19,640
이러한 작업을 해야 되는 것이 불편하지 않을까? 라는 고민을 하게 됐고요

133
00:11:20,400 --> 00:11:29,640
물론 이또한  gRPC 특징이다 보니 이것을 어떻게
파이써닉하게 풀어 볼수 있을까라고 고민을하게 됬습니다

134
00:11:30,800 --> 00:11:39,080
또한 간단한 메세지에서는 상관없지만 중첩된 메세지를
직렬화 할 때는 또 다른 문제가 있는데요

135
00:11:39,440 --> 00:11:46,600
바로 이제 매번 직렬화하기 편하도록 이렇게
make_server_nic 그 다음에 make_server_info 해서

136
00:11:47,040 --> 00:11:52,280
pb2에 있는 메시지 타입별 치환해주는 작업을 매번 해줘야 합니다

137
00:11:52,560 --> 00:11:59,000
그런데 보통은 이렇게 몇 단계
중첩된 메시지 구조를 많이 가지고 있기 때문에

138
00:11:59,120 --> 00:12:04,280
매번 이거를 작성을 해서 바로 메시지를 직렬화 시키고

139
00:12:04,320 --> 00:12:08,800
그걸 또 리턴으로 보내는 작업을 반복해야 한다는 점이

140
00:12:08,840 --> 00:12:17,360
어 이거 생각보다 불편하고 사람이 해야 할 작업이
너무 많은데? 라는 두 번째 고민을 가지게 됐고요

141
00:12:18,160 --> 00:12:24,120
마지막으로 복잡한 서비스 등록 역시
뭔가 이제 예를 들어서

142
00:12:24,120 --> 00:12:27,520
제가 Flask나 아니면 이제 Django 같은 걸 하면은

143
00:12:27,560 --> 00:12:33,520
그냥 개발한걸 앱에 추가하거나 혹은 데코레이터 하나만 달아주면

144
00:12:33,560 --> 00:12:38,720
자동으로 서버가 그걸 이제 읽어와서 서버를 실행을 시키는데

145
00:12:38,720 --> 00:12:44,360
gRPC 같은 경우에는 서버를 만들고 이거를 stub 파일을 이용해서

146
00:12:44,360 --> 00:12:51,360
add_GreeterService_to_server라는 특정 서비스만
서버에 등록할 수 있는 메소드를 이용해서

147
00:12:51,640 --> 00:12:57,440
개발한 서비스를 넣고 이걸 서버에 등록하는
복잡한 과정을 매번 진행을 했어야 했습니다

148
00:12:57,440 --> 00:13:03,080
그래서 서비스가 많으면 많아질수록 굉장히 요런 작업들이 복잡해지고

149
00:13:03,600 --> 00:13:09,760
이것 역시 뭔가 서버를 개발하는 데 있어서 익숙하지 않고
그 다음에

150
00:13:09,800 --> 00:13:18,120
좀 헷갈려서 실수를 유발하게 하는 부분이지 않을까라고
개인적으로 생각을 하게 됐습니다

151
00:13:20,120 --> 00:13:26,920
이러한 고민을 바탕으로 사람을 위한 쓰기 편한
gRPC 프레임워크를 만들게 되었는데요

152
00:13:27,560 --> 00:13:30,360
네, 바로 오늘의 주제인 Homi입니다

153
00:13:30,840 --> 00:13:34,920
Homi는 Flask와 유사한 인터페이스를 가진 프레임워크로서

154
00:13:35,680 --> 00:13:41,160
정말로 로직만 집중해서 서비스를 개발할 수 있도록 노력을 하였습니다

155
00:13:43,240 --> 00:13:47,960
Homi는 아까 설명했던 과정 중에서 모든 것을 다 커버리지 하진 않고요

156
00:13:48,280 --> 00:13:53,200
기존의 ProtoBuf를 명세하고 컴파일을 하는데 까지는 기존처럼 하지만

157
00:13:53,480 --> 00:13:57,600
서비스를 구현하고 서비스를 서버에 등록하는 과정은

158
00:13:57,640 --> 00:14:00,840
Homi가 이제 모두 알아서 똑똑하게 처리를 해서

159
00:14:01,680 --> 00:14:05,480
개발자는 딱 로직만 개발하면 될 수 있도록 만들었습니다

160
00:14:06,560 --> 00:14:11,560
Homi의 가장 큰 특징 중 하나는 바로 Plugable Sturct인데요

161
00:14:11,800 --> 00:14:16,760
왜냐하면 개인적으로 프레임워크는 에코 시스템이 중요하다고 생각하기 때문에

162
00:14:16,760 --> 00:14:22,920
누구나 다른 사람이 만든 서비스를 쉽게 추가하고
설정을 Override 할수 있는

163
00:14:23,040 --> 00:14:28,280
구조를 가져야만 프레임워크가 좀 더 크게 성장할 수 있다고 생각을 하였습니다

164
00:14:28,320 --> 00:14:33,880
그래서 이제 보시는 것 처럼 reflection_service를
다른 사람이 만든 서비스를 등록을 하고 거기에

165
00:14:33,880 --> 00:14:39,320
거기에 config만 추가를 하면 알아서 뭔가 작동이 되는 걸 추가 할 수가 있고요

166
00:14:42,080 --> 00:14:50,880
그 이외에도 여러 서비스를 추가해서 뭔가 이제
플러그인처럼 쓸 수 있도록 구성을 했었습니다

167
00:14:51,440 --> 00:14:57,400
또한 기존에 이제 클래스를 상속받아서 구현하는 방식을 데코레이터를 활용하여서

168
00:14:57,440 --> 00:15:01,480
메소드를 등록하는 방식으로 바꾸었는데요

169
00:15:01,520 --> 00:15:06,520
이렇게 하게 되면 별도의 grpc 파일을 import 하지 않더라도

170
00:15:07,080 --> 00:15:08,840
그냥 내가 함수를 만들어서

171
00:15:08,880 --> 00:15:13,680
등록만 하면 알아서 이제 찾아서 이 서버가 작동되기 때문에

172
00:15:13,680 --> 00:15:16,560
사용자 입장에서는 굉장히 편리한 부분이 있습니다

173
00:15:17,440 --> 00:15:22,160
하지만 큰 서비스를 개발할 때는 파일 하나 에다가

174
00:15:22,200 --> 00:15:24,600
저렇게 데코레이터 형식으로 개발하기 굉장히 힘든 부분이 있는데요

175
00:15:24,960 --> 00:15:30,240
Flask에서는 이를 Blueprint라는 개념을 이용해서 해결하였고

176
00:15:30,280 --> 00:15:34,600
저 역시 Blueprint와 유사한 Service란 class를 활용을 해서

177
00:15:34,600 --> 00:15:37,320
다른 파일에서 메소드를 등록을 시키고

178
00:15:37,360 --> 00:15:42,200
이거를 이제 앱에 추가할 수 있는 것으로 개발을 하였습니다

179
00:15:42,200 --> 00:15:47,480
이거는 아까 앞에 말했던 Plugable Struct와 관계가 있는 기능으로서

180
00:15:47,480 --> 00:15:58,520
이를 이용해서 Plugable Struct 구조도 만들 수 있고 Blueprint요소도
도입할 수 도 있고 일석이조 장점이 있었습니다

181
00:15:59,200 --> 00:16:02,400
그리고 이 부분은 어떤 편의 기능인데요

182
00:16:02,440 --> 00:16:07,640
예를 들어서 HelloRequest에 나는 name이라는 걸 받을 거야라고

183
00:16:07,680 --> 00:16:10,440
명세를 했었기 때문에

184
00:16:10,480 --> 00:16:16,080
기존에는 request를 보는게 아니고
'name만 받고 싶어'라고 메소드에 등록을 하면은

185
00:16:16,240 --> 00:16:22,440
알아서 딱 name만 떨궈 주는 기능을 추가하였습니다
그래서 별도의

186
00:16:22,480 --> 00:16:29,480
MessageToDict 이런걸 이제 돌리지 않고도
바로 바로 로직을 개발할 수 있도록 하였구요

187
00:16:31,280 --> 00:16:37,000
마찬가지로 서버에서 클라이언트에 값을 제공하는 부분에 있어서도

188
00:16:37,040 --> 00:16:46,240
기존에는 pb2 파일에서 해당 메세지 클래스에다가
직접 "message=" 해서 전송작업을 했다면

189
00:16:46,240 --> 00:16:50,040
이제는 dict만 넘겨줘도 알아서 저렇게

190
00:16:50,120 --> 00:16:55,800
HelloReply 같은 메시지 serialize 처리를
자동으로 할 수 있도록 만들었습니다

191
00:16:56,840 --> 00:17:03,240
마지막으로 불편했었던 서버에다가 서비스도 매번 등록하는 과정을 없애서

192
00:17:03,320 --> 00:17:06,560
단순히 app을 server에 추가만 시켜주면은

193
00:17:06,600 --> 00:17:14,320
바로 지금 저희가 아까 메소드로 등록했던 것들이나
서비스들을 찾아서 자동으로 등록을 시켜줍니다

194
00:17:14,360 --> 00:17:16,760
그래서 이제 서버를 실행시킬 수 있게 했고요

195
00:17:18,120 --> 00:17:23,200
이를 통해서 지금 보시는 것처럼 기존에는 이렇게 이제

196
00:17:23,240 --> 00:17:28,160
GreeterService를 상속받아서 request에서 직접 메세지를 꺼내오고

197
00:17:28,360 --> 00:17:32,320
그 다음에 리턴할때도 매번 HelloReply에다가

198
00:17:32,360 --> 00:17:35,040
이렇게 임의로 값을 넣었줬던 것을

199
00:17:35,080 --> 00:17:39,800
단순히 이제 dict로 값이 넘겨지면 자동으로 처리해주고

200
00:17:39,800 --> 00:17:44,880
그 다음에 request도 별도의 파싱 없이 'name' 해서 바로 직접 가져올 수 있게

201
00:17:44,920 --> 00:17:48,240
구현을 하게 되었습니다
그래서 실질적으로 두개의 파일이

202
00:17:48,280 --> 00:17:54,840
이제 하나로 합쳐짐에도 불구하고
굉장히 단순한 구조를 가져 갈 수 있게 됐는데요

203
00:17:56,000 --> 00:18:02,120
물론 이런 마법 같은 일들은
당연히 손쉽게 얻어낼 수 있는 건 아니었고요

204
00:18:02,160 --> 00:18:07,880
지금 부터 이제 설명할 데코레이터와 inspect 모듈을 이용해서
구현을 할수가 있었습니다

205
00:18:08,640 --> 00:18:13,560
데코레이터 하면은 일반적으로 함수가 실행하기 전에

206
00:18:13,600 --> 00:18:20,480
혹은 후에 뭔가를 작동하는 로직을 손쉽게 넣을 수 있는
방법이라고 많이들 생각하시는데요

207
00:18:21,600 --> 00:18:26,280
일반적으로 주로 사용하는 것이 이와같은 데코레이터입니다

208
00:18:26,320 --> 00:18:31,760
그래서 이제 뭔가 함수가 실행되기 전에
로직을 이제 실행을 하고 함수가 끝난 후에

209
00:18:31,800 --> 00:18:37,280
별도의 로직을 실행하고 뭐 이런 데코레이터를 다른 함수에 달아서 쉽게

210
00:18:37,320 --> 00:18:41,800
뭔가 이제 반복되는 작업을 추가할 수 있는 구조이고

211
00:18:41,880 --> 00:18:46,360
그래서 실제로 이제 func_a를 실행시켜 보면은

212
00:18:46,400 --> 00:18:53,120
기존의 func_a에 없는 "before function call"이 print되고
"after function call"이 print 되는 것을 보실 수가 있습니다

213
00:18:53,120 --> 00:18:56,640
이게 일반적인 데코레이터의 사용법이고요

214
00:18:56,640 --> 00:19:01,000
하지만 이외에도 다양한 방식으로 데코레이터를 사용할 수가 있는데요

215
00:19:01,200 --> 00:19:08,400
가령 functiontools의 lru_cache 같은 경우에는 이함수의 결과값을
캐싱하는데 데코레이터를 활용하고요

216
00:19:09,040 --> 00:19:14,240
저희가 흔히 하는 Flask 같은 경우에는
특정 route에 이 함수를 실행시켜줘 라고

217
00:19:14,280 --> 00:19:17,000
명세를 할때하는 데코레이터를 씁니다

218
00:19:17,040 --> 00:19:21,640
그리고 Kubernetes에서 쉽게 controller를 만들 수 있는

219
00:19:21,760 --> 00:19:24,040
kopf 라는 프레임워크가 있는데요

220
00:19:24,080 --> 00:19:28,640
여기 역시 뭔가 이제 Kubernetes에서 리소스가 생성됐을 때

221
00:19:28,680 --> 00:19:32,920
혹은 이 Kubernetes controller daemon을 만들고 싶을 때

222
00:19:32,960 --> 00:19:38,320
데코레이터를 활용 해서 메소드를 등록하는 방법을 취하고 있습니다

223
00:19:38,360 --> 00:19:44,000
그 외에도 Chalice라는 AWS의 Serverless 프레임워크가 있는데요

224
00:19:44,040 --> 00:19:46,160
여기 역시 Flask 처럼

225
00:19:46,200 --> 00:19:50,520
Router에다가 어떤 메소드를 등록해두고 사용하고

226
00:19:50,560 --> 00:19:53,800
혹은 S3 에서 어떤 이벤트가 들어왔을 때

227
00:19:53,840 --> 00:19:58,840
이 함수 실행해
혹은 schedule로 몇 분이 지났을 때

228
00:19:58,880 --> 00:20:07,000
이 함수를 실행해 라고 뭔가 자기만의 리소스를
파이썬 함수에다가 녹이는 방식을 채택하고 있습니다

229
00:20:07,720 --> 00:20:11,160
이게 가능한 이유는 바로 데코레이터의 평가 시점인데요

230
00:20:12,280 --> 00:20:15,480
오른쪽과 왼쪽 비슷하지만 다른 코드가 있습니다

231
00:20:16,480 --> 00:20:22,040
왼쪽 같은 경우에는 일반적으로 함수를 wrapper, wrapped

232
00:20:22,040 --> 00:20:29,640
함수 하나씩 실행하는 방식이고요, 그래서 func_a를
실행하면은 그것들이 같이 실행이 됩니다

233
00:20:30,440 --> 00:20:33,560
하지만 오른족 같은 경우에는 약간 다른데요

234
00:20:33,560 --> 00:20:39,840
바로 이제 import를 한 시점에서 "func name" 이라는 게
실행되는 것을 볼 수가 있습니다

235
00:20:39,840 --> 00:20:44,000
그리고 func_a를 직접 실행 했을 때는 그냥 일반적인 결과가 같구요

236
00:20:45,160 --> 00:20:48,640
이 데코레이터의 차이는 바로 이제 이 부분인데요

237
00:20:48,680 --> 00:20:54,080
먼저 첫 번째 코드 같은 경우에는 기본적으로 데코레이터로 감쌌을 때는

238
00:20:54,080 --> 00:20:57,760
최종적으로 오른쪽과 같은 코드의 결과를 얻게 됩니다

239
00:20:57,800 --> 00:21:03,640
이제 func_a의 실행 코드 앞뒤로 어떤 것들이 추가되는 것이고요

240
00:21:04,960 --> 00:21:08,800
반면 두 번째 같은 경우에는 약간 다른 양상입니다

241
00:21:08,840 --> 00:21:12,800
왜냐하면 import를 했을때 'func name'이 실행이 되는건데요

242
00:21:13,080 --> 00:21:17,000
이 부분은 이제 오른쪽보다 약간 헷갈리실 수도 있는데

243
00:21:17,480 --> 00:21:23,880
이 func_a라는 것을 호출할 때 데코레이터라는 함수가 이미 실행이 되고

244
00:21:24,040 --> 00:21:30,000
그 다음에 이제 func_a 내용이 실행할 수 있는 함수가 추가되는 방식입니다

245
00:21:30,280 --> 00:21:37,320
자 이 말은 어떤 파일을 import를 했을 때 코드를 실행할 수가 있다는 뜻이고요

246
00:21:37,520 --> 00:21:45,840
이를 이용해서 이제 아까 다른 프레임워크들은
모두 이 시점에서 함수들을 등록하는 방식을 취합니다

247
00:21:46,080 --> 00:21:48,840
저 역시 이러한 방식을 채택을 하였구요

248
00:21:49,400 --> 00:21:55,760
그래서 여기에 간단한 샘플 코드 입니다
예를 들어서 operator에 dict 해서

249
00:21:55,760 --> 00:22:04,040
그냥 빈 dict를 만들고 나서 이 operator 에다가
메소드를 등록해주는 데코레이터를 하나 만듭니다

250
00:22:05,000 --> 00:22:09,080
보시면 이제 "operator[name] = func" 해서 등록을 시켜주고요

251
00:22:09,120 --> 00:22:12,440
그다음 등록했다고 print 구분을 찍어주게 됩니다

252
00:22:12,480 --> 00:22:17,920
그리고 list_operator는 이 등록된 operator 목록을 보여주는 것이고요

253
00:22:18,200 --> 00:22:22,800
그래서 각각 add와 substract 메소드를 등록시켜줍니다

254
00:22:23,320 --> 00:22:28,520
요거를 실제로 import 했을 때 바로 "register operator : add"

255
00:22:28,560 --> 00:22:30,920
그 다음 substract 하고 print가 되고요

256
00:22:30,960 --> 00:22:37,040
이 말은 이제 import를 하는 시점에서 이 메소드들이
operator에 등록되었다는 뜻입니다

257
00:22:38,400 --> 00:22:45,000
그렇게 되면 이제 sample,list_operator() 하면은
이제 add와 substract가 등록돼있는 것을 보실 수가 있습니다

258
00:22:45,320 --> 00:22:51,680
이를 이용해서 다른 분들도 예를 들어서 내가 이런 확장

259
00:22:52,960 --> 00:22:55,080
Plugable 가능한 구조를 만들거나

260
00:22:55,120 --> 00:22:59,680
아니면 뭔가 Flask 처럼 만들고 싶을게 있을때 데코레이터 방식을 활용해서

261
00:22:59,720 --> 00:23:05,240
파일이 임포트되는 시점에

262
00:23:05,280 --> 00:23:07,280
어떤 로직을 추가할 수가 있습니다

263
00:23:07,880 --> 00:23:10,680
네 그리고 이제 마지막으로 inspect 모듈 인데요

264
00:23:11,240 --> 00:23:15,560
inspect 모둘은 다음과 같은 상황에서 활용할 수가 있습니다

265
00:23:15,600 --> 00:23:20,000
이거는 Flask에서 일반적으로 쓰는 방식인데 route에다가

266
00:23:20,040 --> 00:23:22,760
꺽쇠를 해서 username이라고 인자를 받고

267
00:23:22,800 --> 00:23:27,080
이거를 메소드에서 username이라고 봐서 직접 사용하는 방식입니다

268
00:23:27,560 --> 00:23:29,960
예를 들어서 이거는 하기 나름인데요

269
00:23:30,000 --> 00:23:35,200
<i> 해서 요거를 int로 받을 거야 라고
하면은 알아서 파싱도 할 수도 있고요</i>

270
00:23:35,440 --> 00:23:40,360
이 부분은 Homi에서 auto arguments parser와

271
00:23:40,400 --> 00:23:42,960
에서 사용한 기술과 똑같은 건데요

272
00:23:43,440 --> 00:23:47,600
ProtoBuf에서 HelloRequest에 name이라고 받을 것이라고 명세를 했기 때문에

273
00:23:47,640 --> 00:23:53,480
이미 이제 개발자는 나는 이거 name으로 받을거야 라고 알고 있는 상황입니다

274
00:23:53,480 --> 00:23:58,120
그렇기 때문에 request를 받았을 때 이 name 부분을

275
00:23:58,160 --> 00:24:07,240
사용자가 name 이라고 적은 인자 에다가 자동으로 넣어주는 것을 inspect 모듈로 하는거구요

276
00:24:07,640 --> 00:24:12,040
inspect 모듈은
이거는 파이썬 문서에서 그대로 가져온 문서이구요

277
00:24:12,080 --> 00:24:17,640
가장 큰 특징은 라이브 객체에 대해서 정보를 얻어 올 수 있다는 것입니다

278
00:24:18,080 --> 00:24:21,480
파이썬의 인터프리터 언어이기 때문에 가능한 부분이고

279
00:24:21,520 --> 00:24:27,240
다른 언어에서는 조금 이제 하기 힘든 기능이지만 파이썬은 가능하기 때문에

280
00:24:27,280 --> 00:24:31,880
이거를 적극적으로 활용해서 사용자의 편의성을 높이려고 했는데요

281
00:24:31,920 --> 00:24:38,280
이 중에서 이제 저희가 필요한 기능은
바로 함수 인자의 리스트를 추출하는 것입니다

282
00:24:38,320 --> 00:24:44,480
그래서 함수에 어떤 인자들이 있고 그러면은 이 인자들에 맞춰서 request 데이터를

283
00:24:44,480 --> 00:24:48,040
파싱한 결과를 가져다가 매칭해서 보내주면 되기 때문입니다

284
00:24:48,440 --> 00:24:54,640
그래서 한 번 직접 함수를 갖다가 inspect 모듈를 이용해서 분석을 해봤는데요

285
00:24:54,840 --> 00:25:00,480
먼저 간단한 함수를 만들었고요
여기에는 position_arg, keyword_arg

286
00:25:01,040 --> 00:25:04,040
해서 총 세 가지가 있고요

287
00:25:04,240 --> 00:25:08,880
이걸 signature라는 함수에다가 function을 넣었습니다

288
00:25:09,200 --> 00:25:17,000
그러면은 이 signature 함수는 이 function에 있는
메타데이터를 모두 분석을 해서 파싱하기 쉽게

289
00:25:17,040 --> 00:25:19,520
가져오기 쉽게 분석을 다 해주는 거고요

290
00:25:19,560 --> 00:25:25,280
그러면 이제 이 meatadata,parameters 에는
어떠한 인자들이 있는지 알 수가 있습니다

291
00:25:25,280 --> 00:25:31,960
그래서 위에 function에다 적은 position, keyword argument
이런 것들을 모두 읽는 걸 확인하실 수가 있고요

292
00:25:32,120 --> 00:25:37,760
그리고 keyword_arg에 대한 annotation이 어떤 클래스인지도 다 알 수가 있습니다

293
00:25:38,000 --> 00:25:43,320
Flask 같은 경우에는 예를 들어서 post_id를 int로 받을 거야라고 하면은

294
00:25:43,520 --> 00:25:50,760
이 inspect 모듈을 직접 쓰는 건 아니겠지만
keyword argument에다가 int로 parsing해서 보내주는것도

295
00:25:50,800 --> 00:25:54,960
이거와 연관된 기능이라고 생각하시면 될 것 같습니다

296
00:25:55,000 --> 00:25:59,960
네 그래서 이제 데코레이터와 inspect 모듈을 섞어서

297
00:26:00,000 --> 00:26:01,640
한번 Homi와 비슷한 코드를 만들어 봤는데요

298
00:26:02,960 --> 00:26:10,120
register_operator는 기존의 데코레이터에서 설명드렸던 코드와 동일하구요
이 wrapped 부분이 중요합니다

299
00:26:10,160 --> 00:26:16,160
지금 여기 wrapper에서는 show_name을 하고 나서

300
00:26:16,200 --> 00:26:21,400
이름이 있을 경우에는 해당 이름을 print하고 없을 때에는

301
00:26:21,440 --> 00:26:24,280
name not found를 출력을 하겠습니다

302
00:26:24,320 --> 00:26:27,240
그리고 나서 register_operator 등록을 했고요

303
00:26:27,280 --> 00:26:30,400
그리고 이제 데코레이터에선 이거를 wrapping하는 시점에 있어서

304
00:26:31,400 --> 00:26:38,080
이제 여기에서 signature를 이용해서 함수에 있는 argument 정보를 모두 좀 주춤합니다

305
00:26:38,120 --> 00:26:43,760
그렇게 되면 이 함수는 어떤 인자, 예를 들어 여기 같은 경우는
name이라는 인자가 있다는 걸 알 수가 있겠죠

306
00:26:44,120 --> 00:26:49,240
그러면 이제 요거를 매핑한 데코레이터 에서는

307
00:26:49,280 --> 00:26:54,480
wrapped 함수 에서는 request가 들어왔을때 이 request에 만약에

308
00:26:54,520 --> 00:26:56,520
name이라는 것이 있으면

309
00:26:56,560 --> 00:26:59,640
그거를 그 name만 추출해서 보내주고

310
00:26:59,960 --> 00:27:05,600
없으면은 그냥 None 이 되겠죠
이런 식으로 해서 function을 실행 하게 됩니다

311
00:27:05,600 --> 00:27:11,760
그러면 지금 결과를 보면 operator에
show_name이 함수가 있을 거고요

312
00:27:11,880 --> 00:27:17,200
그 함수의 name이 sinsky라 했을땐 sinsky가 출력이 되고
그 다음에

313
00:27:17,240 --> 00:27:21,640
name이란 값이 없을 때는 name not found가 출력되는 걸 보실 수가 있습니다

314
00:27:21,680 --> 00:27:25,480
이렇게해서 데코레이터와 inspect 모듈을 활용하면은

315
00:27:25,520 --> 00:27:33,600
사용자가 좀 쉽게 프레임워크를 쓸 수 있도록 개발이 가능한 조합을 구현할 수 있습니다

316
00:27:34,200 --> 00:27:37,840
이렇게 해서 이제 Homi라는 프레임워크를 만들게 됐고요

317
00:27:37,840 --> 00:27:42,760
저처럼 다양한 분야에서 다양한

318
00:27:42,800 --> 00:27:46,120
새로운 분야에서 뭔가 어렵게 개발하시는 부분이

319
00:27:46,160 --> 00:27:51,360
요런 이제 파이썬의 기능을 적극적으로 활용하셔서 뭔가 파이써닉한

320
00:27:51,400 --> 00:27:54,760
개발도구를 만드는 데 도움이 되었으면 합니다

321
00:27:55,160 --> 00:28:00,680
그럼 모두 이제 파이써닉하게 코딩 하시고요

322
00:28:00,680 --> 00:28:01,680
오늘 발표를 들어주셔서 정말 감사합니다

