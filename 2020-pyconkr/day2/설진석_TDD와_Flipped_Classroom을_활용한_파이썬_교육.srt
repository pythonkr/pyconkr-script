1
00:00:10,150 --> 00:00:12,676
예 안녕하세요. 저는 설진석이고요

2
00:00:12,700 --> 00:00:18,410
이번 파이콘에서 TDD와 Flipped Classroom을 활용한
파이썬 교육에 대해서 발표를 하게 되었습니다

3
00:00:18,801 --> 00:00:20,536
발표 목차는 다음과 같습니다

4
00:00:20,560 --> 00:00:25,906
간단한 개요가 있고, 이렇게 다소
특수한 파이썬 교육을 하게 된 배경을 설명드린 후에

5
00:00:25,930 --> 00:00:32,867
Flipped Classroom과 TDD-like 실습이 각각 어떤것이고
어떻게 적용했는지를 설명 한 후 마무리를 하도록 하겠습니다.

6
00:00:33,040 --> 00:00:37,141
우선 본 발표는,
Flipped Classroom을 통한 파이썬 이론 교육,

7
00:00:37,166 --> 00:00:40,571
그리고 TDD를 활용한 파이썬 실습 교육에 대해서 다룹니다.

8
00:00:40,750 --> 00:00:44,609
발표자인 저는 현재 대학원에서 박사과정을 하고 있구요,

9
00:00:44,656 --> 00:00:46,991
파이썬 수업에는 조교로 참여를 했습니다.

10
00:00:47,398 --> 00:00:51,358
이렇게 다소 특수한 파이썬 교육을
하게 된 배경에 대해 설명을 드리자면,

11
00:00:51,430 --> 00:00:55,115
우선 이 수업은 "컴퓨터의 개념 및 실습"이라는 과목이며,

12
00:00:55,140 --> 00:00:59,359
보통 학부 1학년들이 가장 처음 접하게되는 프로그래밍 과목입니다.

13
00:01:00,160 --> 00:01:05,613
그 중에서도, 특수하게
비공대생만 수강 할 수 있는 분반이었기 때문에,

14
00:01:05,644 --> 00:01:08,901
프로그래밍을 처음 배우는 사람들이 주 대상이었습니다.

15
00:01:09,310 --> 00:01:12,911
그렇기 때문에 교수법에 신경을 많이 쓰게 되었습니다.

16
00:01:13,090 --> 00:01:15,504
Flipped classroom의 개념을 설명하기 앞서,

17
00:01:15,529 --> 00:01:19,771
다소 일반적인 교육 방법론에 대해 조금 설명을 드리고자 하는데요,

18
00:01:19,886 --> 00:01:25,036
강의를 듣거나 다른 교재를 읽는것을 패시브한 활동,

19ㄹ
00:01:25,060 --> 00:01:29,794
그리고 토론을 하거나 다른 사람을 가르치는 것을 액티브한 활동이라고 할 때,

20
00:01:30,100 --> 00:01:35,717
액티브한 활동이 직관적이게도 패시브한 활동보다 리텐션이 훨씬 높습니다.

21
00:01:35,787 --> 00:01:38,254
피라미드에서 아래에 있는 내용인데요

22
00:01:38,590 --> 00:01:43,965
즉, 수강생의 집중도가 올라가고 학습 효과가 그만큼 크다는 뜻입니다.

23
00:01:44,170 --> 00:01:47,896
따라서 액티브한 활동의 비중을 늘리는것이 중요합니다.

24
00:01:47,920 --> 00:01:53,326
그러면 어떻게 하면 효율적으로 액티브한 활동의 비중을 늘릴 수 있을까요?

25
00:01:53,350 --> 00:01:56,986
일반적인 수업 진행 방식을 보면, 왼쪽 그림과 같이

26
00:01:57,010 --> 00:02:00,510
강의 시간에는 패시브한 이론 교육을 주로 하게 되고,

27
00:02:00,535 --> 00:02:05,144
개인 시간에 과제나 복습을 하면서 액티브한 활동을 하게 됩니다.

28
00:02:05,949 --> 00:02:13,278
그런데 어쩌면, 강의 시간에 액티브한 활동을 하는것이
좀 더 좋지 않을까? 하는 생각을 해볼 수 있습니다.

29
00:02:13,480 --> 00:02:19,753
수강생들끼리 토론을 할 수도 있고
강의자에게 직접 수시로 질문을 한다거나 할 수 있기 때문입니다.

30
00:02:20,229 --> 00:02:25,821
그래서 강의 시간과 개인 시간에 이뤄지는 교육 활동을,

31
00:02:25,846 --> 00:02:30,783
오른쪽 그림과 같이 서로 뒤바꿔서 해보자는 것이 바로 flipped classroom입니다.

32
00:02:30,853 --> 00:02:35,356
강의 시간에는 토론과 활동 같은 액티브한 활동을 하게 되었고

33
00:02:35,380 --> 00:02:41,776
개인시간에 이론 교육 패시브한 활동을 하게끔
그렇게 flipped classroom을 구현을 하게 되었구요

34
00:02:41,801 --> 00:02:47,626
저희 수업에서는 이 flipped classroom을
적용하기 위해 다음과 같은 방식을 사용했습니다

35
00:02:47,650 --> 00:02:53,626
우선 강의전 숙제의 형태로 강의 비디오를 시청해 오게끔 한 후에

36
00:02:53,728 --> 00:02:58,186
강의 시작 직후 그 강의 비디오에 대한 퀴즈를 봅니다

37
00:02:58,210 --> 00:03:02,303
강의 비디오 시청하는 것은 일종의 패시브 활동이라고 볼 수가 있고

38
00:03:02,444 --> 00:03:07,920
퀴즈를 보는 것은 복습을 겸하는 일종의 액티브 활동이라고 할 수가 있습니다

39
00:03:08,020 --> 00:03:13,895
그리고 실제 강의 시간에는 퀴즈풀이와 디스커션 질의 응답 등을 진행을 합니다

40
00:03:13,949 --> 00:03:20,105
예를들어 강의 비디오의 내용이 for loop의 개념과 파이썬에서의 for문 문법일때,

41
00:03:20,130 --> 00:03:22,216
낼 수 있는 퀴즈의 예시로는

42
00:03:22,240 --> 00:03:26,656
예를 들면 올바른  for문 문법을 사용하는 방법에 대한 문제나

43
00:03:26,680 --> 00:03:33,256
아니면 주어진 코드를 보고 이거 코드에서  for문의
반복 시행 횟수 아이터레이션이 몇 번 일어났는지

44
00:03:33,280 --> 00:03:36,397
그런 것들을 계산해보는 문제 같은 거를 낼 수가 있습니다

45
00:03:36,422 --> 00:03:40,601
이 퀴즈들의 목표는 강의 비디오를 잘 신청했는지 체크하고

46
00:03:40,626 --> 00:03:43,726
동시에 복습효과를 줄 수 있게끔 하는 것입니다

47
00:03:43,750 --> 00:03:48,766
디스커션의 경우 강의 비디오 내용보다 조금 더 심화된 주제를 다루게 되는데요

48
00:03:48,790 --> 00:03:55,101
학생들이 각자 고민해보거나 그룹토론을 통해서
보다 심층적인 이해를 할 수 있도록 돕는 역할입니다

49
00:03:55,330 --> 00:04:02,955
그러한 고민의 결과는 발표를 제가시키기 때문에
남을 가르쳐본다라는 액티브 활동의 일종이 될 수 있습니다

50
00:04:03,820 --> 00:04:09,663
한편으로 프로그래밍을 공부하다 보면 이건 왜
이렇게 되는 거지라는 궁금증이 종종 생기는데요

51
00:04:09,688 --> 00:04:13,375
그런 것들을 해결하면서 배우게 되는 것들이 되게 많습니다

52
00:04:13,630 --> 00:04:17,566
그래서 디스커션 수업에서는 그렇게 궁금할 수 있을 법한 물음들

53
00:04:17,590 --> 00:04:23,326
어떤 원리에 대한 그런 물음들의 자주 질문 질문이 일어나는 그런 후보들을

54
00:04:23,350 --> 00:04:27,225
먼저 제공을 해서 흥미를 조금 끌어올리는 역할도 합니다

55
00:04:27,820 --> 00:04:32,650
약간 예를 조금 들어보면은 for문의 문법에 대해서 배웠으니까

56
00:04:32,675 --> 00:04:36,976
그럼 이거를 활용을 해서 for문을 이용해서 정수 리스트가 주어졌을 때

57
00:04:37,000 --> 00:04:43,531
가장 큰 수를 찾는 알고리즘을 파이썬으로 구현하려면
어떻게 해야 될까 라는 거를  디스커션 질문을 던지게 됩니다

58
00:04:43,661 --> 00:04:47,386
그거에 대해서 학생들이 각자의 고민이나 아니면 그룹토론을 해서

59
00:04:47,410 --> 00:04:51,636
어떤 답변을 준비를 해보고 그걸 저희가 발표를 시키게끔 하는 것이죠

60
00:04:51,761 --> 00:04:55,393
이 정도 레벨이 있고 또 하나는 그러면은

61
00:04:55,715 --> 00:05:00,901
이  정수 리스트에서 가장 큰 수를 얻는 방법이 이렇게 포문을 쓰는 거 말고

62
00:05:00,926 --> 00:05:04,448
파이썬의 빌트인 함수의  MAX 함수를 쓰는 방법도 있는데

63
00:05:04,487 --> 00:05:11,033
그러면 MAX 함수를 그냥 쓰는 것과
for문을 이용한 구현 이 두 가지의 어떤 성능적 차이가 있을까?

64
00:05:11,110 --> 00:05:14,086
그런 것들을 한번 고민해보는 시간을 가질 수가 있겠죠

65
00:05:14,110 --> 00:05:20,108
빌트인 함수가 웬만하면 더 효율적일 텐데 왜 어떤 효율적인 성능을 보일 수 있는가

66
00:05:20,133 --> 00:05:23,562
그런 거에 대해서 학생들에게 각자 생각을 좀 말해봐라

67
00:05:23,587 --> 00:05:25,665
이런 식으로 디스커션이기도 합니다

68
00:05:26,170 --> 00:05:28,990
때로는 약간 이런 것들 그룹 토론도 하게 됩니다

69
00:05:29,475 --> 00:05:33,881
여기서 지금 알고리즘을  어떤 알고리즘을 구현한다 했다라고 볼 수가 있는데

70
00:05:34,030 --> 00:05:39,928
알고리즘은 보통 일반적으로 정확하고 효율적이고 이해하기 쉬울수록 좋다라고 알려져 있다

71
00:05:40,120 --> 00:05:45,286
이때 왜 이해하기 쉬운 것이 중요한 알고리즘의 특징인지

72
00:05:45,310 --> 00:05:51,942
혹은 중요하지 않은지에 대한 어떤 얘기를 나눠보자
라는 그런 식으로 그룹토론을 조금 진행한 적도 있었습니다

73
00:05:52,660 --> 00:05:57,166
그래서 이러한 다양한 심층적인 활동을 수업시간 내에 하게 됩니다

74
00:05:57,190 --> 00:06:02,908
수업에 대한 기본적인 내용 숙지는 수업
전에 숙제 형태로 하게 되는 거고요

75
00:06:02,933 --> 00:06:06,226
강의 진행방식을 요약하자면 이 그림과 같습니다

76
00:06:06,250 --> 00:06:11,413
강의 전에 패시브한 활동으로써 강의 영상 시청을 해봐야 되고 아까 말씀드렸다시피

77
00:06:11,764 --> 00:06:17,185
그리고 이 강의 시간 중에는 액티브한 활동으로써 퀴즈와 디스커션을 진행하게 됩니다

78
00:06:17,500 --> 00:06:22,367
그리고 뒤에도 설명드릴 코딩 실습도 강의 시간 내에 배정이 되어 있습니다

79
00:06:22,492 --> 00:06:26,888
이는 수업을 통해서 배우는 이론적인 내용들을 직접 코딩을 해보면서

80
00:06:26,913 --> 00:06:30,233
직접 써볼 수 있는 그런 기회를 주도록 하기 위함입니다

81
00:06:30,568 --> 00:06:34,435
이 flipped classroom을 적용한 파이썬 이론 수업의 성과는

82
00:06:34,690 --> 00:06:38,525
비록 좀 정성적 분석했지만 질문의 변화로 알 수가 있었습니다

83
00:06:38,718 --> 00:06:42,663
우선 자유롭게 질문을 하는 분위기가 형성이 되었고 다행히도

84
00:06:42,795 --> 00:06:48,013
수업 초반 이후부터는 어떠한 원리에 대한 궁금증이 주된 질문이었습니다.

85
00:06:48,129 --> 00:06:52,489
예를 들면 함수값 반환을 여러 개를 주고 싶다 파이썬에서

86
00:06:52,520 --> 00:06:55,981
그러면 어떻게 하면 될까요? 라는 그런 질문보다는

87
00:06:55,997 --> 00:07:01,395
파이썬에서는 다른 언어들과 다르게 신기하게도 함수값을 여러 개를 줄 수 있는데

88
00:07:01,449 --> 00:07:05,698
이렇게 되는 원리가 무엇인가요 라는 그런 지문이 좀 더 많아졌습니다

89
00:07:05,920 --> 00:07:11,927
이거 같은 경우는 반환값이 여러 개라는 느낌보다는
 tuple 데이터 타입으로 반환하기 때문에 이런 결과가 나오는 것이죠

90
00:07:12,970 --> 00:07:17,220
또한 학생들이 혼자 직접 코딩을 해봤는데 자기가

91
00:07:17,245 --> 00:07:22,940
그때 의도대로 나오지 않았을 때 그 이유에 대한 원리 그것들에 대한 질문이 좀 많이 있었습니다

92
00:07:23,380 --> 00:07:26,926
그러니까 집에서 혼자 뭔가 해봤는데 뭔가 원하던 대로 안 됐던 거죠

93
00:07:26,950 --> 00:07:33,145
그거에 대한 왜 안 됐는가 나는 이렇게 하려고 했는데
왜 안 됐을까? 이런 것들을 질문하기 시작했습니다

94
00:07:34,120 --> 00:07:36,698
예를 들면 조금 복잡한 예제인데

95
00:07:36,723 --> 00:07:43,121
 list에 dict 타입 객체를 빠르게 채우려는 의도를 가지고

96
00:07:43,160 --> 00:07:47,416
곱하기 연산자를 사용을 했더니 그 리스트에 한 객체를 바꾸면

97
00:07:47,440 --> 00:07:55,111
 list 내의 다른 모든 객체가 다 바뀌어버리는  그런 문제가 생겨서

98
00:07:55,197 --> 00:07:58,111
왜 이런 문제가 생겼는지에 대한 질문이 있었습니다

99
00:07:58,420 --> 00:08:02,763
이거 같은 경우는 그 곱하기 연산자를 쓰면은 리스트에 있는 내용들이

100
00:08:02,788 --> 00:08:07,873
포인터 형태로 포인터가 목표가 되기 때문에
이런 식으로 이런 현상이 나타나게 나타나는 것이죠

101
00:08:08,650 --> 00:08:14,391
그런데 이렇게 자기가 뭔가 의도를 가지고 혼자 해보다가 뭔가 막혔다 라는 것은

102
00:08:14,431 --> 00:08:18,437
한편으로는 프로그램에 흥미가 생겼다는 증거라고도 볼 수가 있습니다

103
00:08:18,462 --> 00:08:23,001
흥미요소가 입문자에게 굉장히 중요한 요소이기
때문에 저희는 조금 중요하다고 생각을 했고요

104
00:08:23,243 --> 00:08:26,001
그리고 이러한 유형의 질문들이 나온 건

105
00:08:26,026 --> 00:08:31,156
액티브한 활동으로 이루어진 수업 시간에서
주로 왜 그런가 아까 말씀드렸다시피

106
00:08:31,180 --> 00:08:35,203
왜 그런가에 대해서 좀 고민을 해보도록
좀 진행을 했기 때문에

107
00:08:35,228 --> 00:08:38,656
이런 결과가 성과를 얻을 수 있었다 라고 저는 생각을 합니다

108
00:08:38,920 --> 00:08:42,435
다음으로는  TDD-like 실습에 대해서 설명을 하겠습니다

109
00:08:42,607 --> 00:08:45,778
TDD는 test driven development의 약자로,

110
00:08:45,810 --> 00:08:48,310
 현재 널리 쓰이고 있는 개발 방법론입니다

111
00:08:48,700 --> 00:08:53,426
테스트를 먼저 작성하고 그 테스트를 통과하려는 의도를 가지고 코딩을 하자

112
00:08:53,473 --> 00:08:58,090
라는 의미에서 테스트 주도 개발 방법론이라는 이름이 붙었습니다

113
00:08:59,080 --> 00:09:04,453
이 방법의 장점으로는 개발의도 자체와 코드 품질의 관리가 가능하다는 것

114
00:09:04,478 --> 00:09:08,251
그리고 피드백이 빠르고 자동으로 이루어진다는 점이 있습니다

115
00:09:08,462 --> 00:09:12,226
이 TDD를 도식으로 설명하면 이화면과 같은데요

116
00:09:12,250 --> 00:09:19,179
먼저 테스트를 작성을 하고 그에 맞춰서 
구현 디버깅 리팩토링 등의 코딩 작업을 한 후에

117
00:09:19,210 --> 00:09:26,710
테스트를 돌려서 실패한다면 다시 작업 통과하기 위해서 
성공한다면 통과하는 방식으로 구성이 됩니다

118
00:09:26,999 --> 00:09:29,749
강의 진행방식에 대해 다시 말씀을 드리자면

119
00:09:29,774 --> 00:09:34,726
강의시간 중에 배운 내용을 직접 코딩을 해보는 것이 실습 시간이고

120
00:09:34,750 --> 00:09:38,509
그리고 별도로 텀 프로젝트 형태의 과제가 주어집니다

121
00:09:38,571 --> 00:09:42,446
이 코딩 실습 부분과 프로젝트 이 두 가지 부분에 대해서

122
00:09:42,471 --> 00:09:45,826
어떤 TDD스러운 것들을 접목시키고자 하였습니다

123
00:09:45,850 --> 00:09:51,467
우선 실습의 진행 방식은 매 실습마다 4~5개의 작은 문제를 제공하고

124
00:09:51,520 --> 00:09:56,582
이 주어진 문제를 해결하는 파이썬 코드를 작성하여 통과하면 성공하는 방식입니다

125
00:09:56,843 --> 00:10:02,311
이때 문제를 통과했다 즉 테스트는 어떤 시스템이 자동으로 해주기 때문에

126
00:10:02,336 --> 00:10:05,225
학생들은 핵심 구현부에만 집중할 수 있습니다

127
00:10:06,070 --> 00:10:14,038
만약에 학생이 스스로 생각한 방법에 작은 문제가 있거나 코딩 실수를 했을 경우

128
00:10:14,200 --> 00:10:19,348
조교의 도움 없이도 시스템의 테스트 피드백을 통해서 스스로 해결이 가능합니다

129
00:10:20,160 --> 00:10:28,137
이 테스트 피드백을 보면 이 정도의 작은 문제들은
스스로 해결할 수 있는 상황이 주어지는 것이죠

130
00:10:28,660 --> 00:10:32,588
그런데 만약에 문제를 해결하는 어떤 방법 방향 자체를 못 찾았을 경우

131
00:10:32,613 --> 00:10:36,472
그때는 이제 조교가 1대 1로 다 도와주는 식으로 진행을 했습니다

132
00:10:36,760 --> 00:10:42,886
아까 보여드렸던 TDD 도식 그림으로 설명을
하자면 테스트는 조교가 미리 작성을 해둡니다

133
00:10:42,910 --> 00:10:46,777
그리고 학생은 구현 실습을 자기가 진행을 하게 되고

134
00:10:46,802 --> 00:10:49,989
테스트는 온라인 저지 시스템이 자동으로 해줍니다

135
00:10:50,140 --> 00:10:55,850
자동이라기 보다는 테스트를 서브밋으로 하면 채점
결과를 내서 피드백을 학생들에게 보여주는 형식이죠

136
00:10:56,800 --> 00:11:00,586
그날 주어지는 모든 문제를 다 통과를 하면 집에 갈 수가 있구요

137
00:11:00,610 --> 00:11:05,146
만약 실패를 했을 경우 테스트 피드백을 보고 스스로 고치거나

138
00:11:05,170 --> 00:11:10,576
아니면 조교의 도움을 받아서 다시 통과할
수 있도록 코딩을 다시 하게끔 진행을 했습니다

139
00:11:11,140 --> 00:11:15,804
저희가 사용한 온라인 전체 시스템은 stepik이라는 서비스를 사용을 했으며

140
00:11:15,829 --> 00:11:21,852
슬라이드에 나오는 이미지와 같이 문제를 설명하는
부분이 있고 코드를 작성을 해서 제출하는 화면이 있습니다

141
00:11:22,300 --> 00:11:25,760
이 화면들은 학생들이 보는 화면이 있고요

142
00:11:25,930 --> 00:11:29,716
참고로 테스트 데이터를 생성하고 그걸 검증하는 그런 부분들은

143
00:11:29,740 --> 00:11:33,200
 제가 미리 작성을 해야 되는 부분인데

144
00:11:33,232 --> 00:11:38,116
이 stepik이라는 서비스에서는 그런 스크립트들을
전부 다 파이썬으로 구현하게끔 되어 있습니다

145
00:11:38,140 --> 00:11:42,640
그리고 제출하기 전에 학생이 스스로 생각한 테스트 케이스를

146
00:11:42,665 --> 00:11:46,726
몇 개 이것저것 넣어보고 그거에 대한 결과를 확인하는 기능도 있고요

147
00:11:46,750 --> 00:11:48,890
직접 값을 넣어서 테스트를 해본다는 것이죠

148
00:11:49,120 --> 00:11:53,479
그리고 중요한 게 이거는 온라인 저지 시스템을 활용을 하고 있긴 한데

149
00:11:53,557 --> 00:11:58,150
competition이 아니기 때문에 제출을 하면은 테스트 실패했을 때

150
00:11:58,275 --> 00:12:00,923
어떤 테스트 케이스에서 어떻게 실패했는지

151
00:12:00,962 --> 00:12:06,256
왜 실패했는지 이런 것들을 알려주게끔 
설정을 할 수가 있어서 그런 설정을 했습니다

152
00:12:06,280 --> 00:12:07,873
왜냐하면 그래야 피드백이 되니까요?

153
00:12:08,740 --> 00:12:12,019
이거 같은 경우 어떤 두 점의 사이의 거리를 재는 것인데

154
00:12:12,044 --> 00:12:16,306
이때 이걸 뭔가 코드에 실수가 있었으면 값이 잘못 나오겠죠

155
00:12:16,330 --> 00:12:19,906
그때 어떤 인풋을 줬을 때 이러한 값이 나와야 되는데

156
00:12:19,930 --> 00:12:24,922
당신의 결과는 이렇게 좀 뭐가 틀린 결과가
나왔다 라는 것은 피드백을 구체적으로 알려줍니다

157
00:12:25,320 --> 00:12:28,421
그렇기 때문에 코딩 실습에 변화가 있었는데요

158
00:12:28,460 --> 00:12:31,827
그러니까 코딩을 실습하는 어떤 풍경의 변화가 있었는데요

159
00:12:32,020 --> 00:12:36,332
코딩을 실습을 하다 보면 뭔가 책보고 이렇게 따라친다거나 하면

160
00:12:36,379 --> 00:12:40,254
내가 잘 따라오고 있는 게 맞나 약간 이런 의문이 들 때가 종종 있습니다

161
00:12:41,050 --> 00:12:46,587
그런데 이러한 방식에서 이제 나는 테스트를 통과하는 모듈을 구현했다

162
00:12:46,612 --> 00:12:51,496
라는 그런 생각이 들 수 있도록 좀 형태가 바뀌었다 라고 할 수가 있습니다

163
00:12:51,520 --> 00:12:57,895
예를 들면 아까 예시를 냈던 주어진 정수의 
리스트에서 최대값을 뽑는 파이썬 코드가 있고

164
00:12:58,090 --> 00:13:03,286
이를 직접 코딩을 해보고 몇 번 몇 가지 이것저것 넣어보면서 결과를 조금 보고

165
00:13:03,310 --> 00:13:06,731
이런 식으로 많이 통상의 실습 과정이 진행이 됐었는데요

166
00:13:06,810 --> 00:13:10,685
이거 대신에 동일한 기능을 수행하는 함수를 구현을 하고

167
00:13:10,731 --> 00:13:15,863
유닛테스트를 돌리고 테스트 결과를 받아보고 이런 과정으로 좀 변하게 되었습니다

168
00:13:16,780 --> 00:13:24,942
그래서 테스트를 통과를 하면 학생이 느끼기에는 
내가 제대로 완벽한 모듈 형태로 구현을 했다

169
00:13:24,967 --> 00:13:29,537
라는 그런 확신감을 받을 수가 있기 때문에 학습장려하는 측면에서

170
00:13:29,562 --> 00:13:33,280
교육효과가 조금 클 것으로 좀 기대를 할 수가 있었던 부분입니다

171
00:13:33,730 --> 00:13:38,956
그리고 실습시간 뿐만 아니라 과제에서도 TDD 방식을 조금 접목시켰는데요

172
00:13:39,034 --> 00:13:42,869
제가 출제한 퍼스트 과제가 테스트랭크 알고리즘을 사용한

173
00:13:42,894 --> 00:13:45,737
문서요약 프로그램을 파이썬으로 구현하는 것

174
00:13:45,762 --> 00:13:49,066
그러니까 일명 세줄요약기를 만드는 것은 했는데요

175
00:13:50,050 --> 00:13:53,776
프로그래밍을 처음 배우는 학생이 만들기에는 조금 난이도가 높은 편입니다

176
00:13:53,800 --> 00:13:57,987
이거는 말 그대로 큰 문서를 주면은 파이썬 프로그램이 수행을 해가지고

177
00:13:58,012 --> 00:14:01,786
문서에서 제일 중요한 문장 3문장을 골라가지고

178
00:14:01,810 --> 00:14:05,872
문서를 요약해주는 그런 알고리즘이구요

179
00:14:06,760 --> 00:14:10,336
그래서 그 처음 배운 학생들이 만들기엔 난이도가 높은 편인데

180
00:14:10,360 --> 00:14:15,006
그 때문에 제가 했던 것들은 프로젝트를 조각함수들의 모음으로 나눠서

181
00:14:15,031 --> 00:14:20,499
자잘한 작은 기능들을 다 쪼개가지고 그런 함수에 대한 테스트를 제공을 했습니다

182
00:14:21,190 --> 00:14:26,296
그래서 이렇게 구현한 각각 구현하는 조그만한 함수들을 조립을 하면은

183
00:14:26,320 --> 00:14:31,780
전체 프로젝트를 완성할 수 있는 구조로 조금
프로젝트 과제를 만들어서 학생들에게 했습니다

184
00:14:32,140 --> 00:14:34,835
그때 제가 제공한 조각 함수들의 예시인데요

185
00:14:34,944 --> 00:14:37,194
이게 전부가 아니고 더 있는데

186
00:14:37,225 --> 00:14:40,850
textrank 알고리즘을 구현하기 위해서 필요한 것들의 일부로

187
00:14:40,875 --> 00:14:45,504
 예를 들면 두 집합이 있을 때 이 집합이 유사도를 
측정해주는 방법이 여러 가지가 있는데

188
00:14:45,529 --> 00:14:51,976
그중에 대표적인 게  jaccard index 함수죠 
그 함수를 구현을 해야 할 일이 있었는데

189
00:14:52,476 --> 00:14:57,405
텍스트랭크 알고리즘에서 그 함수라든지

190
00:14:58,030 --> 00:15:03,166
그리고 텍스트랭크는 페이지 랭크 알고리즘에 기반해 알고리즘이기 때문에

191
00:15:03,190 --> 00:15:06,893
페이지 랭크를 계산하는 함수도 테스트 케이스를 같이 제공을 했습니다

192
00:15:07,025 --> 00:15:10,954
그래프 데이터가 주어지면 그 그래프에서 페이지랭크 값을 뽑아낼주는

193
00:15:10,979 --> 00:15:14,893
그런 것들을 함수 구현하게끔 하고

194
00:15:14,945 --> 00:15:18,898
 잘 구현했는지 체크해볼 수 있도록 테스트 케이스를 같이 제공을 했습니다

195
00:15:19,210 --> 00:15:22,155
결국에는 학생들은 각 기능별로

196
00:15:22,180 --> 00:15:26,647
유닛 테스트를 통과한 버전의 코드들을 조립하게 되는 것입니다

197
00:15:27,010 --> 00:15:29,572
통합테스트는 학생의 몫이 되는 거죠

198
00:15:29,604 --> 00:15:32,745
TDD를 접목시킨 실습과 과제성과로써

199
00:15:32,770 --> 00:15:37,726
학생들이 테스트 케이스를 보면서 어떻게 구현해야 할지

200
00:15:37,750 --> 00:15:41,726
어떤 계획을 짜고 의도를 가지고 코딩을 하기 시작했습니다

201
00:15:42,190 --> 00:15:47,213
그래서 테스트 결과를 보면서 자기가 의도했던 거에서 무엇이 누락되었는지

202
00:15:47,252 --> 00:15:51,236
이 부분을 놓쳤다 하는 것들을 빠르게 피드백을 받을 수가 있었고요

203
00:15:51,760 --> 00:15:56,658
그렇기 때문에 대부분의 경우 정말 대부분의 경우 테스트 피드백을 통해서

204
00:15:56,683 --> 00:15:59,292
 문제 해결까지 스스로 돌아갈 수가 있었습니다

205
00:16:00,490 --> 00:16:04,126
한편으로는 이러한 현상들이 이렇게 의도를 가지고 계획을 짜고

206
00:16:04,150 --> 00:16:06,681
이런 모습들을 관찰해보는 게

207
00:16:06,706 --> 00:16:10,815
한편으로는 프로그래밍을 처음 접하는 처음 배우는 사람들이

208
00:16:10,840 --> 00:16:17,433
대게 TDD를 시켰을때 어떤 결과가 나오는지 그런 것들을 
조금 볼 수 있는 편린이라고도 할 수가 있겠습니다

209
00:16:17,800 --> 00:16:23,716
그러면 정량적 성과의 일부로써 놀랍게도
모든 학생이 필수문제를 전부 통과하였습니다

210
00:16:23,740 --> 00:16:27,935
즉 코딩실습을 따라오지 못하는 학생이 한 명도 없었다는 얘기입니다

211
00:16:27,982 --> 00:16:32,626
이 화면에서 보이는 부분은 초록색이 문제를 통과를 했다는 거고

212
00:16:32,650 --> 00:16:36,316
흰색은 옵셔널한 문제였기 때문에 필수 문제는 아니었습니다

213
00:16:36,340 --> 00:16:41,019
그래서 모든 학생이 모든 필수 문제를
전부 통과하는 것을 확인할 수가 있습니다

214
00:16:42,250 --> 00:16:47,062
그리고 그 프로젝트로 제출했던, 프로젝트로 했던 텍스트랭크 같은 경우도

215
00:16:47,087 --> 00:16:49,781
정말 상당히 복잡한 문제인데도 불구하고

216
00:16:49,812 --> 00:16:54,616
이것을 작은 기능으로 쪼개고 각 기능에 대한 유닛 테스트를 통과한 것들을

217
00:16:54,640 --> 00:16:57,376
조립을 하는 식으로 가이드라인을 제시를 했더니

218
00:16:57,400 --> 00:17:02,298
프로그래밍을 처음 배우는 사람들도 충분히 텍스트랭크처럼 복잡한 문제를

219
00:17:02,323 --> 00:17:04,932
구현할 수 있었다 라는 결과를 얻었습니다

220
00:17:05,440 --> 00:17:10,705
그래서 수업의 전체적인 품질 평가라고 할 수 있는 강의 평가에 대한 결과입니다

221
00:17:10,900 --> 00:17:14,805
강의평가점수 같은 경우 원 점수를 공개할 수가 없기 때문에

222
00:17:14,829 --> 00:17:17,000
표준편차를 기준으로 얼마나 떨어져 있는지

223
00:17:17,025 --> 00:17:20,368
 몇 시그마인지에 대한 수치을 여기에다 표현을 했는데요

224
00:17:20,694 --> 00:17:24,139
오른쪽에 보시면 컴퓨터 공학부대비 평균점수

225
00:17:24,164 --> 00:17:28,334
컴퓨터 공학부의 평균 점수들에 비해 차이가 약 0.5 시그마 정도 다릅니다.

226
00:17:28,359 --> 00:17:33,286
평가항목으로는 만족도와 강의 준비 그리고 교육방법의 효과성이 있는데

227
00:17:33,310 --> 00:17:36,560
셋다 0.5를 넘는 것을 알 수 있습니다 0.5시그마를

228
00:17:37,419 --> 00:17:41,489
0.5시그마 이긴 하지만 원 점수 기준으로는

229
00:17:41,680 --> 00:17:46,469
저희 강의가 받은 값들이 거의 다 만 점에 가까운 점수를 받았었고요

230
00:17:47,140 --> 00:17:51,960
그리고 여기 표를 보면 학교 전체나 아니면 공과대학 전체에 대해서

231
00:17:53,124 --> 00:17:57,632
받은 점수보다 컴퓨터 공학에서 조금 더 높은 점수를 받았다

232
00:17:57,657 --> 00:18:01,641
평균에 비해서 높은 점수를 받았다는 것을 알 수가 있는데요

233
00:18:02,020 --> 00:18:05,956
이게 프로그래밍 수업이 많은 그러한 컴퓨터 공학부 수업에서

234
00:18:05,980 --> 00:18:09,011
컴퓨터 공학부의 수업들에서 그래서 제가 사용했던

235
00:18:09,036 --> 00:18:13,323
이 교육방법론들이 효과가 조금 더 유의미하게 컸다 라고도

236
00:18:13,348 --> 00:18:16,597
 좀 어느 정도 주장을 할 수 있지 않을까? 그런 생각입니다

237
00:18:17,170 --> 00:18:18,318
요약 및 결론입니다

238
00:18:18,580 --> 00:18:23,767
프로그래밍을 처음 접하는 학부 1학년을 위해 특수한 수업을 하고자 하고요

239
00:18:23,950 --> 00:18:27,534
flipped classroom을 적용을 해서 강의 내용은 집에서 듣고

240
00:18:27,559 --> 00:18:32,519
강의 시간에는 퀴즈 풀이와 디스커션 같은 
액티브한 교육활동을 위주로 진행을 했습니다

241
00:18:32,809 --> 00:18:36,910
그 성과로 파이썬 원리에 대한 질문이 눈에 띄게 증가를 했고

242
00:18:36,935 --> 00:18:39,316
파이썬에 흥미를 붙이는 학생들이 늘어났습니다

243
00:18:40,540 --> 00:18:43,516
TDD를 접목할 실습과 과정에 대해서는

244
00:18:43,541 --> 00:18:48,826
온라인 저지 시스템을 사용하여 파이썬으로 문제를 풀게끔 진행을 했고

245
00:18:48,850 --> 00:18:52,764
학생들은 어떤 구현의도에 대한 피드백을 자동으로 받고

246
00:18:52,789 --> 00:18:55,193
또 복잡한 문제를 해결할 수 있었습니다

247
00:18:56,620 --> 00:19:00,076
그 결과로 프로그래밍에 처음 배우는 모든 학생들이

248
00:19:00,100 --> 00:19:05,942
한 학기만에 문서 요약 프로그램이라는 다소
어려운 문제를 파이썬으로 구현해내는데 성공을 했고

249
00:19:05,967 --> 00:19:11,662
강의평가 역시 컴퓨터 공학부 내에서 상위권에 
위치하는 그런 결과를 얻을 수가 있었습니다

250
00:19:11,950 --> 00:19:15,340
그래서 간단하게 결론을 내리자면 이론 교육을 할 때는

251
00:19:15,365 --> 00:19:18,826
액티브한 활동의 비중을 늘려하고

252
00:19:18,850 --> 00:19:22,357
코딩 실습을 진행을 할 때는 
테스트를 제공을 하는 것이 효과적이다

253
00:19:22,382 --> 00:19:26,584
 라는 결론을 내리고 발표를 마무리하도록 하겠습니다

254
00:19:30,040 --> 00:19:31,789
발표를 들어주셔서 감사합니다



