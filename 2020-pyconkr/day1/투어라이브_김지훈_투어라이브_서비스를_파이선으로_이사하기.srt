1
00:00:11,110 --> 00:00:14,760
안녕하세요. 파이썬 코리아 2020

2
00:00:15,010 --> 00:00:19,110
저는 투어라이브의 백엔드 겸 DevOps 겸

3
00:00:19,130 --> 00:00:21,980
프런트 조금 할 줄 아는 개발자 김재훈이라고 합니다

4
00:00:22,210 --> 00:00:24,400
만나뵙게 되어서 정말 감사합니다

5
00:00:24,910 --> 00:00:29,970
파이콘 스피커로서 발표 그리고 이전에 개발 세미나 발표를

6
00:00:29,990 --> 00:00:35,060
한 두어 번 정도 했었는데, 이렇게 후원사 세션 발표를 하게 되었습니다

7
00:00:36,220 --> 00:00:41,400
회사를 알릴 수 있는 멋진 기회를 주신
파이콘 관계자님들 그리고 투어라이브팀

8
00:00:42,000 --> 00:00:43,240
너무 감사드리고요

9
00:00:43,270 --> 00:00:47,940
그러면 발표를 본격적으로 시작하겠습니다

10
00:00:48,520 --> 00:00:50,510
우선 제 소개를 해야 될 것 같은데요

11
00:00:50,740 --> 00:00:54,190
저는 파이썬이랑 조금 인연이 있는 것 같습니다

12
00:00:54,220 --> 00:00:59,660
인도에서, 인도 크리에이터 노리다에서 그리고 중국 베이징에서 개발자로 일할 때

13
00:01:00,040 --> 00:01:03,910
파이썬을 주로 팀 프로젝트로 썼었고요

14
00:01:03,940 --> 00:01:09,560
앞서 말씀드린 것처럼 격월 세미나는 한국에 도착해서 개발 세미나

15
00:01:09,790 --> 00:01:12,290
세션 발표를 몇 번 해본 적이 있으며

16
00:01:12,610 --> 00:01:17,460
비공식적으로 뭐 파이썬 전도사, Django 전도사로

17
00:01:17,680 --> 00:01:23,370
지금은 안 적었지만 테스트 전도사로 나름 그렇게 발표를 몇 번 했었네요

18
00:01:24,100 --> 00:01:28,360
지금 투어라이브 팀에서 저는 레거시를 모두 없애고

19
00:01:29,020 --> 00:01:32,720
파이썬 Django를 이용해서 투어라이브 1.0

20
00:01:32,740 --> 00:01:36,950
마이그레이션 및 런칭하는 일을 도맡아 했습니다

21
00:01:37,960 --> 00:01:41,460
다음으로 서비스 소개를 일단 간략하게 드릴 건데요

22
00:01:41,770 --> 00:01:45,180
저희는 투어 관련 스타트업입니다

23
00:01:45,430 --> 00:01:48,550
여러분 혹시 현지 투어를 들어보신 분 계실까요?

24
00:01:49,060 --> 00:01:54,960
다들 경험은 있으시겠지만 뭐 가이드와 함께 하는 투어는 정말 즐겁고 재미있어요

25
00:01:55,330 --> 00:01:57,940
하지만 때때로 불편한 순간들이 있는데요

26
00:01:57,970 --> 00:02:01,450
예를 들어 일정을 마음대로 조절할 수 없다 없다든지

27
00:02:01,480 --> 00:02:05,900
뭐 내가 그토록 보고 싶었던 루브르 박물관의 모나리자 앞에서

28
00:02:05,930 --> 00:02:09,790
가이드는 저한테 단 3분의 시간만 주지 않죠

29
00:02:10,210 --> 00:02:12,750
그리고 두 번째는 가이드 퀄리티 문제예요

30
00:02:12,910 --> 00:02:15,770
현재 투어 시장의 급격하게 성장하다 보니

31
00:02:16,080 --> 00:02:20,830
마트를 운영하는 대표님의 친구분께서는

32
00:02:20,860 --> 00:02:26,410
성수기만 되면 가이드를 하러 나가게 되는
그런 웃지 못할 상황이 벌어지고 있고요

33
00:02:26,740 --> 00:02:30,660
그리고 세 번째로는 생각보다 높은 추가 비용을 들 수가 있어요

34
00:02:33,010 --> 00:02:36,330
루브르 미술관 투어의 경우 3시간 투어인데

35
00:02:36,350 --> 00:02:39,840
일인당 보통 평균 5만원의 비용인데요

36
00:02:40,240 --> 00:02:44,830
이 투어를 4인이 돈다고 했을 때 한 번에 20만 원을 내야 하는

37
00:02:44,850 --> 00:02:47,950
생각보다 높은 비용이 부담된다고 볼 수가 있겠습니다

38
00:02:48,190 --> 00:02:52,280
해서 저희는 뭐 가이드와 함께 하는 여행은 조금 불편하지만

39
00:02:52,300 --> 00:02:56,140
여행지 이야기는 재밌게 듣고 싶은 분들을 위해서

40
00:02:56,530 --> 00:03:00,640
투어라이브 서비스를 만들게 되었습니다

41
00:03:01,810 --> 00:03:07,590
저희 투어라이브는 오디오로 현지 서비스를 드릴 수 있는 그런 서비스입니다

42
00:04:32,440 --> 00:04:38,100
간략하게 서비스 히스토리가 지금까지 어떻게 됐는지 설명드리려고 하는데요

43
00:04:38,960 --> 00:04:42,310
2018년 8월에, 처음에는 베타서비스를

44
00:04:43,200 --> 00:04:45,040
워드프레스를 통해서 오픈을 했고

45
00:04:45,060 --> 00:04:50,330
2019년 12월부터 2월까지 1.0 마이그레이션 기획 및 개발을 했었고

46
00:04:50,350 --> 00:04:54,840
2020년 하반기 대규모 업데이트를 준비 중에 있습니다

47
00:04:57,910 --> 00:05:04,180
자, 시작하기 전에 지금부터는 1000% 개발자 저의 주관적인 생각이니까요

48
00:05:04,220 --> 00:05:07,810
한번 가볍게 들어주시면 좋을 것 같습니다

49
00:05:08,230 --> 00:05:11,940
여기서 투어라이브는 파이콘 COC(Code of Conduct)를 정말 존중합니다

50
00:05:14,980 --> 00:05:20,580
다음으로 투러브라이브가 왜 파이콘를
이렇게 후원사 세션을 참여하게 됐는지

51
00:05:20,620 --> 00:05:24,270
간단하게 설명을 드리자면

52
00:05:24,620 --> 00:05:27,530
투어라이브는 이전에 말씀드린 것처럼

53
00:05:27,550 --> 00:05:31,840
8월에 첫 서비스를 출시한, 3년 미만의 회사입니다

54
00:05:31,870 --> 00:05:35,060
그렇기 때문에 1.0 리뉴얼을 하게 되면서

55
00:05:35,080 --> 00:05:38,860
백엔드의 많은 기술을 파이썬으로 채택을 하게 되었고

56
00:05:38,890 --> 00:05:43,390
그로 인해서 스타트업 후원사 자격으로 설 수 있게 되었는데요

57
00:05:43,420 --> 00:05:48,520
여기 화면에 보이듯이 Celery Flask, gunicorn, Django, sqlalchemy

58
00:05:48,550 --> 00:05:54,880
옆에는 파이썬 기술은 아니지만 Docker를 쓰고 있는
이런 1.0 서비스를 쓰게 되면서

59
00:05:55,300 --> 00:05:58,590
이렇게 자격을 얻고  참여를 하게 되었습니다

60
00:06:01,540 --> 00:06:06,160
처음 베타 서비스는 워드프레스로 작업이 되어 있었습니다.

61
00:06:06,190 --> 00:06:10,690
이거는 이전에 자체적으로 제작한 건 아니고

62
00:06:10,720 --> 00:06:16,970
아이디어를 가지고 있는 공동 대표님들께서 외주를 줘서 만들었었는데요

63
00:06:17,530 --> 00:06:23,870
이 워드프레스에서는, 이미 만들어진 워드프레스는 좀 많은 문제점이 있었어요

64
00:06:24,850 --> 00:06:28,630
첫 번째 재가 입사했을 때의 투어라이브 베타의 문제점은

65
00:06:28,650 --> 00:06:31,280
일단 확장성에 문제가 굉장히 있었고

66
00:06:31,660 --> 00:06:35,370
코드는.. 코드의 양은 적지만 굉장히 플러그인에

67
00:06:35,400 --> 00:06:39,970
의존적인 코드가 있었고, 그리고 잦은 장애가 있었어요

68
00:06:40,030 --> 00:06:45,460
Django나 워드프레스 역시 centry를 지원을 하긴 하는데

69
00:06:45,640 --> 00:06:48,970
잦은 장애 때문에 대응하기 굉장히 힘들었고

70
00:06:49,150 --> 00:06:53,030
저는 PHP 알못이라서 대응은 굉장히 힘들었어요

71
00:06:53,200 --> 00:06:58,890
역시 테스트 코드가 제대로 작성된 게 하나도 없어서

72
00:06:58,940 --> 00:07:01,160
뭔가 그런 히스토리를 알수는 없었고

73
00:07:01,200 --> 00:07:07,340
특정 부분에 대해서 보안에 취약한 점이 발견이 되어 있었습니다

74
00:07:08,950 --> 00:07:13,010
그리고 이거 AWS쪽에 관한 부가적인 설명을 하자면

75
00:07:13,030 --> 00:07:17,200
저희 투어라이브 서비스는 일단 유럽에서 사용하는 사람들이 굉장히 많아서

76
00:07:17,230 --> 00:07:23,800
초기 AWS Region을 프랑스의 ec2 위에 모든 걸 올려놨었어요

77
00:07:23,830 --> 00:07:27,810
근데 그로 인해서 생기는 문제점이 굉장히 많이 있었습니다

78
00:07:28,150 --> 00:07:31,560
일단 S3를 사용하지 않아서 생긴 문제

79
00:07:31,580 --> 00:07:37,540
그리고 어 약간 좀 이건 개발적 이슈인데 git을 사용하지 않아서 생기는 문제들

80
00:07:37,570 --> 00:07:43,010
많은 문제 및 개발 부채 그리고 그런 이슈들을 많이 안고 있었어요

81
00:07:46,720 --> 00:07:51,970
투어라이브 배타 문제점에서 제가 뭐 크게 세 가지를 꼽자면은

82
00:07:52,000 --> 00:07:56,940
장애 발생 시 SSH 파리 region 으로 직접 접근해가지고

83
00:07:57,310 --> 00:08:03,010
이걸 손을 보는데 굉장히 레이턴시가
많이 발생해가지고 정말 고생을 했던 점이 있었고

84
00:08:03,040 --> 00:08:06,970
S3를 쓰지 않아서 EC2 볼륨이 가득 차서

85
00:08:07,000 --> 00:08:09,850
서비스가 몇 번 다운된 적도 있었습니다

86
00:08:09,910 --> 00:08:14,430
뭐 DB는 따로 AWS DB을 쓰지 않아서

87
00:08:15,100 --> 00:08:21,160
좀 문제가 많이 있는 상황까지 치닫을 수 있었죠

88
00:08:21,190 --> 00:08:24,300
EC2 localhost에 있는 mysql을 쓰고 있었습니다

89
00:08:25,240 --> 00:08:30,670
저는 그때 당시 뭔가 이렇게 너무 답답해서

90
00:08:30,690 --> 00:08:36,370
이 모든 작업을 저랑 다른 개발자분 두 분이서 이거를 완료하는데

91
00:08:36,400 --> 00:08:39,830
굉장히 이런 많은 고난이 있었는데

92
00:08:40,080 --> 00:08:41,630
저는 아직도 여기 있습니다

93
00:08:41,710 --> 00:08:46,120
그렇게 해서 일단 개발부채를 걷어내고

94
00:08:46,150 --> 00:08:48,120
다음으로 저희가 해야 할 일은

95
00:08:51,090 --> 00:08:52,810
어떤 프레임워크로 시작하느냐

96
00:08:52,830 --> 00:08:57,160
그리고 모놀리틱하게 그리고 마이크로서비스로 시작할까 그거였어요

97
00:08:57,630 --> 00:09:03,020
바로 Django를 사용할지 flask를 MSA(Micro Service Architecture) 구축해가지고 할지 였습니다

98
00:09:07,630 --> 00:09:09,140
저희 팀이 고민을 하기 시작했습니다

99
00:09:09,160 --> 00:09:16,030
마이크로 서비스로 시작한다면 생각한 적 5분만에 이런 얘기가 오갔어요

100
00:09:16,060 --> 00:09:20,110
특정 모델 테이블을 참조하는 API 값이나 이런 게 바뀌면은

101
00:09:20,130 --> 00:09:24,070
서비스를 다 내렸다가 다시 올려야 된다 그런 것도 있었고

102
00:09:24,100 --> 00:09:29,000
저희가 컨테이너 배포 환경을 만들었지만 배포 순서가 굉장히 중요했고요

103
00:09:29,020 --> 00:09:33,840
그 다음으로 배포 순서와 비슷하게 뭐 장애 발생시 롤백을 해야 되고

104
00:09:33,870 --> 00:09:38,440
도커 태그가 기억이 안 나면 정말 멘붕이
오는 상황이 올 수 있기 때문에

105
00:09:39,400 --> 00:09:46,440
일단은 백엔드는 저 혼자여서 이 모든 걸
혼자 다 해야 된다는 그런 부담을 많이 안고 있었어요

106
00:09:47,350 --> 00:09:52,200
그제 머릿속에는 혼자 다 해야 되는 그런 이런 그림과 같은 상황이 되는 거죠

107
00:09:52,220 --> 00:09:56,770
제가 혼자 다 해야 되고 다해야 되고
배포는 약간 제가 책임지고 하고 있었으니까요?

108
00:09:57,190 --> 00:10:02,320
그래서 저희는 마이크로 서비스를 처음부터 준비하지 않기로 했습니다.

109
00:10:06,970 --> 00:10:11,650
모놀리틱 서비스로 시작한다면, 사실 답은 이 정해져 있었죠

110
00:10:12,330 --> 00:10:16,490
모놀리틱으로 하게되면 배포하는 것도 많이 그렇게 어렵지가 않고

111
00:10:16,510 --> 00:10:19,890
일단 큰 볼륨을 가져왔기 때문에

112
00:10:19,920 --> 00:10:23,110
뷰 모델 테스트를 작성하면서 진행하도록 하니 굉장히 편해졌고요

113
00:10:24,910 --> 00:10:27,820
그리고 일단 이 내용에서 보이시듯이

114
00:10:28,060 --> 00:10:31,180
뷰 모델 테스트를 작성하면서 진행하기로 약속을 했어요

115
00:10:31,220 --> 00:10:36,010
내부적으로, 왜냐면은 일단은 모놀리틱 같은 경우에는

116
00:10:36,040 --> 00:10:38,240
일단 저희가 서비스를 크게 가기 때문에

117
00:10:38,260 --> 00:10:42,940
이 히스토리를 정말 알기가 힘들거든요
그래가지고 이렇게 됐었고

118
00:10:43,180 --> 00:10:51,460
퓨어 100% 모놀리틱이 아닌 뭐 스케줄링이나
배치 메일링 서비스는 부분적으로 Micro를 쓰자 이렇게 했었고요

119
00:10:51,790 --> 00:10:56,360
그리고 Django에서 디폴트로 제공하는 그런 커넥션 관련 옵션을 바꿔서

120
00:10:56,390 --> 00:11:02,340
저희 커넥션 풀을 쓰지 않기로 그렇게 내부적으로 정했습니다

121
00:11:03,730 --> 00:11:09,710
그래서 저희가 탄생한, 그런 저희가 만든 말이 하나가 있는데요

122
00:11:12,040 --> 00:11:13,540
마이놀리틱 서비스입니다

123
00:11:13,570 --> 00:11:17,010
퓨어 모놀리틱이나 퓨어 마이크로 서비스가 아닌

124
00:11:17,040 --> 00:11:21,030
모놀리틱 플러스 마이크로 서비스예요. 원래 이런 말은 없습니다

125
00:11:21,140 --> 00:11:24,680
네, 저희가 지금부터 만들어서 쓸려구요

126
00:11:28,660 --> 00:11:30,670
이렇게 사실 갑론을박인데

127
00:11:30,700 --> 00:11:33,760
모놀리틱이 처음부터 좋다, 마이크로 서비스가 좋다보다

128
00:11:33,780 --> 00:11:36,080
어차피 만들게 되면 레거시가 되고

129
00:11:36,230 --> 00:11:39,810
개발자의 손끝에서는 이미 타이핑을 하는 순간

130
00:11:39,840 --> 00:11:42,910
그 순간에 레거시코드가 되기 때문에

131
00:11:42,940 --> 00:11:48,260
크게 하나의 쓰레기를 만드는지 작게 여러 개의 쓰레기를 만드는지의 문제여서

132
00:11:49,360 --> 00:11:55,140
저희는 여기에 너무 연연해하지 않고 그냥 마이놀리틱하게 진행하기로 했습니다

133
00:11:59,590 --> 00:12:04,360
자 이렇게 해서 결국에는 이렇게 중앙에 모놀리틱하게 Django

134
00:12:04,440 --> 00:12:09,160
그리고 아래에 보시면은 뭐 Celery, Flask, gunicorn, sqlalchemy

135
00:12:09,190 --> 00:12:12,610
이런 식으로 저희 서비스는 구성이 되어 있고요

136
00:12:12,640 --> 00:12:16,050
여기에 모든 걸 다 담지 못했지만

137
00:12:16,090 --> 00:12:20,930
잘게 나눠서 중복되는 프레임워크 있으니까요?

138
00:12:21,400 --> 00:12:25,860
그리고 잠시 뒤에 마이크로 서비스 중 하나인 celery 통해서

139
00:12:25,890 --> 00:12:29,880
어떤 문제를 해결한 사례를 또 공유를 해드리려고 합니다

140
00:12:33,640 --> 00:12:38,740
일단은 저희 기본 핵심적으로는 가운데 모놀리틱하게 Django가 있고

141
00:12:38,770 --> 00:12:42,790
그 Django 백엔드 API를 쓰기 때문에 Django REST 프레임워크를 쓰고 있습니다

142
00:12:42,820 --> 00:12:46,940
웹서버는 뭐, UWSGI를 쓰기보다는

143
00:12:46,970 --> 00:12:50,960
뭐 개인적으로 그리고 경험적으로 gunicorn을 쓰는 거를

144
00:12:50,990 --> 00:12:53,920
지향에서 gunicorn을 사용하고 있고요

145
00:12:59,170 --> 00:13:05,230
그리고 방금 Django를 쓰는 게 중요한 것보다도
지금 저희가 이제 기술적 사례를 공유해 드릴 건데

146
00:13:05,270 --> 00:13:07,500
투어라이브의 다양한 마이크로 서비스 중

147
00:13:07,530 --> 00:13:11,630
Celery를 활용한 부분을 좀 소개시켜 드릴려고 합니다

148
00:13:15,940 --> 00:13:19,880
처음에는 1.0에서 Celery 역할은 굉장히 큰데요

149
00:13:20,150 --> 00:13:24,120
일단은 간단하게 네 줄로 네 가지를 설명드리면

150
00:13:24,150 --> 00:13:27,590
자체 manifest에 따른 대용량 오디오 파일 및

151
00:13:27,620 --> 00:13:32,090
가이드 분들 정산 관련 작업은 Celery를 사용하고 있고요

152
00:13:32,410 --> 00:13:34,640
역시 sqlalchemy를 사용하고 있는데

153
00:13:34,660 --> 00:13:40,210
직접 alembic을 사용해서 마이그레이션을 독단적으로 관리하는 게 아니라

154
00:13:40,240 --> 00:13:45,340
하나의 Django쪽 모델을 인스펙터 용도로
인스펙트해서 sqlalchemy를 사용하고 있습니다

155
00:13:45,370 --> 00:13:50,130
간단하게 여기서 헬스체크 용도로 flask로 경량 서버를 사용하고 있고

156
00:13:50,150 --> 00:13:54,240
역시 gunicorn 위에서 클라스가 돌아가고 있습니다

157
00:13:54,880 --> 00:13:58,920
그래서 redis가 잠깐 나왔는데 redis는 broker 용도입니다

158
00:14:01,920 --> 00:14:06,070
앞서 말씀드린 것처럼 celery의 어떤 활용 사례를

159
00:14:06,090 --> 00:14:10,820
좀 공유를 해드리고 싶어서 이렇게 준비를 해봤고요

160
00:14:11,110 --> 00:14:17,110
일단은 가이드, 저희는 오디오 투어 관련 서비스입니다

161
00:14:17,140 --> 00:14:20,620
지금은 이렇게 말씀드리는데

162
00:14:20,640 --> 00:14:23,350
나중에 특정 기능이 많이 포함 되면서

163
00:14:23,380 --> 00:14:29,630
사실 여행 관련 Tech기반의 그런 컴퍼니인데

164
00:14:29,650 --> 00:14:34,630
일단은 오디오 투어 관련해서만 집중적으로 이렇게 설명드리자면

165
00:14:34,660 --> 00:14:40,680
저희 DB는 일단 PostgreSQL을 쓰고 있고 그 중간에
Celery가 특정 이벤트를 감지해가지고

166
00:14:41,710 --> 00:14:47,560
이렇게 S3 Bucket에다가 업로드를 하거나 가져오는 그런 형식으로 되어 있어요

167
00:14:47,590 --> 00:14:50,230
여기서 Celery가 생소하신 분들이 계실 텐데

168
00:14:50,250 --> 00:14:58,230
간단하게 Celery가 어떤 녀석인지 설명해드리면은

169
00:14:58,250 --> 00:15:02,580
공식 홈페이지 또는 웹페이지에서는 이렇게 소개를 하고 있습니다

170
00:15:02,620 --> 00:15:06,330
샐러리는 Celery is a task queue
implementation

171
00:15:06,350 --> 00:15:09,280
샐러리는 작업 큐를 이행 또는 실행한 녀석이고요

172
00:15:09,310 --> 00:15:10,560
어떤 거를 실행할까요?

173
00:15:10,580 --> 00:15:12,670
파이썬 웹 어플리케이션을 한답니다

174
00:15:12,700 --> 00:15:14,490
근데 그게 어떤 거냐면

175
00:15:14,530 --> 00:15:17,830
used to asynchronously execute work outside

176
00:15:18,190 --> 00:15:20,440
외부에서 비동기적으로 실행한 녀석이에요

177
00:15:20,470 --> 00:15:22,320
뭐 간단하게 한 줄로 말하면은

178
00:15:22,320 --> 00:15:25,630
마지막으로 역시 Celery는 테스크 Queue 컨셉을

179
00:15:25,660 --> 00:15:29,910
이행 또는 실행하는 녀석이라고 나와 있습니다

180
00:15:33,880 --> 00:15:38,090
다음으로 넘어가서 이 Celery가 어떤 식으로

181
00:15:38,120 --> 00:15:40,720
그 컨셉, 그림을 한번 볼까요?

182
00:15:40,750 --> 00:15:41,640
그림은 간단합니다

183
00:15:41,660 --> 00:15:45,260
Producer를 통해서 들어온 테스크 단위의 일들을 받아서

184
00:15:45,290 --> 00:15:48,130
Worker들이 처리를 하고 있는 그림을 볼 수 있는데

185
00:15:48,160 --> 00:15:53,210
가운데 문서들이 3개로를 이렇게 일렬로 줄을 Queue 형식으로 가지고 있죠

186
00:15:53,440 --> 00:15:58,260
이런 형식의 서비스, 이런 형식의 라이브러리라고 보시면 됩니다

187
00:16:01,600 --> 00:16:05,920
그러면 우리가 바로 이 코드를, Hello World 코드를 확인 해야겠죠

188
00:16:05,950 --> 00:16:07,880
Hello World 코드는 굉장히 간단합니다

189
00:16:07,910 --> 00:16:10,230
task 라는 데코레이터가 위에 붙고요

190
00:16:11,450 --> 00:16:14,780
이거를 Hello World 비동기 task를 내가 원하는 시점

191
00:16:15,100 --> 00:16:19,440
날짜 또는 내가 원할때 주기적으로 또 실행을 할 수 있고요

192
00:16:19,560 --> 00:16:22,180
그리고 또 원하는 만큼 실행을 할 수도 있습니다

193
00:16:22,210 --> 00:16:26,200
자유 자재로 호출할 수가 있어요. 굉장히 유용한 녀석입니다

194
00:16:29,860 --> 00:16:33,860
그러면 투어라이브 팀에서는 Celery를 쓸 때

195
00:16:33,880 --> 00:16:35,760
여러 가지 실행한 방법이 있는데요

196
00:16:35,790 --> 00:16:39,390
Periodic Task를 이용 했었습니다

197
00:16:42,310 --> 00:16:47,110
이 Celery를 이용해서 저희는 부하가 많이 드는 일은

198
00:16:47,170 --> 00:16:50,340
따로 빼서 실행시킬려고 했어요

199
00:16:50,360 --> 00:16:53,620
Celery는 지속적으로 데이터베이스 특정 필드를 조회하고

200
00:16:53,650 --> 00:16:57,470
해당 필드의 값이 변경되는 이벤트를 감지해서

201
00:16:57,500 --> 00:17:01,180
개발자가 원하는 무언가를 실행할 수 있게 하는데요

202
00:17:01,220 --> 00:17:06,220
그중에 우리는 투어라이브팀은 Celery beat라는 그런 기능을 사용해서

203
00:17:06,250 --> 00:17:10,870
원하는 특정 표준 인터벌 간격으로 이벤트를 감지해서

204
00:17:10,900 --> 00:17:14,300
여기서는 감지라고 했는데 실행이라고 이해하셔도 됩니다

205
00:17:14,330 --> 00:17:20,600
그럼 감지해서 특정 원하는 그 펑션이나 그런 외부 콜을 쓸 수 있게 되는 거죠

206
00:17:20,630 --> 00:17:23,810
그렇게 되면 비동기 통신을 구현할 수가 있습니다

207
00:17:26,610 --> 00:17:29,220
자 그런데 이 좋은 셀러리를

208
00:17:30,640 --> 00:17:33,920
외부 요청을 통해 가지고 쓸 때

209
00:17:33,940 --> 00:17:37,390
함수형으로 쓸 수 있다고 제가 앞에 설명을 드렸는데요

210
00:17:37,750 --> 00:17:41,680
저는 투어라이브에는 굉장히 많은 다양한오디오 파일의 형식

211
00:17:41,710 --> 00:17:44,350
그리고 굉장히 많은 이미지 파일이 존재합니다

212
00:17:44,380 --> 00:17:48,260
하나의 원본 크기가 5MB 이상일 수도 있는데요

213
00:17:48,290 --> 00:17:53,260
이렇게 코드들 보시면 리퀘스트 패키지를 쓴 외부 요청이

214
00:17:53,830 --> 00:17:56,790
굉장히 많이 직렬화로 되어 있죠?

215
00:17:57,520 --> 00:18:01,590
그런데 이거를 순차적으로 실행하게 되면 굉장히 느리게 됩니다

216
00:18:02,440 --> 00:18:07,050
순차적으로 실행한다면 많은 시간과 컴퓨터 파워를 낭비할 수가 있는 거죠

217
00:18:07,340 --> 00:18:13,830
이렇게 되면은 네 정말 느립니다 너무 느리고

218
00:18:15,160 --> 00:18:19,060
굉장히 많은 컴퓨팅 파워를 낭비 하게 되는 거죠

219
00:18:23,110 --> 00:18:31,830
자 그래서 우리는 gevent라는 녀석을 같이 사용 했어요

220
00:18:32,190 --> 00:18:34,660
그러면은 이 녀석을 써주면 되는데

221
00:18:34,680 --> 00:18:37,900
Celery는 정말.. 개인적으로 Celery와 정말 잘 어울리고

222
00:18:37,930 --> 00:18:42,700
http 요청 라이브러리 중 하나인 request와 정말 잘 어울립니다

223
00:18:42,730 --> 00:18:48,370
gevent란 녀석은 공식 홈페이지 설명처럼 coroutine인데요

224
00:18:48,400 --> 00:18:50,590
파이썬 네트워크 라이브러리예요

225
00:18:50,620 --> 00:18:56,640
greenlet이라는 녀석을 쓰는 고수준의 비동기 API입니다

226
00:19:00,550 --> 00:19:05,860
자 그러면 아까 전에 봤던 그 코드에서

227
00:19:05,890 --> 00:19:09,910
gevent를 쓰게 되면은 이런 식으로 코드를 변경해 쓸 수 있어요

228
00:19:09,940 --> 00:19:13,800
아 여기서 먼저 설명드리기 전에 여기서 오타가 있는데

229
00:19:13,830 --> 00:19:17,470
첫 번째 Jobs 이후에 그 다음 줄부터는

230
00:19:17,500 --> 00:19:21,670
+=, 플러스 부등호로 계속해서 리스트를 이어줘야 되는데

231
00:19:21,690 --> 00:19:24,370
제가 이미지를 잘못 업로드를 했네요

232
00:19:24,400 --> 00:19:26,500
이거는 양해 부탁드립니다

233
00:19:26,530 --> 00:19:30,530
자 보시면은 이런 식으로 예시가 되었는데

234
00:19:30,560 --> 00:19:35,560
여기서 하나 좀 추가적으로 설명을 드리면

235
00:19:35,590 --> 00:19:37,940
저희 내부적으로 이렇게 사용한 이유는

236
00:19:37,960 --> 00:19:42,420
검증된 데이터들을 가져오기 때문에
이런 식으로 사용했다는 점을 알아주셨으면 합니다

237
00:19:42,640 --> 00:19:45,320
그러니까 일정 수준의 레이턴시를 제공하는

238
00:19:45,350 --> 00:19:50,930
백퍼센트 장애가 발생한지 않는 가정 하에만 이렇게 쓰시는 거를 권장드리고요

239
00:19:51,280 --> 00:19:56,680
아니면 다른 여러 방법이 있든 인터넷 블로그나
뭐 미디어가 있으니까 그렇게 사용하셔도 됩니다

240
00:19:56,870 --> 00:20:02,380
결과적으로 이렇게 gevent 그러니까 coroutine을 통해서

241
00:20:02,440 --> 00:20:05,500
굉장히 부하가 많이 가는 일들을

242
00:20:05,530 --> 00:20:11,650
좀 더 효율적으로 사용할 수 있다는 점을 포인트로

243
00:20:11,680 --> 00:20:16,120
저희는 내부적으로 이런 gevent와
Celery 덕을 굉장히 많이 보고 있습니다

244
00:20:19,330 --> 00:20:21,320
그리고 좀 더 마지막으로 가고 있는데요

245
00:20:21,340 --> 00:20:26,320
이 모든 마이크로 서비스 및 모놀로틱한 파이썬 그 어플리케이션은

246
00:20:26,350 --> 00:20:31,090
도커 컨테이너 환경에서 24시간 서비스를 하고 있고요

247
00:20:31,120 --> 00:20:34,650
릴리즈 및 자동화를 Git action 으로 써가지고

248
00:20:34,680 --> 00:20:40,050
뭐 pytest를 해서 Green, Red 이런 이런 방식의

249
00:20:40,080 --> 00:20:45,550
이런 방법론에 테스트로 배포 환경을 구축해가지고 서비스를 하고 있습니다

250
00:20:50,740 --> 00:20:53,770
정말 간단한 기술적인 내용이 끝났고

251
00:20:53,800 --> 00:20:55,890
우리회사 자랑을 조금 하자면은

252
00:20:55,890 --> 00:20:58,450
저희회사는 1년에 휴가가 30일이고요

253
00:20:58,480 --> 00:21:02,020
연차는 뭐 연차에 따라서 늘어나지만 기본적으로 10일이고

254
00:21:02,050 --> 00:21:07,180
리프레쉬 휴가라는 게 있는데 뭐 6개월 근속 5일을 드려요

255
00:21:07,210 --> 00:21:13,030
그러니까 6개월 근속을 하셨고 또 6개월
근속하시면 5일, 5일에서 총 10 이렇게 돼요

256
00:21:13,060 --> 00:21:15,100
게다가 여름 휴가도 별도입니다

257
00:21:15,130 --> 00:21:19,420
괜히 저희가 여행 회사가 관련회사가

258
00:21:19,450 --> 00:21:21,550
아닌 이유가.. 굉장히 휴가가 많아요

259
00:21:21,580 --> 00:21:25,940
그리고 지금 현재는 좀 코로나 이슈가 있어가지고

260
00:21:25,970 --> 00:21:28,600
매주 수요일에는 리모트로 근무를 하고 있고

261
00:21:29,090 --> 00:21:35,120
정부 지침에 따라서 뭐 일주일 쭉 리모트로 근무를 하는 경우도 있고

262
00:21:35,160 --> 00:21:36,260
그렇게 되어 있습니다

263
00:21:36,730 --> 00:21:41,220
마지막으로 한 달에 한 번씩 맛있는 점심을 팀원 모두가 함께 즐길 수 있고

264
00:21:41,240 --> 00:21:43,820
뭐 분위기 좋은 카페나 블루보틀

265
00:21:43,840 --> 00:21:48,900
특정 브랜드 이런 좋은 카페에서 티타임을 하고

266
00:21:48,920 --> 00:21:50,590
먹고 싶은것을 많이 먹을 수 있는

267
00:21:50,610 --> 00:21:54,720
그렇게 좋은 문화를 가지고 있습니다

268
00:21:56,530 --> 00:21:59,170
그리고 정말 마지막으로 이런 개발자를 찾고 있는데요

269
00:21:59,200 --> 00:22:02,920
저희 투어라이브팀에서는 파이썬을 좋아하시고

270
00:22:02,950 --> 00:22:06,190
뭐 테스트 코드를 작성하시는 이유를 아시는 분

271
00:22:06,220 --> 00:22:08,680
그리고 Gift와 Choice라는 게 나왔는데

272
00:22:08,700 --> 00:22:13,260
뭐 Gift는 재능일 수도있고 Choice는 친절함이라고 할 수 있어요. 그러니까

273
00:22:14,530 --> 00:22:18,270
정말 똑똑한 분들을 많은데 너무 똑똑한 사람보다

274
00:22:18,290 --> 00:22:22,940
친절한 분이 둘 다 있으면 좋은데 이게 두 개는 구분해 가지고

275
00:22:22,970 --> 00:22:28,510
그런 좋은 분들이 지금 많이 있으신 걸 아니까

276
00:22:28,540 --> 00:22:32,930
이걸 보고 뭐 이렇게 똑똑한 분들도 좋지만

277
00:22:33,480 --> 00:22:37,520
좀 겸손한 분들, 그런 분들을 좀 많이 저희는 찾고 있어요

278
00:22:38,140 --> 00:22:41,160
그리고 다음으로 개발자로서 자부심이 있는 분들

279
00:22:41,180 --> 00:22:44,540
그러니까 뭔가 서비스를 내가 스타트업이기 때문에

280
00:22:44,570 --> 00:22:47,160
자신이 만든 서비스가 바로 고객들에게

281
00:22:47,190 --> 00:22:49,920
바로 보여지게 되는 경우가 굉장히 많거든요

282
00:22:49,940 --> 00:22:54,160
그러면서 뭐 개발자로서 자부심이 있는 분들 정말 환영하고 있고요

283
00:22:54,180 --> 00:22:59,440
그리고 함께 건강한 개발문화를 만들어가실 분을 찾고 있습니다

284
00:22:59,470 --> 00:23:04,750
저희는 코드리뷰나 뭐 풀퀘스트 이런 거에 굉장히 오픈 마인드이고

285
00:23:05,230 --> 00:23:09,560
더 나아가서 이런 자리도

286
00:23:09,590 --> 00:23:14,760
제가 저희 팀원들에게 이런 거 있으니까 한번 해보지 않겠느냐

287
00:23:14,780 --> 00:23:17,740
해가지고 바로 콜! 해가지고 나왔었거든요

288
00:23:17,770 --> 00:23:23,170
그러니까 이런 뭔가 개발에 대한 건강한 문화를 만들어가는 게

289
00:23:23,200 --> 00:23:28,170
여러 가지가 있는데 그런 거를 같이 만들어가는 걸 좋아하시는 분이

290
00:23:28,720 --> 00:23:31,750
있으면 정말 저는 환영할 거예요

291
00:23:31,860 --> 00:23:42,880
그리고 마지막으로 굉장히 조금 어려운 말을 생각했는데 그렇게 어려운 게 아닌 것 같아요

292
00:23:42,900 --> 00:23:47,770
정말 개발을 좋아하시는 분이면 정말 저희는 환영합니다.

293
00:23:47,800 --> 00:23:52,730
정말 개발 좋아하고 사랑하는 분

294
00:23:52,750 --> 00:23:56,750
그런 분이 있으면 저희는 정말로 환영합니다

295
00:23:58,120 --> 00:24:02,510
마지막으로 투어라이브 팀인데요. 지금은 다섯 명입니다

296
00:24:02,950 --> 00:24:07,870
그런데 앞으로 이렇게 저희가 경복궁에서 사진을 찍었는데

297
00:24:07,900 --> 00:24:11,930
다음에 해가 지날수록 더 많은 사람들이 경복궁 뒤에서

298
00:24:11,960 --> 00:24:14,680
이렇게 경복궁이 보이지 않을 만큼

299
00:24:14,800 --> 00:24:20,500
많은 사람들이 와가지고 그런 좋은 조직이 됐으면 좋겠고요

300
00:24:20,530 --> 00:24:26,050
그리고 앞에서 말씀드린 것처럼 저희는 개발자 분들을 많이 뽑고 있습니다

301
00:24:26,080 --> 00:24:30,500
그러니까 많은 관심들을 가져주셨으면 좋겠습니다

302
00:24:33,450 --> 00:24:37,480
이상으로 처음으로 좀 많이 당황하기도 했고

303
00:24:37,500 --> 00:24:42,550
좀 정신이 없는 그런 첫 리모트 발표를 마치도록 하겠습니다

304
00:24:42,580 --> 00:24:44,620
지금까지 들어주셔서 감사합니다

