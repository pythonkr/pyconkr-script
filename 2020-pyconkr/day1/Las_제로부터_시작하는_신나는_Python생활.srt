1
00:00:11,170 --> 00:00:17,209
안녕하세요 저는 이번에 제로부터 시작하는 신나는
파이썬 생활이라는 주제로 발표를 하게 된 라스입니다

2
00:00:17,680 --> 00:00:19,023
먼저 자기소개입니다

3
00:00:19,180 --> 00:00:22,336
저는 함수형 프로그래밍이나 드릴을 좋아하고요

4
00:00:22,720 --> 00:00:25,688
그리고 트위터를 하고 있어서 혹시나 궁금한 점이 있다면

5
00:00:25,868 --> 00:00:30,641
트위터로 연락해주시면 더 재밌고 신나는
이야기를 더 많이 나눌 수 있을 것 같아요

6
00:00:30,946 --> 00:00:34,680
그리고 저는 Medium이란 블로그 사이트에서 글을 올리고 있고

7
00:00:35,110 --> 00:00:39,961
그리고 Buzzvil이라는 회사에서 일을 하고
있는데 뭐 그렇게 중요한 내용은 아닌 것 같아요

8
00:00:40,900 --> 00:00:42,384
그럼 다음으로 넘어가보죠

9
00:00:43,750 --> 00:00:47,296
저는 예전에도 파이콘에서 몇 차례 발표했던 적이 있는데요

10
00:00:48,122 --> 00:00:51,637
작년과 재작년 파이콘에서 한국에서 두 번 발표했었고

11
00:00:51,970 --> 00:00:54,243
파이콘 JP에서 올해 발표하게 되었어요

12
00:00:54,790 --> 00:00:58,766
첫 번째로 발표했던 주제는 파이썬으로 함수형 프로그래밍 하기 였는데요

13
00:00:59,380 --> 00:01:03,145
파이썬은 멀티패러다임 언어이다 보니까

14
00:01:03,170 --> 00:01:07,137
함수형 프로그래밍도 객체지향도 여러 가지 패러다임을 지원하게 되었어요

15
00:01:07,180 --> 00:01:10,492
그래서 파이썬 함수형 프로그래밍을 어떻게 할 수 있을까?

16
00:01:10,517 --> 00:01:13,531
어떤 방식으로 다른 라이브러리들은 구성되어 있을까?

17
00:01:13,556 --> 00:01:16,095
같은 주제로 처음으로 발표하게 되었어요

18
00:01:16,660 --> 00:01:22,394
그 다음 주제로는 파이썬으로 DSL 만드는
방법에 대해서 발표를 하게 되었는데요

19
00:01:23,270 --> 00:01:26,836
DSL이라는 건 이제도 Domain Specific Language의 약자로서

20
00:01:26,860 --> 00:01:31,656
파이썬 언어 안에서 파이썬 언어 같지 않은 이상한 문법들을 추가해서

21
00:01:31,681 --> 00:01:34,367
언어를 만드는 거에 대한 발표를 진행하였습니다

22
00:01:34,840 --> 00:01:37,906
이렇듯 저는 파이썬을 사용하는 걸 굉장히 좋아하고

23
00:01:37,930 --> 00:01:40,722
여러 가지 재미있는 기능들을 굉장히 사랑해요

24
00:01:41,140 --> 00:01:45,397
그리고 이러한 기능들을 다른 사람들도 좋아해줬으면 좋겠어서

25
00:01:45,460 --> 00:01:47,256
이번 발표를 준비하게 되었습니다

26
00:01:48,040 --> 00:01:52,365
발표를 준비하면서 어떤 재밌는 이야기를 해볼까 곰곰히 생각하다가

27
00:01:52,390 --> 00:01:55,100
학교에서 파이썬 배우는 친구들이 생각이 났어요

28
00:01:55,480 --> 00:02:00,901
저는 파이썬을 학교에서 수업 시간에 배웠기 때문에 굉장히 재미있게 배웠는데요

29
00:02:01,210 --> 00:02:05,749
학교에서 수업으로 파이썬을 배우다 보니까
싫어하는 친구들도 반에 엄청 많이 있었어요

30
00:02:06,220 --> 00:02:11,290
저는 파이썬 엄청 재미있었는데 그 친구들도
재미있는 점을 알아갔으면 좋을 것 같아서

31
00:02:11,315 --> 00:02:13,157
이번 발표를 준비하게 되었습니다

32
00:02:13,810 --> 00:02:17,427
그럼 재미있고 신기한 것들을 만나러 떠나볼까요?

33
00:02:19,180 --> 00:02:24,875
그래서 처음에는 여러 가지 법칙 중에
재미있는 파이썬에 대해서 이야기해볼까 해요

34
00:02:26,620 --> 00:02:29,758
제일 처음에 이야기해 볼 것은 Hello World인데요

35
00:02:30,360 --> 00:02:34,633
여러분들 지금 많은 분들은 Hello World라는 프로그램을 들어보셨을 것 같아요

36
00:02:35,559 --> 00:02:40,004
Hello World라는 문자열을 화면에 출력하면 굉장히 간단한 프로그램이죠

37
00:02:40,348 --> 00:02:44,160
프로그래밍을 처음 시작하거나 이 언어를 처음 시작할 때

38
00:02:44,185 --> 00:02:47,512
자주 사용되는 게 굉장히 유명한 예제 프로그램이에요

39
00:02:49,390 --> 00:02:54,874
The C Programming Language라는 책에서 처음
등장해서 굉장히 유명한 예제로 계속 쓰이고 있죠

40
00:02:55,210 --> 00:03:00,702
파이썬에서는 이런 유명한 예제들도 굉장히
색다르게 할 수 있는 이스터에그가 숨어 있습니다

41
00:03:01,720 --> 00:03:05,776
알고 계셨나요 print도 필요 없고, 여러 줄의 코드도 필요없이

42
00:03:05,800 --> 00:03:09,729
어떤 모듈을 import인 하는 것만으로도 Hello World 프로그램을 만들 수 있어요

43
00:03:14,405 --> 00:03:19,906
화면에 보이는 코드를 파이썬이 입력하게 되면은

44
00:03:19,930 --> 00:03:21,726
Hello World를 출력하게 되는데요

45
00:03:21,859 --> 00:03:26,026
이렇듯 __hello라는 모듈을 import 하는 것만으로

46
00:03:26,050 --> 00:03:28,354
Hello World 프로그램을 만들 수가 있어요

47
00:03:28,630 --> 00:03:31,294
굉장히 재미있는 그리고 귀여운 이스터에그죠.

48
00:03:36,002 --> 00:03:38,088
조금은 흥미를 가지셨을까요?

49
00:03:38,530 --> 00:03:42,045
그러면 이제 파이썬을 사용해서 하늘을 한번 날아보면 좋을 것 같아요

50
00:03:42,730 --> 00:03:47,323
파이썬이라는 마법을 이용해서 반중력을 형성해서 하늘을 날 수가 있는데요

51
00:03:47,620 --> 00:03:49,385
어떻게 하는지 한번 살펴볼까요?

52
00:03:51,692 --> 00:03:54,270
antigravity라는 모듈을 import하면

53
00:03:54,295 --> 00:03:58,200
파이썬의 굉장한 기능으로 하늘을 날 수가 있어요

54
00:04:01,450 --> 00:04:07,075
antigravity라는 것을 실제로 입력하게 된다면
이 만화 또는 홈페이지로 이동하게 되는데요

55
00:04:07,340 --> 00:04:11,806
이 만화에서는 이제 파이썬을 이용해서 파이썬이 굉장히 좋고

56
00:04:11,830 --> 00:04:13,786
그다음에 굉장히 간결하며

57
00:04:13,810 --> 00:04:18,263
그다음에 하늘을 날 수 있게 해준다 라는 재미있는 개그가 담겨져 있어요

58
00:04:18,910 --> 00:04:23,230
한번 이 페이지를 보고 싶으시다면 저 모듈을 import해보는 것도 좋을 것 같아요

59
00:04:29,170 --> 00:04:32,599
그리고 파이선에서는 미래를 볼 수 있는 능력도 있는데요

60
00:04:33,070 --> 00:04:37,426
파이썬의 future 패키지에는 print 같은 함수를 제공하면서

61
00:04:37,450 --> 00:04:43,270
파이썬 2에서 파이썬 3의 기능이 언제나 쓸
수 있도록 미래의 기능들을 가져다 쓰고 있어요

62
00:04:43,720 --> 00:04:49,087
파이썬의 미래에는 다른 언어들처럼 if나
for문 같은 거에 중괄호가 생기게 될까요?

63
00:04:53,481 --> 00:04:58,888
위에 import를 따라 하게 되면은 syntax error가 나면서

64
00:04:58,913 --> 00:05:01,091
braces가 없다는 에러 메세지가 나오게 돼요

65
00:05:01,720 --> 00:05:03,657
braces는 중괄호를 의미하고요

66
00:05:03,880 --> 00:05:09,747
그래서 미래의 중괄호가 파이썬에 들어오지 않을 거라고 저렇게 나타내게 됩니다

67
00:05:10,330 --> 00:05:16,119
그렇다고 중괄호를 파이썬에서 아예 못 쓰는 건가 하고 슬퍼하지 않으셔도 되는 게

68
00:05:16,283 --> 00:05:18,134
dictionary를 정의하거나

69
00:05:18,159 --> 00:05:23,251
다른 용도? 아니면 f-string 같은 거에서 충분히 많이 사용하실 수 있을 거예요

70
00:05:24,310 --> 00:05:29,474
그러면 왜 중괄호가 들어오지 못하게
되었는지 파이썬의 철학을 한번 살펴보도록 하죠

71
00:05:34,090 --> 00:05:38,004
import this를 하게 되면은 파이썬이 중요하게 생각하는

72
00:05:38,050 --> 00:05:40,207
파이썬 개발 철학들이 나오게 되는데요

73
00:05:40,977 --> 00:05:44,680
굉장히 중요한 내용이기 때문에 한 번 따라 하셨으면 좋을 것 같아요

74
00:05:47,890 --> 00:05:50,530
이 내용 임포트에서 출력된 내용은

75
00:05:50,555 --> 00:05:53,679
실제로 pep20에서 제안된 내용으로

76
00:05:53,704 --> 00:05:56,641
팀 피터라는 분이 작성하신 내용인데요

77
00:05:57,071 --> 00:06:03,117
팀 피터라는 분이 파이썬 개발에 대해서 원칙과
지침들 20개의 격언으로 전달하고 있었는데

78
00:06:03,340 --> 00:06:05,621
그 중 19개만 지금 전달되고 있어요

79
00:06:05,770 --> 00:06:09,590
그리고 이거는 Zen of Python이라는 이름으로도 알려져 있는데요

80
00:06:10,870 --> 00:06:14,002
이번 파이썬 한국 사용자 모임에서는 Zen of Python이

81
00:06:14,027 --> 00:06:16,683
적힌 티셔츠를 판매하기도 하였는데요

82
00:06:16,878 --> 00:06:22,456
이 같은 Zen of Python은 파이썬을 개발하면서
지켜야 될 철학이랑 중요하게 생각하는 것들

83
00:06:22,570 --> 00:06:28,499
원칙 같은 것들을 정확히 적어둔 굉장히 좋은
문구이므로 한 번쯤 꼭 찾아보시는 것을 권장드립니다

84
00:06:30,130 --> 00:06:32,794
그리고 다른 옛날 유머가 더 궁금하시다면

85
00:06:32,819 --> 00:06:36,981
파이썬 공식 사이트의 유머가 있으니 한번 찾아보시는 것도 좋을 것 같아요

86
00:06:37,360 --> 00:06:42,602
그리고 제가 지금 여기서 언급한지 않은
여러 이스터에그들이  굉장히 많으니

87
00:06:42,627 --> 00:06:45,236
그런 것도 직접 찾아보는 것도 좋을 것 같습니다

88
00:06:46,870 --> 00:06:50,757
공식 사이트의 유머는 저 홈페이지에 가면은 볼 수 있는데요

89
00:06:50,782 --> 00:06:55,774
굉장히 옛날 유머도 있고 파이썬이랑 다른 언어를
비교하는 그런 유머도 있습니다

90
00:06:56,404 --> 00:07:00,138
굉장히 재미있는 내용이 많으니 꼭 한번 찾아보시면 좋을 것 같아요

91
00:07:01,510 --> 00:07:03,033
조금 흥미로우셨나요

92
00:07:04,122 --> 00:07:07,481
굉장히 간단하고 재미있는 것들을 먼저 소개해봤는데요

93
00:07:08,230 --> 00:07:11,339
이번에는 조금 더 신기한 것들을 얘기해볼까 해요

94
00:07:13,518 --> 00:07:16,696
신기한 것들은 제가 생각하기에 신기한 것들이었고

95
00:07:16,720 --> 00:07:19,946
이런 게 있어서 파이썬이 이런 게 된다고

96
00:07:19,971 --> 00:07:23,485
아니면 이런 기능들이 있었구나 같은 걸 소개해볼까 합니다

97
00:07:24,400 --> 00:07:28,134
앞에서 잠깐 pep에 대해서 언급했는데

98
00:07:28,173 --> 00:07:31,040
혹시 pep가 어떤 것인지 아는 분이 계실까요?

99
00:07:31,480 --> 00:07:34,769
Pep는 Python Enhancement
Proposal의 약자로

100
00:07:34,794 --> 00:07:38,034
파이썬 언어를 발전시키기 위한 제안서 같은 겁니다

101
00:07:38,530 --> 00:07:42,881
이 제안서를 통하여 여러 기능들이 논의되어 왔고
그리고 추가되어 왔어요

102
00:07:43,390 --> 00:07:49,054
파이썬의 코딩 컨벤션인 pep8 그다음에
파이썬에서 쓰는 C 언어 컨벤션인 pep7

103
00:07:49,330 --> 00:07:54,251
그리고 앞에서 언급했던 Zen of Python
도 pep1을 통해서 제한된 사항들이에요

104
00:07:54,610 --> 00:08:00,055
그리고 이 pep들을 살펴보면 어떤 이유로
무슨 기능들이 파이썬에 추가되어 왔고

105
00:08:00,250 --> 00:08:04,101
그리고 어떤 숨겨진 우리가 모르는 기능들이 
있는지 알 수 있어요

106
00:08:04,638 --> 00:08:11,848
몇 가지 흥미를 끌 만한 pep를 추천해 보자면
제가 생각하기에 pep20, 285가 있습니다

107
00:08:12,850 --> 00:08:19,209
파이썬의 아주 좋은 기능 중 하나인 List
Comprehension을 제안하는 pep가 있고

108
00:08:19,271 --> 00:08:24,763
그리고 아주 많이 쓰이는 우리가 늘 쓰고 있는
bool type을 제한하는 pep도 있어요

109
00:08:25,300 --> 00:08:28,526
저희가 쓰고 있는 true/false 타입이
bool type이에요

110
00:08:29,530 --> 00:08:34,381
그러니까 저 pep가 만들어지기 전까지는
List Comprehension도 없었고

111
00:08:34,406 --> 00:08:36,608
bool type도 존재하지 않았던 거죠

112
00:08:37,570 --> 00:08:40,996
bool type에 대한 pep는 귀도 반뤼섬이 작성했는데

113
00:08:41,020 --> 00:08:45,770
귀도 반 뤼섬은 다들 아시다시피 파이썬의
아버지라고 불리는 그런 분이죠

114
00:08:47,059 --> 00:08:50,301
굉장히 흥미로운 내용이 많기 때문에 한번
읽어보시면 좋을 것 같아요

115
00:08:51,370 --> 00:08:57,076
이렇듯 파이썬이 어떻게 발전해왔는지 보는 건
굉장히 즐거운 경험입니다

116
00:08:57,100 --> 00:09:00,740
저는 옛날에 있는 내용을 찾아보는걸 굉장히
좋아하는데

117
00:09:00,810 --> 00:09:06,185
이렇게 직접 찾아보면 역사학자나 고고학자가
된 느낌이라서 굉장히 신났어요

118
00:09:07,510 --> 00:09:10,314
그러면 몇 개의 pep을 좀 더 자세히 알아보죠

119
00:09:11,260 --> 00:09:13,431
최근에 화제가 된 pep가 있는데요

120
00:09:13,918 --> 00:09:18,855
pep622에서는 파이썬의 Structure
Pattern 매칭을 제안하고 있어요

121
00:09:19,270 --> 00:09:25,566
패턴 매칭은 굉장히 강력한 도구로
아주 재밌는 여러 가지 코드들을 만들 수 있는데요

122
00:09:25,902 --> 00:09:29,986
여러 가지 케이스가 생겼을 때 if문 대신에
패턴 매칭을 통해서

123
00:09:30,010 --> 00:09:32,230
코드를 좀 더 깔끔하게 만들 수 있습니다

124
00:09:34,510 --> 00:09:38,908
이렇게만 얘기해서 정확히 모르는 것 같아
조금 더 코드를 보도록 하죠

125
00:09:39,854 --> 00:09:44,836
이 코드는 귀도 반 뤼섬이 작성한 pep622에
있는 패턴 매칭의 예제코드에요

126
00:09:47,282 --> 00:09:52,328
14번째 줄에  int a랑 int b를 더해서
int가 나오는 함수가 있고

127
00:09:52,360 --> 00:09:56,413
17번째 줄에 list[int]랑 list[int]를 더해서

128
00:09:56,438 --> 00:09:59,716
list[int]가 나오는 그런 add 함수가 있어요

129
00:09:59,740 --> 00:10:02,888
그래서 저 두 가지 경우가 있다고 했을 때

130
00:10:02,913 --> 00:10:10,038
19번째 줄에 정의된 add는 저 두 가지 경우를
다 만족하는 함수예요

131
00:10:10,390 --> 00:10:14,015
그래서 여기에서 match라는 키워드를 사용해서

132
00:10:14,040 --> 00:10:18,327
A랑 B타입을 분석해서 이제 패턴 매칭을
진행해주는 것이죠

133
00:10:20,650 --> 00:10:24,650
이렇듯 패턴 매칭 같은 예제 코드도 pep에 들어가 있어요

134
00:10:24,970 --> 00:10:28,993
그리고 아까 얘기한 것에서 알 수 있듯이

135
00:10:29,018 --> 00:10:31,829
예제 코드를 귀도 반 뤼섬이 작성했다고 했잖아요

136
00:10:32,230 --> 00:10:36,526
그러니까 더 pep도 귀도 반 뤼섬이 작성한
pep가 되겠죠

137
00:10:38,500 --> 00:10:44,746
이렇듯 파이썬은 새로운 기능들이 들어올 때
pep를 통해서 들어온 경우가 굉장히 많습니다

138
00:10:44,770 --> 00:10:50,676
이렇게 재미있는 새로운 기능들에 대해 논의하고
싶다면 한번 찾아보는 것도 굉장히 즐거울 것 같아요

139
00:10:51,430 --> 00:10:56,734
저는 이런 기능을 보면서 뭐 이런 기능이
언제 들어오지 하고 굉장히 신나했었거든요

140
00:10:57,160 --> 00:11:01,027
그리고 그다음에 살펴볼 만한 pep는
pep404입니다

141
00:11:01,270 --> 00:11:04,574
뭔가 네트워크에서 잘못된 요청을 보내거나

142
00:11:04,599 --> 00:11:09,051
그 다음 찾으려고 하는 요소가 없을 때 발생한
에러같이 보이는데요

143
00:11:09,880 --> 00:11:14,630
실제로 비슷한 느낌pep에요. pep404에서는

144
00:11:14,655 --> 00:11:22,005
파이썬이 2.8릴리즈를 중단하기로 하고 2.7을
마지막으로 한다는 선언이 포함돼 있어요

145
00:11:22,348 --> 00:11:27,551
즉 파이썬 2을 지원 중단하고
파이썬 3만 지원하게 됐다면 결정에 담겨 있는 것이죠

146
00:11:27,850 --> 00:11:32,836
그래서 굉장히 의미가 있는 pep라고
생각을 해서 이것도 살펴보시면 좋을 것 같아요

147
00:11:32,860 --> 00:11:37,203
그리고 pep101에는 파이썬 릴리즈를
만들기 위하여

148
00:11:37,228 --> 00:11:42,703
어떤 작업들이 수행되고 어떤 사람들이
어떻게 릴리즈를 만드는지에 대한 설명이 있어요

149
00:11:43,270 --> 00:11:48,246
실제로  Python Release101의
제목을 갖고 있는 pep에요.

150
00:11:49,030 --> 00:11:51,084
굉장히 재미있는 내용이죠

151
00:11:51,550 --> 00:11:55,706
파이썬이 어떻게 릴리즈가 되고,
어떤 사람들이 릴리즈를 결정하는지

152
00:11:55,737 --> 00:11:58,971
알고 싶다면 이 문서를 찾는 방법도 굉장히
좋을 것 같아요

153
00:11:59,470 --> 00:12:04,329
그리고 이러한 제안서를 제외하고도 굉장히
재미있는 기능들이 많이 있는데요

154
00:12:04,900 --> 00:12:07,548
파이썬에는 많은 기본 라이브러리들이 있어요

155
00:12:08,080 --> 00:12:12,048
그리고 이러한 기본 라이브러리들은 설치가
필요없이 바로 사용할 수 있죠

156
00:12:12,730 --> 00:12:17,589
저는 이런 라이브러리를 구경하면서
신기한 기능들을 찾곤했어요

157
00:12:18,130 --> 00:12:22,887
저는 AST나 builtin 그다음에 GC대한
내용이 굉장히 재미있더라고요

158
00:12:23,620 --> 00:12:28,674
이 링크에 들어가면 지금 있는
공식 라이브러리들을 전체를 다 볼 수 있는데

159
00:12:28,870 --> 00:12:34,627
공식 라이브러리를 한번 살펴보고 이런 게
있었서 하는 것들 한번 찾아보는 것도 좋을 것 같아요

160
00:12:35,316 --> 00:12:39,206
그리고 제가 GC 라이브러리에 대해
굉장히 관심이 깊었어서

161
00:12:40,090 --> 00:12:42,347
그래서 궁금해 한 번 들어가 본 적이 있는데요

162
00:12:43,402 --> 00:12:48,089
GC 라이브러리를 한번 들어가 보시면
파이썬에서 GC를 켜고 끌 수 있다는 것과

163
00:12:48,223 --> 00:12:52,605
GC가 지금 접근 가능한 모든 객체를
가져올 수 있다는 것도 알 수 있었어요

164
00:12:53,140 --> 00:12:57,866
그리고 메모리 누수를 디버깅 하기 위해서
GC 동작을 다르게 가져가는

165
00:12:57,929 --> 00:13:00,921
그런 라이브러리도 있다는 걸 알게 되었구요

166
00:13:01,390 --> 00:13:07,536
그래서 만약에 제가 그런 메모리 누수를
실제로 해결해야 되는 문제 닥쳤을 때

167
00:13:07,561 --> 00:13:12,232
이러한 GC라이브러리를 궁금해 한번
살펴봤다면 굉장히 큰 도움이 될 수 없겠죠

168
00:13:13,930 --> 00:13:17,867
그리고 이런 라이브러리를 직접 사용해
보는 것도 굉장히 재미있잖아요

169
00:13:17,969 --> 00:13:21,376
가비지 컬렉터는 우리가 익히 알고 있는

170
00:13:21,400 --> 00:13:25,603
들어본 개념인데 이걸 실제로 출력하는 게
굉장히 저는 신기해거든요

171
00:13:26,050 --> 00:13:29,378
그리고 사실 이런 공개되어 있는 API보다는

172
00:13:29,432 --> 00:13:34,018
조금 더 재밌는 거는 실제 어떻게
구현되어 있는지를 보는 거예요

173
00:13:37,120 --> 00:13:39,666
실제 어떻게 구현되는지를 볼려면

174
00:13:40,377 --> 00:13:43,696
지금은 3.8 같은 경우에 저 링크를 타고 들어가서

175
00:13:43,721 --> 00:13:45,784
어떻게 구현되는지 볼 수 있는데요

176
00:13:46,341 --> 00:13:53,060
저는 최근에 봤던 구현체 중에선 타입에|
관련된 구현체가 굉장히 마음에 들었어요

177
00:13:53,320 --> 00:13:54,585
바로 이 코드인데요

178
00:13:54,610 --> 00:14:00,258
이 코드는 파이썬의 공식 라이브러리
type hint에 있는 코드예요

179
00:14:00,297 --> 00:14:02,586
1400번째 줄 정도가 되네요

180
00:14:03,150 --> 00:14:08,572
여기서는 type에서 covariant랑
invariant, contravariant 

181
00:14:08,597 --> 00:14:11,065
같은 개념들이 쓰인다는 게 굉장히 신기하더라고요

182
00:14:12,010 --> 00:14:15,150
그래서 이러한 개념들이 실제로 어떻게 구현되어
있는지

183
00:14:15,291 --> 00:14:17,298
내가 굉장히 잘 쓰고 있는 개념들이

184
00:14:17,323 --> 00:14:21,603
어떻게 실제로 동작하고 있는지를 보는 것
굉장히 재미있는 것 같아요

185
00:14:22,990 --> 00:14:25,122
그럼 이제 좀 더 멋진 걸 해볼까요?

186
00:14:28,960 --> 00:14:31,444
파이썬에서는 마법을 쓸 수가 있는데요

187
00:14:31,480 --> 00:14:35,542
아까 얘기했던 antigravity 통해서
하늘을 날 수도 있지만

188
00:14:35,567 --> 00:14:37,901
실제로 저희가 마법을 창조할 수도 있습니다

189
00:14:38,380 --> 00:14:43,856
Magic Method라는 것을 사용해서 훨씬
신기하고 멋진 코드를 만들 수 있게 도와줘요

190
00:14:44,833 --> 00:14:49,348
Magic Method는 말 그대로 저희가 마법
같은 코드를 만들 수 있게 해주는 거죠

191
00:14:53,020 --> 00:14:56,996
이거는 Magic Method를 사용한 하나의
예시를 가져온 건데요

192
00:14:58,810 --> 00:15:02,395
numbers라는 List가 있다고 해볼까요?

193
00:15:02,890 --> 00:15:06,265
1353 순서대로 담겨져 있는 List가 있어요

194
00:15:06,670 --> 00:15:11,365
그래서 이걸 맵을 적용할 건데 원래는
Lambda를 사용해서

195
00:15:11,390 --> 00:15:14,382
30 더하는걸 하고 싶지만 
_((underbar)를 사용해서

196
00:15:14,407 --> 00:15:20,280
_ + 3 하는 걸로 이제 각각의 요소에
30 더하는 함수를 만들 수도 있죠

197
00:15:21,593 --> 00:15:26,911
그리고 이제 name이 있으면 name의
소문자를 바꾸고 싶다 라고 했을 때

198
00:15:26,936 --> 00:15:32,779
언더바를 이용해서 Lambda를 구성하고 그리고
그런 Lambda를 이렇게 바로 쓸 수도 있습니다

199
00:15:33,370 --> 00:15:37,377
사실 스칼라 같은 언어를 해보시면 저런 방식이 굉장히 익숙하실 텐데

200
00:15:37,635 --> 00:15:41,158
이렇게 파이썬에 굉장히 길고 재미없는 Lambda를

201
00:15:41,183 --> 00:15:44,627
언더바를 사용해서 굉장히 재미있게 바꿀수도 있어요

202
00:15:45,460 --> 00:15:49,426
이런 것들은 매직메서드를 사용하면 
직접 구현할 수 있고

203
00:15:49,450 --> 00:15:52,285
이런 구현하는 방법은 제가 저번 발표해서

204
00:15:52,310 --> 00:15:56,918
DSL을 어떻게 만드는지에 대해서
소개를 할 때 같이 이야기를 했으니

205
00:15:57,701 --> 00:16:00,583
궁금하시다면 그 발표를 참고해주시면 
좋을 것 같습니다

206
00:16:01,330 --> 00:16:05,923
그리고 파이썬에서는 동적으로 코드를
생성하거나 실행시킬 수도 있는데요

207
00:16:06,439 --> 00:16:08,595
메타 프로그래밍이라고 합니다

208
00:16:09,689 --> 00:16:13,816
메타 프로그래밍 같은 경우에는
여러 가지 코드를 동적으로 생성하고

209
00:16:13,840 --> 00:16:15,616
그 다음에 변수를 생성하고

210
00:16:15,640 --> 00:16:20,858
파이썬의 언어를 생성해서 그 언어를 동적으로 진행시키면 그런 코드예요

211
00:16:21,580 --> 00:16:26,228
굉장히 재미있는 것들이 많이 가능해지는데
한번 예시를 보면서 얘기해보죠

212
00:16:30,460 --> 00:16:33,811
이거는 제가 작년에 발표했던 자료를 좀 가져왔는데요

213
00:16:35,403 --> 00:16:39,075
exce랑 evaluation이라는 함수를
통하여

214
00:16:39,100 --> 00:16:42,434
파이썬 코드를 동적으로 실행시키는 방법이에요

215
00:16:43,020 --> 00:16:46,512
그래서 pycon이라는 변수가 있었을 때

216
00:16:46,537 --> 00:16:52,934
저희는  exce_func랑 그 다음에 
eval_func를 각각 선언을 하고

217
00:16:53,020 --> 00:16:55,098
그리고 그런 것들을 실행시키는 거죠

218
00:16:55,780 --> 00:17:02,139
그랬을때 exec를 실행시키게 되면 실제로
exec_func라는 함수가 만들어지게 돼요

219
00:17:03,340 --> 00:17:08,511
그러니까 저 코드를 실행하는 거랑
똑같은 효과가 나타난 거죠

220
00:17:09,850 --> 00:17:14,068
사실 이 부분을 굉장히 어려울 수도
있어서 간단하게 넘어갈까 해요

221
00:17:15,609 --> 00:17:18,905
그래서 파이썬에서는 파이썬코드를 생성하고

222
00:17:18,930 --> 00:17:21,726
그리고 그 코드를 동적으로는 실행시킬 수도 있다

223
00:17:22,000 --> 00:17:27,835
그리고 이런 걸로는 변수를 동적으로 만들 수도
있고 굉장히 엄청난 코드를 만들 수 있다

224
00:17:27,860 --> 00:17:30,656
정도로 이야기할 겁니다

225
00:17:35,530 --> 00:17:41,280
그러면은 어느 정도 재미있을 것 만한
것들은 아주 일부분만 오늘 소개를 하였는데요

226
00:17:41,890 --> 00:17:46,788
사실 여기에서 다 이야기하지 못한 휴머니스트
있거나 재미있는 기능이 굉장히 많이 있어요

227
00:17:47,022 --> 00:17:49,709
그러고 일부러 뺀 기능들도 굉장히 많이 있고요

228
00:17:50,080 --> 00:17:52,470
그래서 여러분들도 관심이 있으시다면

229
00:17:52,502 --> 00:17:55,570
그리고 이러한 파이썬의 재미있는 기능들에 대해서

230
00:17:55,595 --> 00:17:58,696
더 알고 싶다면 한번 찾아보는 것도 좋을 것 같아요

231
00:17:59,080 --> 00:18:04,033
오늘 초반에 나왔던 import 같은 것들은
지금 당장 해보셔도 굉장히 좋을 것 같고요

232
00:18:05,830 --> 00:18:09,679
그래서 이제 즐거운 파이썬 생활 보내시길 바랍니다

233
00:18:11,890 --> 00:18:12,671
감사합니다
