1
00:00:10,361 --> 00:00:17,895
안녕하세요 지금부터 엘라스틱 앱 서치로 파이썬 애플리케이션에서
검색 기능을 사용하는 방법에 대해서 설명을 드리도록 하겠습니다 

2
00:00:17,920 --> 00:00:19,576
제 이름은 김종민이고요
 

3
00:00:19,600 --> 00:00:23,446
엘라스틱에서 디벨로퍼 에드버킷(Developer Advocate)으로 근무를 하고 있습니다
 

4
00:00:23,470 --> 00:00:26,355
먼저 엘라스틱에 대한 소개를 잠깐 드리겠습니다
 

5
00:00:26,379 --> 00:00:30,166
엘라스틱은 유명한 오픈소스 검색 엔진인 '엘라스틱 서치'와
 

6
00:00:30,190 --> 00:00:32,666
키바나, 로그스태시, 비츠 등이 포함된
 

7
00:00:32,691 --> 00:00:36,676
엘라스틱 스택. 과거에는 ELK 스택이라고 많이 알려져 있었는데요
 

8
00:00:36,700 --> 00:00:39,758
엘라스틱 스택을 개발하고 있는 회사입니다
 

9
00:00:40,420 --> 00:00:45,154
지금은 엘라스틱 스택과 함께 오픈소스 위에다가
 

10
00:00:45,179 --> 00:00:49,336
이제 다양한 상용기능을 같이 개발해서 제공을 하고 있는데요
 

11
00:00:49,360 --> 00:00:55,995
크게는 이제 상용 검색 그리고 통합 가시성,
보안 솔루션 등을 개발을 해서 제공을 하고 있습니다 

12
00:00:56,020 --> 00:00:58,120
그리고 본사는 캘리포니아 마운틴뷰에 있고요
 

13
00:00:58,145 --> 00:01:01,230
한국에는 스무 명의 직원 분들이 계시고
 

14
00:01:01,255 --> 00:01:04,666
대부분 직원 분들이 이제 원격으로 근무를 하고 계시고요
 

15
00:01:04,690 --> 00:01:09,826
한국에서는 저희가 2016년부터 파이콘 한국 행사에서 스폰서를 하고 있습니다
 

16
00:01:09,850 --> 00:01:12,865
그리고 본사에서도 글로벌 파이콘이라던지
 

17
00:01:12,890 --> 00:01:17,582
글로벌 장고걸스 커뮤니티 등을
계속해서 꾸준히 후원을 하고 있습니다 

18
00:01:19,450 --> 00:01:21,076
오늘 설명드릴 내용들입니다
 

19
00:01:21,100 --> 00:01:26,416
오늘은 먼저 애플리케이션이 요구하는 검색기능이란 주제로 검색이란
 

20
00:01:26,440 --> 00:01:29,206
주제에 대해서 조금 깊게 설명을 드리겠고요
 

21
00:01:29,230 --> 00:01:33,016
그 다음에 '앨라스틱 앱 서치' 기능에 대해서 잠깐 소개를 드리고
 

22
00:01:33,040 --> 00:01:36,868
그 다음에 본격적으로 파이썬 애플리케이션에서
'엘라스틱 앱 서치'를 사용을 해서 

23
00:01:36,893 --> 00:01:40,483
어떻게 검색기능을 활용을 할 수 있는지에 대해서
 

24
00:01:40,508 --> 00:01:43,936
간단한 데모와 함께 설명을 드리도록 하겠습니다
 

25
00:01:43,960 --> 00:01:47,130
자 먼저 검색에 대해서 한번 설명을 드릴 건데요
 

26
00:01:47,155 --> 00:01:51,376
우리가 검색이라고 하면은
보통 뭐 네이버나 구글이나 이런 것들을 

27
00:01:51,400 --> 00:01:53,866
가장 먼저 머리에 떠오르시는 분들이 많으실 거예요
 

28
00:01:53,890 --> 00:01:59,776
왜냐면 우리가 검색이라는 것은 이제
검색엔진이라는 거를 우리가 왜 포털 검색 엔진을 대부분 

29
00:01:59,800 --> 00:02:03,509
첫 경험으로 사용을 하셨기 때문에 그런데
 

30
00:02:03,534 --> 00:02:08,017
실제로 애플리케이션이 데이터를 다루는 곳에서 필요한
 

31
00:02:08,860 --> 00:02:13,875
그 데이터가 있다고 하면은 애플리케이션에는
당연히 들어가야 되는 게 이런 검색 기능입니다 

32
00:02:13,900 --> 00:02:17,101
그냥 데이터를 찾는 게 다 검색이라고 생각을 하시면 될 것 같아요
 

33
00:02:17,126 --> 00:02:22,508
정확히는 굉장히 많은 데이터 중에서
내가 보고 싶은 데이터만 골라서 보는 기능을 

34
00:02:22,533 --> 00:02:25,066
이제 검색이라고 생각을 하시면 될 거 같고요
 

35
00:02:25,090 --> 00:02:31,444
뭐 다른 그 개발자 분들이 흔하게 이해하는
물론 이제 쿼리라고 생각을 하시면 될 것 같습니다 

36
00:02:32,230 --> 00:02:36,698
오른쪽에 보이는 식당 검색
애플리케이션에 보시면요 

37
00:02:36,723 --> 00:02:39,286
굉장히 다양한 검색 기능을 갖추고 있는데요
 

38
00:02:39,310 --> 00:02:42,646
우리가 제일 처음 '검색'하면 떠오르는 건 텍스트 검색이죠
 

39
00:02:42,670 --> 00:02:47,443
그 검색창에다가 찾고자 하는 아이템
이름을 넣어가지고 

40
00:02:47,468 --> 00:02:52,096
이제 검색 버튼을 눌렀을 때
검색 결과가 나타나는 그런 텍스트 검색인데 

41
00:02:52,120 --> 00:02:57,076
여기서도 이제 음식 이름을 넣거나 메뉴를 넣거나 아니면 식당 이름을 넣거나
 

42
00:02:57,100 --> 00:02:59,826
그런 식으로 해가지고
아니면 식당에 가지고 있는 태그같은 

43
00:02:59,851 --> 00:03:03,046
'분위기 좋은' 아니면 뭐 '이탈리안' 아니면 뭐 '중국요리'
 

44
00:03:03,071 --> 00:03:08,356
이런 식으로 이제 뭐 다양한 텍스트를
기준으로 찾는 그런 텍스트 검색 기능이 있겠고요 

45
00:03:08,380 --> 00:03:10,666
그 다음에는 이제 범위 검색이 있을 겁니다
 

46
00:03:10,690 --> 00:03:16,856
크거나 같거나 뭐 작거나
뭐 어느 값과 어느 값 사이에 있거나 같은 

47
00:03:17,400 --> 00:03:21,533
범위 검색을, 레인지 검색을 하는 그런 기능이 필요할 텐데요
 

48
00:03:21,910 --> 00:03:26,330
보통은 이제 숫자라던지 날짜, 시간
날짜, 시간도 크게는 이제 숫자 범주에 들어가죠 

49
00:03:26,355 --> 00:03:31,936
내가 먹고자 하는 메뉴의 이름을 검색을 하면서
 

50
00:03:31,960 --> 00:03:37,143
또 이 메뉴가 얼마보단 싸게, 얼마 가격 이상의
이런 식으로 내 예산에 맞춰서 

51
00:03:37,168 --> 00:03:39,316
매뉴 가격을 범위를 검색을 한다거나
 

52
00:03:39,340 --> 00:03:42,504
아니면 식당을 몇 시부터 몇 시까지 오픈하는
 

53
00:03:42,529 --> 00:03:45,616
밤늦게 가려는데 몇 시까지 닫는
그런 오픈 시간을 검색하는 

54
00:03:45,640 --> 00:03:48,700
그런 범위 검색 같은 것들을 할 수가 있겠고요
 

55
00:03:48,725 --> 00:03:51,676
또 이제 불리언(Boolean) 검색을 할 수가 있겠죠
 

56
00:03:51,701 --> 00:03:54,076
그 체크박스 같은 걸로 보통 구현이 될 텐데요
 

57
00:03:54,100 --> 00:03:59,116
여기엔 반려견 출입이 가능한 곳이라던지 아니면은
 

58
00:03:59,140 --> 00:04:01,396
뭐 배달 음식이 가능한 곳이라던지 이런 것들
 

59
00:04:01,420 --> 00:04:07,606
아니면 뭐 베지테리언 음식이 되는 곳이라던지
이런 식의 뭐 불리언 검색 같은 것들도 제공을 할 거고요 

60
00:04:07,630 --> 00:04:13,126
특히나 요즘은 스마트폰을 많이들 쓰시기 때문에
스마트폰이 가지고 있는 굉장히 좋은 기능 중 하나가 

61
00:04:13,150 --> 00:04:16,186
내 위치 정보를 파악할 수 있는 기능인데요
 

62
00:04:16,210 --> 00:04:22,686
그렇기 때문에 '내가 가까운 곳'이라는 그런 범위를 그 검색에 넣을 수가 있어요
 

63
00:04:22,717 --> 00:04:28,546
내가 있는 곳에서 가장 가까운 식당
이런 것들을 이제 검색을 넣을 수가 있습니다 

64
00:04:28,570 --> 00:04:34,529
생각을 해보시면 검색이라는 것은
단순히 텍스트를 쳐서 결과를 보는 것뿐만이 아니라 

65
00:04:34,554 --> 00:04:39,970
슬라이드를 움직여가지고 범위를 지정을 한다던가 아니면은 이제 체크박스를 이렇게
 

66
00:04:40,240 --> 00:04:43,846
체크체크 해가지고 불리언 검색을 지정한다던가
 

67
00:04:43,870 --> 00:04:49,970
지도 같은 경우는 요즘에는 스마트폰을 가지고
지도 앱에서 손가락을 이렇게 벌렸다 오므렸다 하시면서 

68
00:04:50,500 --> 00:04:57,627
벌리면 핀이 바뀌죠. 그리고 이렇게 막 이렇게 옮겨도
위치를 옮겨도, 옮기거나 잠깐 기다려보면 핀이 다시 찍혀요 

69
00:04:58,060 --> 00:05:01,778
스마트폰에서 손가락을 벌렸다 오므렸다 하는 행위도
 

70
00:05:01,803 --> 00:05:07,080
실제로는 텍스트 창에다가 텍스트를 쳐넣는 것과
똑같은 검색행위라고 보시면 됩니다 

71
00:05:07,480 --> 00:05:12,196
이런 것들을 내 애플리케이션에서 구현을 하려면
사실 이제 검색엔진을 사용을 하셔야 되는데요 

72
00:05:12,220 --> 00:05:18,316
검색엔진을 사용하는 게 사실 이런 것들을 굉장히
다양한 것들을 알아야 되기 때문에 쉽지가 않습니다 

73
00:05:18,340 --> 00:05:22,191
엘라스틱 서치의 텍스트 검색이 가지고 있는
특징 중 하나는 

74
00:05:22,216 --> 00:05:25,786
점수 기반의 풀텍스트 검색을 지원을 한다는 건데요
 

75
00:05:25,810 --> 00:05:30,403
과거에 RDB와 검색 엔진이 가지는 가장 큰 차이는
 

76
00:05:30,428 --> 00:05:35,490
RDB에서는 LIKE 검색을 하게 되면은
그냥 데이터가 인덱스에 저장된 순서대로 

77
00:05:35,515 --> 00:05:41,626
있는지 없는지만, 내가 찾으라는 검색어가 있는지 없는지만
찾아가지고 그냥 fetch만 해와요 

78
00:05:41,650 --> 00:05:45,562
그렇기 때문에 이제 정렬이라든지 이런 거에 시간이 굉장히 오래 걸리고
 

79
00:05:45,587 --> 00:05:48,801
내가 찾으려는, 실제로 보고 싶은 걸 보려면
 

80
00:05:48,826 --> 00:05:52,966
쿼리를 굉장히, 쿼리를 최대한 자세하게 넣거나
 

81
00:05:52,990 --> 00:05:57,016
거기서 위에서부터 굉장히 오랜 시간 동안 찾아봐야 되는 경우가 많습니다
 

82
00:05:57,040 --> 00:06:02,236
하지만 이제 검색엔진은 Term Frequency TF는 Term Frequency의 약자고요
 

83
00:06:02,260 --> 00:06:08,596
그리고 IDF라고 하는 Inverse Document Frequency를 기준으로 찾습니다
 

84
00:06:08,620 --> 00:06:12,526
Term Frequency는 도큐먼트가 찾는
검색어를 많이 포함할수록 

85
00:06:12,551 --> 00:06:15,895
해당 도큐먼트의 점수가 높아져요
 

86
00:06:16,540 --> 00:06:21,886
예를 들면은 이제 내가 마블 코믹스에 관련된
 

87
00:06:21,910 --> 00:06:25,011
라이브러리가 있어요. 위키가 있어요
거기서 이제 '아이언맨 슈트'를 찾았어요 

88
00:06:25,036 --> 00:06:31,486
'아이언맨 슈트'를 찾았을 때 그 '아이언맨 슈트'라는 단어가 어떤 도큐먼트에는
 

89
00:06:31,510 --> 00:06:34,102
열 번 들어가 있고 어떤 도큐먼트에는 두 번만 들어가 있어요
 

90
00:06:34,127 --> 00:06:38,900
그러면은 내가 보고 싶어하는 '아이언맨 슈트'에 대한 설명은
 

91
00:06:38,925 --> 00:06:45,376
10번 들어간 그 결과가 실제로 내가 봐야 될 페이지를 가능성이 높겠죠
 

92
00:06:45,400 --> 00:06:48,103
그걸 계산해주는 게 이제 Term Frequency고요
 

93
00:06:48,128 --> 00:06:54,676
Inverse Document Frequency는 검색어
각각에 대한 점수를 계산을 하는 건데요 

94
00:06:54,700 --> 00:07:01,918
각각의 검색어가 전체 결과에 많이 포함되어 있으면
반대로 인벌스기 때문에 점수가 내려갑니다 

95
00:07:01,960 --> 00:07:05,116
그래서 아까 '아이언맨 슈트'를 검색을 했는데
 

96
00:07:05,140 --> 00:07:09,663
전체 도큐먼트가 백만개라고 쳤을 때
 

97
00:07:09,688 --> 00:07:14,352
'아이언맨'이라는 단어는 토큐먼트 만 개에 들어가 있어요
 

98
00:07:14,377 --> 00:07:18,914
그런데 '슈트'라는 단어는 토큐먼트 10개에 들어가 있어요
 

99
00:07:18,939 --> 00:07:22,517
그러면은 '아이언맨'이라는 단어보다는 '슈트'라는 단어가
 

100
00:07:22,542 --> 00:07:25,396
더 중요도가 높은 단어라고 생각을 하시면 될 거 같애요
 

101
00:07:25,420 --> 00:07:29,388
그런 식으로 이제 구분을 해주는 게 Inverse Document Frequency입니다
 

102
00:07:30,280 --> 00:07:33,278
실제로 이제 위키에서 갖고 온 데이터들 중에서
 

103
00:07:33,303 --> 00:07:39,616
'롤플레잉 게임'이라는 검색어를 했을 때
점수가 어떻게 나오는지를 볼게요 

104
00:07:39,640 --> 00:07:44,061
보시면은 이제 '롤플레잉 게임'이라는 단어로 검색을 했을 때
 

105
00:07:44,086 --> 00:07:47,781
엘라스틱 서치는 이런 식으로 JSON 형식으로 쿼리를 합니다
 

106
00:07:48,458 --> 00:07:51,680
상위 두 개의 결과를 갖고 왔는데요
 

107
00:07:51,705 --> 00:07:54,856
뭐 아래에 더 많습니다만 이 두 개만 보겠습니다
 

108
00:07:54,880 --> 00:07:56,948
'롤플레잉 비디오 게임'이라는 문서가 있고요
 

109
00:07:56,973 --> 00:07:59,667
'대규모 다중 사용자 온라인 롤플레잉 게임'이란 문서가 있어요
 

110
00:07:59,692 --> 00:08:04,463
여기는 제목만 가지고 왔는데
실제로는 본문 내용에서 이걸 검색한 결과고요 

111
00:08:04,488 --> 00:08:07,433
본문 내용에서 '롤플레잉 게임'이라는 단어로 검색을 했을 때
 

112
00:08:07,488 --> 00:08:11,655
'롤플레잉 비디오 게임'이라는 토큐먼트는 20점
 

113
00:08:11,680 --> 00:08:18,256
그리고 '대규모 다중 사용자 온라인 롤플레잉 게임'이라는
토큐먼트는 19.9점 해서 조금 더 얘가 높아요 

114
00:08:18,281 --> 00:08:23,405
그러면 먼저 어떻게 이렇게 나왔는지 보면은
각각의 Term Frequency를 보겠습니다 

115
00:08:23,430 --> 00:08:29,042
그러면 '롤플레잉'이라는 단어는 13점을 가지고 있고
'게임'이라는 단어는 7점이에요 

116
00:08:30,234 --> 00:08:35,474
롤플레잉. 전체 도큐먼트 중에서 '롤플레잉'이라는
단어가 포함된 도큐먼트는 총 17개입니다 

117
00:08:35,499 --> 00:08:41,034
그리고 전체 도큐먼트에서
'게임'이란 단어를 포함하고 있는 토큐먼트는 253개예요 

118
00:08:41,059 --> 00:08:45,480
그럼 IDF가, 이건 낮을수록 점수가 높은 거니까
 

119
00:08:45,505 --> 00:08:49,410
'게임'보다는 '롤플레잉'이라는 단어에 좀 더 가중치가 올라갑니다
 

120
00:08:50,231 --> 00:08:51,825
그 다음에 이제 TF를 볼 건데요
 

121
00:08:51,850 --> 00:08:56,748
'롤플레잉'이라는 단어를 아까 그 첫 번째
'롤플레잉 비디오 게임' 문서에서 봤을 때 

122
00:08:56,803 --> 00:09:00,028
여기는 총 '롤플레잉'이라는 단어가 12번이 나옵니다
 

123
00:09:00,053 --> 00:09:05,301
그리고 '대규모 다중 사용자 온라인 롤플레잉 게임'
문서에서 봤을 때는 여기에는 총 4번이 나와요 

124
00:09:05,326 --> 00:09:10,880
그래서 결국에는 '롤플레잉 비디오 게임'이라는 그 문서가
 

125
00:09:10,905 --> 00:09:14,287
이 결과가 점수가 높아서 나오게 됩니다
 

126
00:09:14,764 --> 00:09:16,544
Range랑 Boolean은 건너뛸게요
 

127
00:09:16,569 --> 00:09:21,026
그 다음에 엘라스틱서치는 또 이 위도
경도를 기반으로 하는 위치 검색도 지원을 해요 

128
00:09:21,051 --> 00:09:26,895
그래서 엘라스틱서치를 가지고 이제 이런 검색 기능을
만들게 되면은 위치 검색도 가능합니다 

129
00:09:26,920 --> 00:09:34,740
이렇게 'lat'랑 'lon'라는 이름으로, 아까 표시한 게 있네요
 

130
00:09:34,795 --> 00:09:39,915
쌍으로 저장을 하게 되면 '위치 정보값'이라는 특수한 타입으로 저장이 되는데요
 

131
00:09:39,940 --> 00:09:43,898
내가 있는 이 지점을 기준으로 이게 쿼리에 들어간 겁니다
 

132
00:09:43,923 --> 00:09:48,775
거기에서 Geo-Distance 쿼리로 반경 5㎞를 검색을 하면은
 

133
00:09:48,806 --> 00:09:54,765
여기 5㎞ 안에 있는 값들 중에. 여의도와 서울역에 걸리네요
그 결과가 이렇게 나와요 

134
00:09:54,790 --> 00:10:00,218
그래서 여의도는 어디, 서울역은 어디.
5km가 아니라 10km 정도로 하면 이제 종로 3가까지 나오겠죠 

135
00:10:00,243 --> 00:10:06,163
이런 식으로 Range를 기준으로 위치 검색도 
이제 엘라스틱서치에서 지원을 합니다 

136
00:10:06,188 --> 00:10:10,011
오늘 설명드릴 '앱 서치'에서도 이 Geo 서치를 할 수가 있어요
 

137
00:10:10,036 --> 00:10:15,825
그런데 데모에서 그거까지는 보여드리지는
않을 거지만 할 수 있다는 것도 말씀을 드립니다 

138
00:10:15,850 --> 00:10:20,776
그런데 이렇게 복잡한 검색엔진 기능을 내가 충분히 다 활용을 하려면
 

139
00:10:20,800 --> 00:10:25,508
정말 공부도 많이 하셔야 되고 봐야 될 것도
건드려야 될 것도 많고 굉장히 복잡해요 

140
00:10:25,533 --> 00:10:30,291
그래서 엘라스틱서치가 이제 오픈소스로 모든 기능들을 다 제공을 하고 있는데
 

141
00:10:30,316 --> 00:10:32,947
이것들을 좀 더 쉽게 사용을 하실 수 있게
만들기 위해 

142
00:10:32,972 --> 00:10:36,587
이것들을 굉장히 쉬운 솔루션으로 저희가 다 만들고 있어요
 

143
00:10:37,060 --> 00:10:43,425
만들고 있고. 이거를 오픈소스는 아니지만 저희 엘라스틱의 상용 라이센스이지만
 

144
00:10:43,450 --> 00:10:48,436
대부분의 기능은 또 저희가 엘라스틱 홈페이지에서의 배포판을 받아서
 

145
00:10:48,460 --> 00:10:50,241
대부분은 무료로 사용을 하실 수가 있습니다
 

146
00:10:50,266 --> 00:10:57,339
오늘 설명드릴 '엘라스틱 앱 서치'도 대부분의 기능을 무료로 사용하실 수가 있고요
 

147
00:10:57,364 --> 00:11:02,512
엘라스틱의 제품이 크게 세 가지 제품으로 
'엔터프라이즈 서치' 그러니까 상용 검색 

148
00:11:02,537 --> 00:11:06,918
그리고 '옵저버빌리티' 가관측성 
그리고 '시큐리티' 보안 

149
00:11:06,943 --> 00:11:11,074
이렇게 크게 세 가지 카테고리로 저희가 구분해서 요즘은 만들고 있는데요
 

150
00:11:11,099 --> 00:11:15,706
그 중에 이제 이 '앱 서치'라는 제품은 '엔터프라이즈 서치' 안에 포함이 되어 있고요
 

151
00:11:15,731 --> 00:11:21,855
엔터프라이즈 서치 안에는 웍플레이스 서치, 앱 서치,
사이트 서치라는 세 가지 제품이 크게 있고 

152
00:11:21,880 --> 00:11:26,146
그 중에 이제 오늘 살펴볼 것이 '엘라스틱 앱 서치'입니다
 

153
00:11:26,170 --> 00:11:29,056
엘라스틱 앱 서치 아키텍처에 대해서 잠깐 설명을 드릴게요
 

154
00:11:29,080 --> 00:11:34,816
엘라스틱을 사용해보신 분들은 데이터는 어디에 저장이 되냐고
 

155
00:11:34,840 --> 00:11:38,266
또 물어보시는 궁금해하시는 분들이 계실 텐데요
 

156
00:11:38,290 --> 00:11:42,256
엘라스틱서치라는 그 프로그램이 데이터를 다 저장을 해요
 

157
00:11:42,280 --> 00:11:45,895
그러니까 엘라스틱서치가 검색엔진이면서 데이터 저장소이기도 합니다
 

158
00:11:46,300 --> 00:11:47,686
데이터를 저장을 하고 있고요
 

159
00:11:47,710 --> 00:11:50,583
그 다음에 키바나(Kibana)라는 저희 시각화 도구가 있어요
 

160
00:11:50,608 --> 00:11:54,676
그래서 키바나로 엘라스틱서치 안에 있는 데이터를 간단한 커리를 한다던가
 

161
00:11:54,700 --> 00:11:59,506
내가 필요한 모니터링 대시보드를 만든다던가 하는 것들을 하실 수가 있습니다
 

162
00:11:59,530 --> 00:12:03,376
그런데 오늘 설명드릴 앱 서치는 별도의 프로그램을 하나 더 띄워야 돼요
 

163
00:12:03,400 --> 00:12:06,711
이제 '앱 서치 엔진'을 하나 더 띄우셔야 되고요
 

164
00:12:06,736 --> 00:12:11,116
이 앱 서치 안에서 앱 서치 프로세스 더 띄우시면은
 

165
00:12:11,140 --> 00:12:13,606
이 앱 서치가 엘라스틱서치랑 연동이 되고
 

166
00:12:13,630 --> 00:12:19,726
앱 서치에 API 등으로 접근을 해서 
뭔가 프로그램을 사용을 하실 수가 있습니다 

167
00:12:19,750 --> 00:12:25,396
앱 서치는 안에서 각각 그 엔진이라고 하는
 

168
00:12:25,420 --> 00:12:28,020
엔진이라고 하는 것을 만들어요
 

169
00:12:28,045 --> 00:12:32,386
하나의 엔진이 하나의 데이터 셋을 다룬다고 생각을 하시면 될 거 같고요
 

170
00:12:32,410 --> 00:12:35,011
앱 서치를 뭐 하나만 설치해놓고
 

171
00:12:35,036 --> 00:12:40,486
거기에 대여섯 종류의 데이터를 다루실 때도
대여섯개의 엔진을 만드셔서 다루시면 됩니다 

172
00:12:40,510 --> 00:12:46,666
이거는 이제 그 간단하게 앱 서치 바이너리를
다운로드하셔서 엘라스틱서치, 키바나, 엡서치 이걸 다 

173
00:12:46,690 --> 00:12:50,336
로컬이나 클라우드에 실행을 하셔서 사용을 하셔도 되고요
 

174
00:12:50,361 --> 00:12:54,376
엘라스틱에서 제공을 하는 '엘라스틱 클라우드'를 사용을 하셔도 됩니다
 

175
00:12:54,400 --> 00:12:57,106
엘라스틱 앱 서치 화면인데요
 

176
00:12:57,130 --> 00:13:02,169
엔진을 만들고 나면 이런 식으로 이제
도큐먼트를 다룰 수 있는 다양한 메뉴들이 있어요 

177
00:13:02,194 --> 00:13:04,876
여기서 이제 굉장히 많은 것들을 할 수가 있는데요
 

178
00:13:04,900 --> 00:13:10,486
이런 식으로 API 엔드포인트로 가져올 수가 있고
뭐 Search Key 나 Private Key 같은 것들을 가져와서 

179
00:13:10,510 --> 00:13:14,176
클라이언트 프로그램에서 사용을 하게 됩니다
 

180
00:13:16,180 --> 00:13:21,466
앱 서치는 루비라던지 NodeJS라든지 파이썬이라던지 이런
 

181
00:13:21,490 --> 00:13:25,156
각각의 언어에 대한 클라이언트를 제공을 하는데요
 

182
00:13:25,180 --> 00:13:30,242
대부분은 REST API로 통신을 하기 때문에
클라이언트를 제공을 하지 않는 경우에도 

183
00:13:30,267 --> 00:13:32,926
뭐 REST API를 직접 다뤄서 하실 수도 있습니다
 

184
00:13:32,950 --> 00:13:36,586
하지만 이제 클라이언트를 사용을 하시면 되구요
 

185
00:13:36,610 --> 00:13:40,366
앱 서치의 클라이언트는 먼저 pip로 설치를 하시면 되고요
 

186
00:13:40,390 --> 00:13:45,916
pip로 설치하신 다음에는 Client라는
패키지를 이렇게 가지고 오셔서 거기에 

187
00:13:45,940 --> 00:13:49,741
이제 엔드포인트와 API키를 이런 식으로 넣습니다
 

188
00:13:49,766 --> 00:13:51,706
그렇게해서 활용을 하시면 되고
 

189
00:13:51,730 --> 00:13:55,847
그 만든 클라이언트를 가지고 이제 인덱스를
한다거나 서치를 한다거나 

190
00:13:55,872 --> 00:13:59,664
검색엔진에서는 데이터를 저장할 때 인덱스라고 보통 표현을 해요
 

191
00:13:59,689 --> 00:14:05,738
색인이라는 단어를 많이 쓰기 때문에 인덱스를
하거나 써치를 한다거나 이렇게 하실 수가 있고요 

192
00:14:07,722 --> 00:14:14,175
이 모든 내용은 https://github.com/elastic/app-search-python
리파지토리 안에 있습니다 

193
00:14:14,200 --> 00:14:18,607
그래서 직접 한번 데모를 통해서 요거를 해보도록 하겠습니다
 

194
00:14:19,450 --> 00:14:22,582
잠시만요. 펜 지우기를 하고
 

195
00:14:22,607 --> 00:14:29,386
자 그 엘라스틱 클라우드에서 먼저
엔터프라이즈 서치 인스턴스 생성하는 것을 한번 보겠는데요 

196
00:14:29,410 --> 00:14:32,669
엘라스틱 클라우드를 한번 살펴보도록 하겠습니다
 

197
00:14:33,730 --> 00:14:37,513
아, 여기가 이제 엘라스틱 웹서치 파이썬 화면이고요
 

198
00:14:38,230 --> 00:14:41,716
앱 서치에 들어가서 보시면 여기에
대부분의 도큐먼트가 여기 있어요 

199
00:14:41,740 --> 00:14:47,146
그래서 처음에는 이제 "python -m pip install elastic-app-search"를 먼저 하셔야 됩니다
 

200
00:14:47,170 --> 00:14:52,889
저는 이미 설치가 되어 있어서요
 이런 식으로 이제 설치를 하시면 되고요 

201
00:14:52,914 --> 00:14:55,307
여기에 몇 가지 디펜던시가 있는데요
 

202
00:14:55,332 --> 00:15:00,861
Requests와 PyJWT가 설치가 안 돼 있으면 설치를 하셔야 됩니다
 

203
00:15:01,300 --> 00:15:06,619
이렇게 하고 여기 보시면은
각각의 기능에 대해서 설명이 되어 있어요 

204
00:15:06,644 --> 00:15:08,955
먼저 가장 중요한 게 클라이언트를 먼저 만드셔야 돼요
 

205
00:15:08,980 --> 00:15:14,686
클라이언트 객체를 먼저 만드셔서
이 클라이언트 객체에서 활용을 하시게 되고 

206
00:15:14,710 --> 00:15:20,300
클라이언트를 로컬에서 사용하시는 경우는
이렇게 localhost 해서 이렇게 쓰시면 되는데 

207
00:15:20,325 --> 00:15:23,656
클라우드에서 쓰시는 경우는 이제 클라우드 엔드포인트가 있습니다
 

208
00:15:23,680 --> 00:15:26,836
클라우드 엔드포인트를 이런 식으로 쓰시면 돼요
 

209
00:15:26,860 --> 00:15:32,086
또 차이가 https가 클라우드에서는
 

210
00:15:32,110 --> 00:15:35,258
True로 해놓으셔야 되는 게 차이점이고요
 

211
00:15:35,680 --> 00:15:40,516
자 그러면 클라우드를 먼저 하나 만들어보겠습니다
 

212
00:15:40,540 --> 00:15:45,376
cloud.elastic.co 에 들어가시면은 이제 클라우드를 생성하실 수가 있고요
 

213
00:15:45,400 --> 00:15:51,676
여기에서 이제 간단하게 사인업을 하시면은 무료로
한 14일 정도 사용하시는 그런 코드도 저희가 같이 드리니깐요 

214
00:15:51,700 --> 00:15:54,916
14일 동안 무료로도 사용하실 수가 있으니까요
 

215
00:15:54,940 --> 00:15:59,154
없으신 분들은 한번 테스트 삼아 사용해 보셔도 괜찮을 것 같습니다
 

216
00:16:00,280 --> 00:16:06,706
자 Create Deployment를 하신 다음에 'pycon 2020' 이런 식으로 하고
 

217
00:16:06,730 --> 00:16:11,776
구글 클라우드 플랫폼, 애저, 아마존 AWS 중 선택을 하실 수가 있고요
 

218
00:16:11,800 --> 00:16:16,816
지금 그 아마존 AWS에는 서울리전이 얼마 전에
 

219
00:16:16,840 --> 00:16:19,546
뭐 지금 한 달도 안 됐습니다 얼마 전에 그 오픈을 했어요
 

220
00:16:19,571 --> 00:16:23,566
그래서 필요하시면 서울리전을 선택을 하셔서 사용을 하시면 되고
 

221
00:16:23,590 --> 00:16:28,213
엘라스틱 과거 버전이 필요하시면 여기에
에디터를 눌러서 과거 버전을 선택하시면 되고요 

222
00:16:28,238 --> 00:16:32,435
서울리전에는 과거 버전이 몇 개 없습니다
다른 곳에는 더 많아요 

223
00:16:32,950 --> 00:16:35,356
그리고 중요한 게 여기 탬플릿인데요
 

224
00:16:35,380 --> 00:16:40,620
저희는 이제 앱 서치를 사용할 것이기 때문에
'Elastic Enterprise Search' 템플릿을 사용을 해야 됩니다 

225
00:16:40,645 --> 00:16:46,816
그렇지 않으면 그 앱 서치 엔진이 다른 곳에서는
이제 정상적으로 좀 잘 지원이 안 돼요 

226
00:16:46,870 --> 00:16:52,336
이렇게 하고 이제 Create를 하실 수도 있고
Customize 해가지고 뭐 사이즈를 여기서 이렇게 조절하실 수도 있고 

227
00:16:52,360 --> 00:16:56,095
그러면은 한 달 요금이 얼마인지 이런 식으로 나오겠죠
 

228
00:16:57,520 --> 00:17:02,168
이렇게 하신 다음에 'Create Deployment'를
클릭을 하시면은 

229
00:17:02,193 --> 00:17:06,687
이제 엘라스틱 클라우드에 배포가 시작이 됩니다
 

230
00:17:10,420 --> 00:17:12,873
자 이렇게 시작이 됐는데 처음에 시작할 때
 

231
00:17:12,898 --> 00:17:18,075
'elastic' 이라는 슈퍼유저 계정을 이렇게
한번 보여줘요 클라우드에서는요 

232
00:17:18,099 --> 00:17:20,738
그래서 엘라스틱 슈퍼유저 계정하고
패스워드를 한번 보여주는데 

233
00:17:20,763 --> 00:17:25,005
이 화면은 닫고 나면 다시는 볼 수가 없기 때문에
다운로드 해가지고 이거를 

234
00:17:25,021 --> 00:17:28,544
좀 보관을 하시거나
어디에다가 카피를 해놓으셔야 됩니다 

235
00:17:28,569 --> 00:17:32,770
그래서 이거는 여기다 다시 카피를 해놓을게요
 

236
00:17:34,180 --> 00:17:38,146
자 이 계정인데 저 위에 하나가 더 있죠
 

237
00:17:38,170 --> 00:17:41,184
제가 이거는 좀 시간이 걸릴 것 같아서 미리 하나 만들어 놓은 게 있습니다
 

238
00:17:41,209 --> 00:17:44,056
그걸 가지고 사용을 하겠습니다
 

239
00:17:44,080 --> 00:17:47,915
'PyCon Seoul 2020' 이게 이제 미리 만들어놨던 것인데요
 

240
00:17:48,760 --> 00:17:54,616
다 만들고 나면 여기 안에 엘라스틱서치
지금 인스턴스 세 개가 떠 있고요 

241
00:17:54,640 --> 00:17:59,536
키바나는 인스턴스가 하나가 떠 있고
엔터프라이즈 서치 인스턴스가 두 개가 떠 있습니다 

242
00:17:59,560 --> 00:18:07,902
그래서 전체 내용 중에서 이제 이 Cloud ID와
엔터프라이즈 서치에 대한 엔드포인트가 여기 있어요 

243
00:18:07,927 --> 00:18:13,097
그래서 여기를 복사해서 붙여넣으셔도 되고 런치를 바로 하셔도 됩니다
 

244
00:18:13,122 --> 00:18:15,729
런치를 하시면은 여기에 들어가게 되는데
 

245
00:18:15,754 --> 00:18:21,406
아까 보셨던 그 아이디랑 패스워드를 넣고 들어가시면 됩니다
 

246
00:18:21,430 --> 00:18:25,539
사실 이거보다는 직접 그 슈퍼유저 계정은 봉인하시고
 

247
00:18:25,564 --> 00:18:30,816
다른 계정을, 적절한 권한의 다른 계정을 
만들어서 쓰시는 거를 좀 더 권장드립니다 

248
00:18:31,390 --> 00:18:35,535
엔터프라이즈 서치에 들어가시면 두 가지를 사용을
할 수가 있는데 앱 서치와 워크 플레이스 서치입니다 

249
00:18:35,560 --> 00:18:37,691
앱 서치를 사용을 하겠습니다
 

250
00:18:38,410 --> 00:18:41,236
지금 저희가 엔진을 하나도 만들지 않았어요
 

251
00:18:41,260 --> 00:18:44,026
앱그래서 앱 서치 엔진을 처음에 하나 만들 건데요
 

252
00:18:44,050 --> 00:18:47,416
오늘 사용할 데이터 셋을 잠깐 보여드리면요
 

253
00:18:47,440 --> 00:18:50,352
저희가 'Video Games'라는 데이터 셋이 있어요
 

254
00:18:50,377 --> 00:18:55,797
보시면 이제 'Wii Sports', 'Mario Kart' 이런 것들이 있는데
 

255
00:18:55,822 --> 00:19:08,910
뭐 네임, 발매일이겠죠. 장르, 평점 
그리고 닌텐도 퍼블리셔, 플랫폼 위 뭐 이런 것들이 있어요 

256
00:19:08,950 --> 00:19:11,506
그러니까 이 내용들을 가지고 한번 해보도록 하겠습니다
 

257
00:19:11,530 --> 00:19:20,100
그래서 엔진 이름을 한번 'video-games'라고 할까요?
'video-games' 

258
00:19:20,140 --> 00:19:22,663
뭐 랭귀지를 선택을 하실 수가 있는데
 

259
00:19:22,688 --> 00:19:27,029
한국어가 있기는 한데 한국어를 한다고 해서
한국dj 형태소 분석기가 적용되지는 않습니다 

260
00:19:27,054 --> 00:19:29,530
뭐 그냥 그냥 유니버셜로 하셔도 상관없어요
 

261
00:19:29,562 --> 00:19:34,109
그래서 Continue를 하고
'video-games'라는 엔진을 이제 시작을 합니다 

262
00:19:34,540 --> 00:19:40,437
자 스킵을 할게요 온보딩은 스킵을 하고
이제 'video-games'라는 엔진이 시작이 됐고요 

263
00:19:41,170 --> 00:19:45,166
지금은 데이터가 하나도 없기 때문에 이렇게 그냥 오버뷰 화면만 나오는데요
 

264
00:19:45,190 --> 00:19:52,305
도큐먼트를 여기다 넣기 위해서는 이렇게 Paste JSON해서
그냥 도큐먼트를 내용을 복사-붙여넣기 해서 넣으실 수도 있고요 

265
00:19:52,330 --> 00:19:54,616
파일을 여기서 업로드하실 수도 있습니다
 

266
00:19:54,640 --> 00:19:57,946
하지만 저희는 개발을 할 거니까 API를 사용을 해야겠죠
 

267
00:19:57,970 --> 00:20:04,962
자 API를 사용을 하실 때는 뭐 이런 식으로 
이제 API를 사용을 하시면 되는데요 

268
00:20:04,987 --> 00:20:09,197
API에 대한 키는 맨 아래에 보시면 Credentials 이라는 메뉴에 있습니다
 

269
00:20:09,222 --> 00:20:15,106
그래서 이걸 클릭하시면 엔드포인트 액세스와 서치키, 프라이빗키가 나오고요
 

270
00:20:15,130 --> 00:20:20,021
자 먼저 py-app-index.py 프로그램을 잠깐 보도록 하겠습니다
 

271
00:20:20,046 --> 00:20:23,960
그래서 'elastic_app_search' 에서 'Client'를 가져오고
 

272
00:20:23,985 --> 00:20:34,187
이 client는, base_endpoint는 이건데 여기서 잠깐
실수하시기 쉬운 게 앞에 https://는 좀 빼주셔야 돼요 

273
00:20:35,140 --> 00:20:40,786
얘는 빼주셔야 되고 여기서부터 이제 끝에 /api/as/v1 까지 쓰시면 되고요
 

274
00:20:40,810 --> 00:20:42,976
그 다음에 API 키는 두 개가 있어요
 

275
00:20:43,000 --> 00:20:49,209
search-key랑 private-key가 있는데요. 얘는 서치 그러니까
공개키라고 보시면 될 것 같아요 아무데서나 보실 수 있는 

276
00:20:49,234 --> 00:20:53,021
그런데 뭔가 Read-Write를 하기 위해서는 private-key를
사용을 해야 되니까 

277
00:20:53,046 --> 00:20:55,936
이제 private-key를 Copy를 하겠습니다
 

278
00:20:55,960 --> 00:21:03,106
이렇게하고 여기다가 붙여넣기를 하고요 
use_https는 True로 하고 engine_name은 저희가 

279
00:21:03,130 --> 00:21:04,966
'video-games'라고 만들었죠
 

280
00:21:04,990 --> 00:21:10,973
그래서 'video-games'로 하겠습니다
 

281
00:21:11,710 --> 00:21:16,636
자 먼저 하나의 싱글 도큐먼트를 저장하는 법을 한번 보도록 하겠습니다
 

282
00:21:16,660 --> 00:21:20,716
이것도 아까 도큐먼트에서 다시 한 번 먼저 확인을 해볼까요?
 

283
00:21:20,740 --> 00:21:27,106
쭉 내려가 보시면 "Creating or Updating Single Document"가 있고
"Creating or Updating Multiple Documents" 

284
00:21:27,130 --> 00:21:28,636
이런 식으로 있는데
 

285
00:21:28,660 --> 00:21:33,324
엔진을 만들고 나서 도큐먼트 안에다가 이제
이런 식으로 도큐먼트를 넣고 

286
00:21:33,349 --> 00:21:38,536
client.index_document해서
엔진명이랑 도큐먼트만 이렇게 넣으시면 됩니다 

287
00:21:38,560 --> 00:21:47,263
그래서 우리도 도큐먼트를 이렇게 만들었고요
아까 거기 요 파일에 있던 가장 위 데이터만 가지고 왔습니다 

288
00:21:47,350 --> 00:21:50,512
client.index_document에 engine_name, 이 'video-games'죠
 

289
00:21:50,537 --> 00:21:53,836
그리고 도큐먼트를 이렇게 넣어서 넣어보도록 하겠습니다
 

290
00:21:53,860 --> 00:21:59,356
이거를 바로 python py-app-index.py
 

291
00:21:59,380 --> 00:22:04,645
해서 넣게 되면은
한 번 들어서 확인해볼까요? 

292
00:22:05,800 --> 00:22:10,336
자 데이터가 하나 들어갔다고 지금 이렇게 화면이 리프레시가 됐어요
 

293
00:22:10,360 --> 00:22:13,578
그리고 이제 여기 Schema에 들어가 보시면은
 

294
00:22:13,603 --> 00:22:20,806
global_sales, year, name, genre 처럼 필드들의 이름으로
자동으로 스키마가 생성된 걸 보실 수가 있고요 

295
00:22:20,830 --> 00:22:24,706
Documents안에 들어가 보시면
이제 있는 도큐먼트를 하나하나 보실 수가 있습니다 

296
00:22:24,730 --> 00:22:28,006
지금 들어간 wii-sports 도큐먼트가 여기 있고요
 

297
00:22:28,030 --> 00:22:32,656
하나하나 지우실 때는 여기서 Delete 버튼 누르셔서 지우실수도 있습니다
 

298
00:22:32,680 --> 00:22:36,346
이거는 지울게요
저희가 다시 올릴 것이기 때문에 

299
00:22:36,370 --> 00:22:41,866
자 다시 오버뷰로 가겠습니다
보통은 리프레시 되는 데는 시간이 조금씩 걸립니다 

300
00:22:41,890 --> 00:22:47,596
자 그 다음은 싱글 도큐먼트는 봤으니까 이제 멀티플 도큐먼트를 할 건데요
 

301
00:22:47,620 --> 00:22:57,255
이번에는 그 아까 보셨던 비디오 video-games.json 파일에서
이 파일를 먼저 읽어들입니다 

302
00:22:57,280 --> 00:23:02,686
파일을 먼저 읽어들이고 그 파일을 백개씩
끊어가지고 데이터를 백 개씩 끊어가지고 

303
00:23:02,710 --> 00:23:06,816
슬라이스를 만들어서 백개씩 여기다가 업로드를 하겠습니다
 

304
00:23:06,841 --> 00:23:11,644
이렇게 하고 그거를 이제로 루프문을 돌면서 실행을 하도록 하겠습니다
 

305
00:23:11,669 --> 00:23:16,486
그래서 'python py-app-index.py' 해서 올립니다
 

306
00:23:16,510 --> 00:23:24,570
그러면은 100개 200개 300개 여기에 도큐먼트가 한 4047개인가?
 

307
00:23:24,595 --> 00:23:27,406
4057개인가? 정도가 있거든요
 

308
00:23:27,430 --> 00:23:30,794
이렇게 올라가고 있고요
 

309
00:23:32,050 --> 00:23:37,202
리프레시는 이제 1분마다. 디폴트로 1분마다 한 번씩 되는데요
 

310
00:23:37,227 --> 00:23:40,456
저는 잠시 기다려보시면은 이제 리프레시가 될 겁니다
 

311
00:23:40,480 --> 00:23:44,075
지금 1800개까지 올라간 상태고요
 

312
00:23:46,120 --> 00:23:51,706
자 이 앱 서치가 좋은 게 이런 그 애널리틱스를 보여줘요
 

313
00:23:51,730 --> 00:23:56,128
얼마나 이제 데이터가 색인이 됐고 얼마나 사람들이 쿼리를 했고 이런 것들을
 

314
00:23:56,159 --> 00:24:00,556
이런 것들도 이제 기본으로 제공이 되기 때문에 굉장히 편합니다
 

315
00:24:00,580 --> 00:24:06,207
자 그래서 지금 우리는 아까 썼던
 

316
00:24:06,430 --> 00:24:11,584
지금 엘라스틱 클라우드에서
엔터프라이즈 서치 인스턴스를 생성을 했고 

317
00:24:11,609 --> 00:24:15,645
앱 서치 엔진을 생성을 해서
video-games 엔진을 만들었고요 

318
00:24:15,670 --> 00:24:19,966
단일 도큐먼트 색인이랑 여러 도큐먼트 색인을 지금해봤습니다
 

319
00:24:19,990 --> 00:24:21,586
그러면 검색을 한번 해볼게요
 

320
00:24:21,610 --> 00:24:27,335
검색을 하기 전에
자 여기 보시면 Query Tester라는 것이 있어요 

321
00:24:27,360 --> 00:24:32,335
Query Tester에서 'pokemon'이라는 거는 검색을 해볼게요
 

322
00:24:32,360 --> 00:24:35,217
그러면 여기서는 자동완성이 되는데요
 

323
00:24:35,242 --> 00:24:41,756
'Pokemon Ranger', 'Pokemon Battle Revolution', 
'Pokemon Emerald Version', 'Pokemon Dash'라는 이름으로 

324
00:24:41,781 --> 00:24:45,909
왼쪽에 보시면 여기 아까 설명드렸던
스코어 점수가 여기 같이 표시가 됩니다 

325
00:24:45,934 --> 00:24:49,728
그래서 스코어 점수가 높은 순서대로 가지고 와요
 

326
00:24:49,753 --> 00:24:52,516
그래서 'Pokemon Ranger'가 가장 높습니다
 

327
00:24:52,540 --> 00:24:56,698
한번 여기에서 검색을
프로그램에서도 해보겠습니다 

328
00:24:57,700 --> 00:25:01,546
검색은 py-app-search.py에 이렇게 다른 프로그램이 있는데요
 

329
00:25:01,570 --> 00:25:06,706
search라는 프로그램인데 이 내용을 클라이언트는 똑같아야 되니까
 

330
00:25:06,730 --> 00:25:10,890
검색에도 아까 그 프라이빗키를 쓰셔도 크게 상관이 없더라고요
 

331
00:25:10,915 --> 00:25:15,766
그래서 똑같이 카피를 하고
 

332
00:25:15,790 --> 00:25:17,733
엔진을 먼저 잠깐 한번 보여드릴게요
 

333
00:25:17,758 --> 00:25:25,156
여기에 client의 list_engines 라는
명령을 쓰시면은 

334
00:25:25,181 --> 00:25:29,957
지금 있는 엔진에
안 돼! 이거 아니죠 

335
00:25:30,670 --> 00:25:35,448
python py-app-search.py 자
 

336
00:25:36,550 --> 00:25:39,275
지금 만들어져 있는, 존재하는 엔진의 목록을 가져옵니다
 

337
00:25:39,300 --> 00:25:41,665
그래서 'video-games'라는 엔진이 있고요
 

338
00:25:43,810 --> 00:25:46,140
그 다음에 search에서
 

339
00:25:49,420 --> 00:25:55,906
client에 search 그리고 엔진명 
그리고 여기에다가, 검색어를 여기다 넣으시면 돼요 

340
00:25:55,931 --> 00:26:01,575
'pokemon' 검색을 해서 결과를 보겠습니다
 

341
00:26:02,890 --> 00:26:07,622
이렇게 되면은
검색 결과가 이런 식으로 JSON 형식으로 떨어지는데요 

342
00:26:07,647 --> 00:26:11,926
이렇게 보시면은 여기 점수도 있고
 

343
00:26:11,950 --> 00:26:13,971
name도 있고 해서 모든 필드들이 다 나와 있어요
 

344
00:26:13,996 --> 00:26:18,286
이게 보기 조금 힘들기 때문에 조금 이걸 바꾸겠습니다
 

345
00:26:18,310 --> 00:26:25,160
조금 바꿔서 TOP 5개만. 'score' 점수하고요
 

346
00:26:25,185 --> 00:26:28,205
그리고 'title' 필드만 가져오도록 하겠습니다
 

347
00:26:30,671 --> 00:26:37,035
검색을 했을 때 보시면은 7.4점의 'Pokemon Ranger' 6.4에 'Pokemon Emerald Version'
 

348
00:26:37,060 --> 00:26:40,933
'Battle Revolution', 'Dash', 'Conquest' 이런 식으로 가져올 수가 있습니다
 

349
00:26:40,958 --> 00:26:42,706
아까 여기서 보신 거랑 똑같을 거예요
 

350
00:26:42,730 --> 00:26:48,551
'Pokemon Ranger', 'Pokemon Battle Revolution', 'Emerald Version'
 

351
00:26:49,500 --> 00:26:51,766
순서가 약간 다른데 여기 점수가 똑같네요 두 개가 
 

352
00:26:51,790 --> 00:26:55,392
그래서 순서가 뒤바뀐 거 같습니다
 

353
00:26:55,743 --> 00:27:03,982
자 그러면은 그 우리가 검색엔진을 기왕 사용을 하니까
굉장히 좀 검색 엔진을 활용을 해봐야 되잖아요 

354
00:27:04,007 --> 00:27:07,876
그래서 여기에 활용을 한번 해보도록 하겠습니다
 

355
00:27:07,900 --> 00:27:13,696
자 필드 먼저. 필드에 가중치부여로 검색 결과를 한번 조정을 한번 해볼게요
 

356
00:27:15,640 --> 00:27:22,213
올라갔는지 한번 볼까요? 아직 1800개네
리프레시를 하면? 뭐 업뎃이 되겠죠 

357
00:27:22,238 --> 00:27:25,699
자 여기에 Relevance Tuning 이라는 메뉴가 있습니다
 

358
00:27:25,724 --> 00:27:27,576
Relevance Tuning에 가보시면은
 

359
00:27:27,601 --> 00:27:29,924
그 전에 스키마를 좀 바꿀게요
 

360
00:27:30,219 --> 00:27:35,115
스키마에 가보시면 여기에 일단은 다 텍스트로 들어가 있어요
 

361
00:27:35,140 --> 00:27:37,966
그런데 'global_sales' 같은 경우는 넘버로 바꿔줘야겠죠
 

362
00:27:37,990 --> 00:27:44,206
그리고 'user_score'도 넘버겠죠. 그리고
'critic_score' 같은 것도 넘버일 겁니다 

363
00:27:44,230 --> 00:27:50,002
그래서 이런 것들을 이제 넘버로 바꾼 다음에 타입을 업데이트를 해줍니다
 

364
00:27:50,380 --> 00:27:54,259
그러면은 이제 앱 서치가 알아서 데이터들을 재색인을 해요
 

365
00:27:54,284 --> 00:27:58,816
그런데 이게 직접 하시려면은 이렇게 필드 그 스키마가 바뀌었을 때는
 

366
00:27:58,840 --> 00:28:01,216
항상 데이터를 새로 부어줘야 돼요
 

367
00:28:01,240 --> 00:28:06,526
스키마 매핑을 바꾸신 다음에. 이렇게 여기서는 알아서 자기가 재색인을 하고요
 

368
00:28:06,550 --> 00:28:09,565
여기에 'global_sales'를 기준으로 여기에 가중치를 줄게요
 

369
00:28:09,590 --> 00:28:14,626
'global_sales'값이 많으면 여기다가 Functional 이렇게 해가지고
 

370
00:28:14,650 --> 00:28:19,700
뭐 Linear도 할 수 있고 Exponential도 할 수 있고 이런데
 

371
00:28:20,860 --> 00:28:25,492
그러니까 전 세계적으로 많이 팔린 순으로
 

372
00:28:25,517 --> 00:28:30,337
저희가 이제 다시 점수를 부여를 하는 겁니다
이렇게 하고 저장을 하겠습니다 

373
00:28:31,270 --> 00:28:36,526
이렇게 한다음 Query Tester에 가서 
다시 한 번 'pokemon'으로 검색을 해볼게요 

374
00:28:36,550 --> 00:28:39,187
그러면은
 

375
00:28:45,190 --> 00:28:51,706
지금 1등이 'Pokemon Wii: Pikachu's Adventure'
 

376
00:28:51,730 --> 00:28:58,036
2위가 'Wonders Beyond', 3위 'Emerald Version'
4위가 'Platinum Version' 이런 식으로 지금 결과가 나와요 

377
00:28:58,060 --> 00:29:02,776
아까랑 결과가 다르죠
요거를 아까 우리 API로 다시 한 번 해보겠습니다 

378
00:29:02,800 --> 00:29:07,892
여기서는 'Pokemon Ranger'가 1위였고
'Emerald Version'이 두 번째었고 이랬는데 

379
00:29:07,960 --> 00:29:13,841
검색을 해보면 여기도 스코어가
잠시만요 

380
00:29:15,340 --> 00:29:21,644
조금 이상한데?
어 다 됐네요 

381
00:29:21,669 --> 00:29:27,267
에드코스트가 됐고 다시 포켓몬,
 

382
00:29:29,530 --> 00:29:33,561
'Pokemon Emerald Version' 그리고 'Pokemon Platinum Version'
 

383
00:29:33,586 --> 00:29:37,876
그리고 'Pokemon Ranger', 'Pokemon Colosseum' 
이런 식으로 지금 순서가 됐습니다 

384
00:29:37,900 --> 00:29:43,339
'Emerald Version'은 13점이고 'Platinum Version'이 11.32이런 식이고요
 

385
00:29:43,823 --> 00:29:49,243
다시 한 번 검색을 해보면은 
'Emerald Version' 13.28 

386
00:29:50,377 --> 00:29:52,868
반올림해서 표시가 된 것 같으니까
 

387
00:29:52,893 --> 00:29:58,015
'Pokemon Platinum Version', 'Ranger', 'Colosseum' 여기 있는 순서대로 나왔죠
 

388
00:29:58,189 --> 00:30:03,108
그러면은 우리는 매니지먼트 화면에서 앱 서치가 제공하는 매니지 화면에서
 

389
00:30:03,133 --> 00:30:08,217
이런 것들을 조정을 하면은
이걸 사용하는 내 프로그램은 아무것도 건드릴 게 없어요 

390
00:30:08,242 --> 00:30:11,546
내 프로그램은 그냥 API 가지고 오던대로
그냥 쿼리만 하면은 

391
00:30:11,571 --> 00:30:16,464
그대로 이것들을 다 적용에서 가져올 수가 있습니다
굉장히 편하죠 

392
00:30:18,160 --> 00:30:21,166
그래서 '필드 가중치 부여로 검색 결과 조정'을 한번 해봤고요
 

393
00:30:21,190 --> 00:30:24,526
동의어를 추가를 할 수가 있어요
 

394
00:30:24,550 --> 00:30:29,767
이것도 이제 굉장히 유용한 기능인데
여기 보시면 Synonym 기능이 있는데 그 검색을 할 때 

395
00:30:30,670 --> 00:30:36,527
여기서 Query Tester에서 'pokemon'이 아니라 'pikachu'로 한번 검색을 해보겠습니다
 

396
00:30:36,552 --> 00:30:41,472
'pikachu'로 검색하면 'PokePark Pikachu's Adventure' 이거 하나밖에 안떠요
 

397
00:30:41,497 --> 00:30:44,645
그런데 여기다가 이제 Synonym을 하고
 

398
00:30:45,820 --> 00:30:51,966
'pikachu'랑 'pokemon' 요렇게 두 개를 저장을 해볼게요
 

399
00:30:52,330 --> 00:30:55,816
그럼 'pikachu'로 검색하면 'pokemon'도 같이 검색이 됩니다
 

400
00:30:55,840 --> 00:30:59,546
그래서 쿼리 테스트에 가서 다시 한 번 'pikachu'로 검색을 해보겠습니다
 

401
00:30:59,571 --> 00:31:05,452
그러면은 가장 당연히 이제 'pikachu'가 정확히 매칭이 되니까 가장 점수가 높고요
 

402
00:31:05,477 --> 00:31:10,996
그 다음에 다른 'Pokemon Adventure'라던지
'Pokemon Platinum Version' 이런 것들도 이렇게 나옵니다 

403
00:31:11,020 --> 00:31:16,854
그래서 쿼리를 잠깐 수정을 해서 'pokemon'이 아니라 'pikachu'
 

404
00:31:21,160 --> 00:31:23,160
그래서 검색을 다시 한 번 해보면은
 

405
00:31:24,490 --> 00:31:29,779
'PokePark Pikachu's Adventure' 그리고
'Pokemon Emerald Version' 이런 식으로 결과가 나옵니다 

406
00:31:30,400 --> 00:31:33,656
자 Synonym도 이렇게 간단하게 설정을 할 수가 있고요
 

407
00:31:33,681 --> 00:31:37,736
그 다음에 프로모션과 하이드를 설정을 해볼게요
 

408
00:31:38,410 --> 00:31:41,176
여기에 보시면 이제 Curations 라는 메뉴가 있어요
 

409
00:31:41,200 --> 00:31:44,440
Curations란 메뉴가 있어서 큐레이션을 추가를 할 수가 있습니다
 

410
00:31:44,465 --> 00:31:48,875
그래서 'pokemon'으로 큐레이션을 한번 추가를 해보겠습니다
 

411
00:31:50,170 --> 00:31:55,794
지금 'pokemon'으로 검색을 했을 때
'Pokemon Emerald Version', 'Pokemon Platinum Version' 이렇게 나오는데요 

412
00:31:55,819 --> 00:32:04,399
이중에서 'Pokemon Ranger'를 잠깐 특별할인 세일하고 싶어요
 

413
00:32:04,810 --> 00:32:10,966
그러면 여기를 이렇게 'Promote this result'라는 거를 클릭을 하시면
 

414
00:32:10,990 --> 00:32:13,846
얘는 이제 프로모션이라는 영역으로 들어갑니다
 

415
00:32:13,870 --> 00:32:17,776
그렇기 때문에 얘는 이제 결과가 다르게 적용이 되게 돼요
 

416
00:32:17,800 --> 00:32:23,356
'Pokemon Colosseum' 이라는 것은 일단은
 

417
00:32:23,380 --> 00:32:25,083
재고가 없어서 일단 숨길게요
 

418
00:32:25,108 --> 00:32:30,984
그러면 'Hide result'를 클릭을 하시면 아래쪽에 Hidden에 이렇게 들어가게 됩니다
 

419
00:32:32,350 --> 00:32:39,346
이렇게 해서 이제 Query Tester에 다시 가가지고 'pokemon'을 검색을 하면은
 

420
00:32:39,370 --> 00:32:44,986
스코어는 1이라서 낮지만 'Pokemon Ranger'가 제일 위에 나옵니다
 

421
00:32:45,010 --> 00:32:48,004
그리고 나머지 애들은 좀 크지만 아래 있어요
 

422
00:32:48,910 --> 00:32:51,796
여기에 결과를 해도 마찬가지겠죠
 

423
00:32:51,820 --> 00:32:55,069
아까 'pikachu'니까 'pokemon'으로 다시 바꾸고요
 

424
00:32:59,020 --> 00:33:04,516
검색을 해보시면은 'Pokemon Ranger'가 가장
높은 값으로 나오고, 가장 처음에 나오고 

425
00:33:04,540 --> 00:33:08,236
그 다음에 'Pokemon Emerald Version' 뭐 이렇게 나옵니다
 

426
00:33:08,260 --> 00:33:14,686
그래서 그 쇼핑몰을 만들 건, 뭘 만들 건
검색이라는 

427
00:33:14,710 --> 00:33:17,858
기능을 구현을 할 때
 

428
00:33:17,889 --> 00:33:22,966
이제 서비스를 운영하다 보면
이런 기능들이 굉장히 많이 필요하게 돼요 

429
00:33:22,990 --> 00:33:24,966
굉장히 많이 필요하게 돼서
 

430
00:33:24,991 --> 00:33:28,904
갑자기 뭐 어떤 상품 위로 올려야 해요
어떤 상품 갑자기 할인해야 돼요 

431
00:33:28,943 --> 00:33:32,708
갑자기 막 팔아야 돼요
내지는 어떻게 광고주가 

432
00:33:32,733 --> 00:33:37,546
이렇게 우리 쪽에 돈을 주셔가지고
이거를 더 많이 좀 띄워줘야 돼요 

433
00:33:37,570 --> 00:33:40,936
내지는 또 어떤 상품은 갑자기 또 안 보이도록 숨겨야 됩니다
 

434
00:33:40,960 --> 00:33:43,358
뭐 그 상품에도 뭔가 문제가 생기거나
 

435
00:33:43,383 --> 00:33:49,388
아니면 그 판매자의, 판매하는 회사에
뭐 회장님이 어떤 스캔들에 휩싸였거나 이랬을 때 

436
00:33:49,413 --> 00:33:54,046
갑자기 사람들이 그 상품을 되게 보고 싶지 않아 하는 경우가 생길 수가 있어요
 

437
00:33:54,070 --> 00:33:59,146
그런 것들을 굉장히 긴밀하게 이렇게 조절할 수 있는 그런 기능들을
 

438
00:33:59,170 --> 00:34:01,978
항상 이제 서비스를 구현하시게 되면 고민을 하시게 되요
 

439
00:34:02,025 --> 00:34:08,750
이제 그런 것들을 하실 때 이렇게
엘라스틱 같은 검색 엔진을 활용을 하시면은 

440
00:34:08,775 --> 00:34:11,698
굉장히 쉽고 편하게 사용을 하실 수가 있습니다
 

441
00:34:12,910 --> 00:34:15,095
오늘 준비한건 여기까지인데요
 

442
00:34:15,120 --> 00:34:19,120
잠깐 시간이 남아서
몇 가지만 더 보여드리면요 

443
00:34:20,770 --> 00:34:23,902
여기에 Overview에서 Analytics에 가보시면은
 

444
00:34:23,927 --> 00:34:28,996
이제 데이터가 색인된 것과 아직 클릭은 없어서 그런데
 아 여기 있네요 

445
00:34:29,020 --> 00:34:34,145
그 Top Query 해가지고 
지금까지 사용자들이 여기에 쿼리를 많이 했던 

446
00:34:34,170 --> 00:34:37,729
API 호출 있잖아요
호출한 통계도 저희가 계속 저장을 하고 있어요 

447
00:34:37,754 --> 00:34:43,763
그래서 어떤 '인기 검색어' 같은 것도
되게 금방금방 보실 수가 있고요 

448
00:34:44,260 --> 00:34:47,236
그리고 이제 Reference UI라는 굉장히 좋은 기능이 있습니다
 

449
00:34:47,260 --> 00:34:52,806
여기에서 내가 요 데이터들을 가지고 뭔가
실제로 서비스를 한번 만들어보고 싶으면은 

450
00:34:52,831 --> 00:34:55,666
시뮬레이션을 한번 간단하게 해보실 수가 있어요
 

451
00:34:55,690 --> 00:35:00,580
화면에 보이시는 이제 대표적인 필드가 name필드고요
 

452
00:35:00,639 --> 00:35:06,076
그 다음에 필터할 게 genre랑 platform 정도로 필터를 해볼까요?
 

453
00:35:06,100 --> 00:35:11,903
그 다음으로 소트는 critic_score랑 global_sales
 

454
00:35:11,928 --> 00:35:21,555
이렇게 한번 해보고 자 이렇게 해서
URL은 image_url 정도가 있겠네요 

455
00:35:21,580 --> 00:35:25,923
이렇게 해서 이제 오른쪽에 이런 식으로
잠깐 프리뷰가 보일라고 하죠 

456
00:35:25,948 --> 00:35:27,978
이렇게 해서 Generate Preview를 하게 되면은
 

457
00:35:28,003 --> 00:35:33,618
실제로 얘를 어떻게 구현하면 되는지에 대한
간단한 예제 화면을 얘가 만들어줍니다 

458
00:35:34,564 --> 00:35:37,995
'mario'로 검색해볼까요? 이번에는?
 

459
00:35:38,020 --> 00:35:42,796
'mario' 이렇게 검색을 하고 서치를 하면
'Mario Kart Wii', 'Mario Kart DS'가 있고 

460
00:35:42,820 --> 00:35:48,676
왼쪽에 보시면 예를 이제 뭐 'Action'. 그중에 액션만 필터링을 한다거나
 

461
00:35:48,700 --> 00:35:53,746
아니면 뭐 'Racing'만 필터링을 한다거나 이런 식으로 보실 수가 있고요
 

462
00:35:53,770 --> 00:35:58,277
그리고 'Platform'도 'PS2'로 이렇게 필터링을 한다거나
 

463
00:35:58,302 --> 00:36:02,296
'X360'으로 필터링을 한다거나 하실 수가 있습니다
 

464
00:36:02,320 --> 00:36:08,654
그리고 이제 소팅을 'global_sales' 내림차순으로 해서
 

465
00:36:08,679 --> 00:36:12,026
세계에서 많이 팔린 순으로 이렇게 하신다거나
 

466
00:36:12,051 --> 00:36:14,836
하는 식으로 이렇게 해보실 수가 있고요
 

467
00:36:14,860 --> 00:36:18,226
상단에 보시면 여기 Download ZIP Package라고 해서
 

468
00:36:18,250 --> 00:36:22,685
화면에 쓰여진 만들어진 코드를 바로 이제 다운로드 하실 수가 있어요
 

469
00:36:22,710 --> 00:36:26,100
뭐 이거는 파이썬은 아니고 NodeJS로 만들어진 거긴 하지만
 

470
00:36:26,124 --> 00:36:30,140
개발할 때 굉장히 많은 참고를
쉽게 하실 수가 있습니다 

471
00:36:31,630 --> 00:36:37,186
자 그렇게 해가지고 이제 오늘 설명드릴 내용들을 다 설명을 드렸고요
 

472
00:36:37,210 --> 00:36:41,053
지금 코로나 때문에 좀 많은 분들이 힘들어하시고 계신데
 

473
00:36:41,078 --> 00:36:44,650
하루 빨리 코로나가 좀 극복이 되고
 

474
00:36:44,675 --> 00:36:49,006
다음부터는 또 저희가 그 행사장에서 만나뵐 수 있었으면 좋겠습니다
 

475
00:36:49,030 --> 00:36:51,028
오늘 발표 들어주셔서 감사드리고요
 

476
00:36:51,053 --> 00:36:53,763
엘라스틱의 버추얼 부스도 많이 많이 방문해주시고
 

477
00:36:53,788 --> 00:36:57,736
궁금하신 점 있으시면 언제든지 편하게 문의해주시면 감사드리겠습니다
 

478
00:36:57,760 --> 00:37:00,076
파이콘 준비해주신 모든 분들께 감사드리고요
 

479
00:37:00,100 --> 00:37:04,234
앞으로도 계속해서 좋은 행사 많이 많이
기대하도록 하겠고 

480
00:37:04,259 --> 00:37:06,740
이것으로 마치도록 하겠습니다 감사합니다


