1
00:00:10,820 --> 00:00:13,040
Hi, I'm Nina Zakharenko

2
00:00:13,180 --> 00:00:16,740
Some of you might follow
me on Twitter @NNJA.

3
00:00:16,740 --> 00:00:21,580
And I'm here today to show you how to
light up your life with Python and LEDs.

4
00:00:24,190 --> 00:00:25,330
Who am I?

5
00:00:25,330 --> 00:00:29,270
I work at Microsoft as a
Python developer advocate,

6
00:00:29,270 --> 00:00:31,620
and I focus on making Azure and VS code

7
00:00:31,620 --> 00:00:34,780
better to use for Python
developers everywhere.

8
00:00:34,780 --> 00:00:37,080
I've written software for over a decade

9
00:00:37,080 --> 00:00:41,130
at companies like Meetup, Reddit and HBO.

10
00:00:41,130 --> 00:00:43,100
My background is in software,

11
00:00:43,100 --> 00:00:47,720
but I've been working on hardware
as a hobby for the past few years.

12
00:00:47,920 --> 00:00:48,900
If you want to reach out,

13
00:00:48,900 --> 00:00:54,190
please follow me on Twitter
@NNJA or Twitch @NNJA.IO.

14
00:00:54,530 --> 00:00:56,390
And I'm also happy to share that

15
00:00:56,390 --> 00:01:00,980
I'm a newly elected board member
of the Python software foundation.

16
00:01:02,200 --> 00:01:09,620
Now, I want to tell you that software
doesn't have to be serious.

17
00:01:10,320 --> 00:01:13,130
I used to have a lot of creative
energy when I was younger

18
00:01:13,130 --> 00:01:16,540
and an interest in
computers from my young age,

19
00:01:16,540 --> 00:01:18,690
I thought I gave up on all of that

20
00:01:18,690 --> 00:01:20,340
when I joined the workforce

21
00:01:20,340 --> 00:01:23,960
or nobody would take me
seriously as a developer.

22
00:01:23,960 --> 00:01:25,480
I feel like my first few jobs

23
00:01:25,480 --> 00:01:28,020
really sucked the creativity out of me.

24
00:01:28,020 --> 00:01:31,890
I was working for some large enterprises
and financial institutions

25
00:01:32,020 --> 00:01:36,020
and my opportunities for creative
coding really faded away.

26
00:01:37,550 --> 00:01:41,450
I slowly built that back up
by working on Opensource.

27
00:01:41,450 --> 00:01:43,260
Tinkering with hardware was what

28
00:01:43,260 --> 00:01:45,840
really let my creativity explode.

29
00:01:45,840 --> 00:01:48,300
And it's taken me a few years to reconnect

30
00:01:48,300 --> 00:01:51,190
with that part of myself
and relearn the lesson

31
00:01:51,190 --> 00:01:53,750
that I learned all of those years ago,

32
00:01:53,750 --> 00:01:57,180
That software doesn't have to be serious.

33
00:01:57,180 --> 00:02:00,220
You can use code to make art like this.

34
00:02:00,220 --> 00:02:05,370
This is a Python version
of a processing sketch by SaSkia Freeke.

35
00:02:06,490 --> 00:02:09,700
And hardware doesn't have
to be serious either,

36
00:02:09,700 --> 00:02:11,450
this is Simone Giertz.

37
00:02:11,450 --> 00:02:15,170
she's an incredible maker
and a queen of robots,

38
00:02:15,170 --> 00:02:17,970
and she makes very,
very silly contraptions.

39
00:02:19,670 --> 00:02:23,370
This is one of my own creations

40
00:02:23,370 --> 00:02:28,040
and it is inspired by a
project by Sophy Wong.

41
00:02:28,040 --> 00:02:29,620
It's an LED jacket,

42
00:02:29,620 --> 00:02:33,930
but I made a version that I
can control with Bluetooth

43
00:02:33,930 --> 00:02:37,190
so I can change the colors
of the LEDs with my phone

44
00:02:38,110 --> 00:02:42,090
because making something like
this is really fun for me,

45
00:02:42,090 --> 00:02:45,400
it let me create a physical
manifestation of my code.

46
00:02:45,400 --> 00:02:47,480
I really love the idea of LEDs

47
00:02:47,480 --> 00:02:49,860
of making cool wearable projects.

48
00:02:49,860 --> 00:02:52,970
I wanted to make pretty things
that fit my own aesthetic,

49
00:02:52,970 --> 00:02:56,150
which is what got me
interested in hardware in the first place.

50
00:02:56,700 --> 00:02:59,640
And I've really been inspired
by amazing shared projects

51
00:02:59,640 --> 00:03:04,530
and docs from other makers
like Becky Stern and Sophy Wong.

52
00:03:04,530 --> 00:03:06,630
And I made this jacket with LEDs.

53
00:03:06,630 --> 00:03:08,820
I programmed it in CircuitPython

54
00:03:08,820 --> 00:03:12,090
and I'm really not an
expert in electronics.

55
00:03:12,090 --> 00:03:13,700
I never studied it in school

56
00:03:13,700 --> 00:03:16,880
and you don't have to be either
to make projects like this.

57
00:03:20,870 --> 00:03:22,170
Python on hardware.

58
00:03:23,500 --> 00:03:24,810
Earlier I mentioned,

59
00:03:25,960 --> 00:03:30,150
you might've heard of Arduino
code which is a C++ variant,

60
00:03:30,150 --> 00:03:32,690
which unfortunately it's
not very easy to learn.

61
00:03:32,690 --> 00:03:34,380
It's very error prone.

62
00:03:34,380 --> 00:03:36,370
We as a community know from experience

63
00:03:36,370 --> 00:03:37,870
that Python is the opposite.

64
00:03:37,870 --> 00:03:38,980
It's easy to learn.

65
00:03:38,980 --> 00:03:41,820
It's beginner friendly and
it's great for education.

66
00:03:42,900 --> 00:03:45,280
In fact, it was announced
in January of last year

67
00:03:45,280 --> 00:03:47,890
that Python was gonna be the
official programming language

68
00:03:47,890 --> 00:03:49,940
for high school education in France.

69
00:03:51,900 --> 00:03:54,760
How do we go about programming
Python on hardware?

70
00:03:55,600 --> 00:03:57,750
At the moment we have two options.

71
00:03:57,750 --> 00:04:00,620
We have MicroPython and CircuitPython.

72
00:04:00,620 --> 00:04:03,160
MicroPython is a variant of Python 3

73
00:04:03,160 --> 00:04:05,710
that is optimized to
run on microcontrollers.

74
00:04:05,710 --> 00:04:07,490
It's very compact.

75
00:04:07,490 --> 00:04:09,870
It's what runs on the micro:bit.

76
00:04:09,870 --> 00:04:14,090
CircuitPython is an
education friendly fork

77
00:04:14,090 --> 00:04:18,140
of a MicroPython that is
maintained by Adafruit.

78
00:04:18,140 --> 00:04:20,610
I'm gonna be showing you
demos on Adafruit hardware

79
00:04:20,610 --> 00:04:23,010
and so we're gonna be
using CircuitPython today.

80
00:04:26,900 --> 00:04:31,670
These are a few other
devices that run Python.

81
00:04:31,670 --> 00:04:35,440
The BBC micro:bit which
is a computing device

82
00:04:35,440 --> 00:04:38,480
aimed at learning that runs MicroPython.

83
00:04:38,480 --> 00:04:42,450
There's the Adafruit M0 &
M4 that runs CircuitPython

84
00:04:42,670 --> 00:04:44,930
and then the Raspberry Pi Zero W

85
00:04:44,930 --> 00:04:47,140
which is a small development
kit with wireless

86
00:04:47,140 --> 00:04:50,250
and Bluetooth capabilities
runs Python as well.

87
00:04:52,970 --> 00:04:58,170
Depending on where and where
you purchased your hardware,

88
00:04:58,600 --> 00:05:00,820
it might come with Python
installed by default,

89
00:05:00,820 --> 00:05:02,370
it might not.

90
00:05:02,370 --> 00:05:04,550
I'm gonna be showing you a
device that I really like

91
00:05:04,550 --> 00:05:06,640
that is focused on education called

92
00:05:06,640 --> 00:05:09,790
the Adafruit circuit playground express.

93
00:05:09,790 --> 00:05:12,560
It's I think a great
option for an introduction

94
00:05:12,560 --> 00:05:15,750
to electronics and programming hardware.

95
00:05:15,750 --> 00:05:17,470
As a learning platform the cost,

96
00:05:17,470 --> 00:05:20,420
at least in the U.S. is only about $25.

97
00:05:21,880 --> 00:05:25,900
Now Python has this batteries
included philosophy.

98
00:05:25,900 --> 00:05:28,320
There's PEP206 that says,

99
00:05:28,320 --> 00:05:31,190
the Python source
distribution has maintained

100
00:05:31,190 --> 00:05:33,350
a philosophy of batteries included,

101
00:05:33,350 --> 00:05:36,710
which means having a rich and
versatile standard library,

102
00:05:36,710 --> 00:05:38,410
which is immediately available

103
00:05:38,410 --> 00:05:41,590
without making the user
download separate packages.

104
00:05:41,590 --> 00:05:45,530
I think that this has helped
drive Python's success.

105
00:05:45,530 --> 00:05:48,490
Now the circuit playground
express that I'm gonna show you

106
00:05:48,490 --> 00:05:51,130
doesn't actually come with batteries,

107
00:05:51,130 --> 00:05:54,750
but I imagine that the
same philosophy applies.

108
00:05:54,750 --> 00:05:57,970
It has everything that you
need to get started programming

109
00:05:57,970 --> 00:06:00,690
with hardware included on one board,

110
00:06:01,940 --> 00:06:05,600
So just a quick tour of what's on it.

111
00:06:05,600 --> 00:06:09,370
There are 10 Neo pixel RGB LEDs,

112
00:06:09,370 --> 00:06:12,510
each one can display 16 million colors.

113
00:06:12,510 --> 00:06:15,750
There is a light sensor,
temperature sensor,

114
00:06:15,750 --> 00:06:19,010
some programmable buttons
on the left and the right,

115
00:06:19,010 --> 00:06:23,380
a switch, an accelerometer
to detect motion.

116
00:06:23,380 --> 00:06:26,460
There's a micro USB Jack which
makes it easy to program.

117
00:06:26,460 --> 00:06:31,760
And best of all, there is no soldering
required to access these features,

118
00:06:31,850 --> 00:06:35,530
which is great for kids
or for clumsy adults.

119
00:06:35,530 --> 00:06:39,520
You can easily connect other things
to it with alligator clips.

120
00:06:39,630 --> 00:06:42,800
You can even sew on it
with conductive thread.

121
00:06:44,170 --> 00:06:45,470
Now I'm gonna be showing you

122
00:06:45,470 --> 00:06:48,960
some live demos from my desk today.

123
00:06:48,960 --> 00:06:52,160
I actually have a circuit
playground express with me.

124
00:06:52,160 --> 00:06:54,550
So this is the one that is on my desk

125
00:06:54,550 --> 00:06:55,740
and I have it right here

126
00:06:55,740 --> 00:06:58,110
and I'll be showing
you some demos shortly.

127
00:07:02,580 --> 00:07:04,900
So we talked about the LEDs.

128
00:07:04,900 --> 00:07:09,070
How do we light up the LEDs that are
on the front of this device?

129
00:07:09,350 --> 00:07:11,350
Well, there's an important concept

130
00:07:11,350 --> 00:07:13,270
that you need to know about RGB LEDs.

131
00:07:14,970 --> 00:07:20,970
An RGB LED is really a combination of
three tiny LEDs in just one package.

132
00:07:21,310 --> 00:07:23,930
RGB stands for red, green, and blue.

133
00:07:23,930 --> 00:07:27,280
And if you look at the color
wheel on the right hand side,

134
00:07:27,280 --> 00:07:30,000
you can see that you can
produce almost any color

135
00:07:30,000 --> 00:07:35,990
by combining these three colors
in intensity is varying from zero to 255.

136
00:07:36,670 --> 00:07:39,390
Now zero means that the
color is not present.

137
00:07:39,390 --> 00:07:42,600
For example, blue is set to 255,

138
00:07:42,600 --> 00:07:46,740
red set to zero and green set to zero
would produce pure blue.

139
00:07:47,390 --> 00:07:50,130
By combining the
intensities of these colors,

140
00:07:50,130 --> 00:07:54,240
you can produce 16
million color variations.

141
00:07:54,240 --> 00:07:56,610
Now, I didn't fully understand this

142
00:07:56,610 --> 00:08:01,960
until I found this picture of an RGB LED
in action under a microscope.

143
00:08:02,270 --> 00:08:04,050
So let's take a quick look at that.

144
00:08:06,610 --> 00:08:09,670
Here's the tiny RGB LED.

145
00:08:09,670 --> 00:08:13,350
There are three LEDs present
in each one of these;

146
00:08:13,350 --> 00:08:14,760
red, green, and blue.

147
00:08:16,080 --> 00:08:19,870
These three tiny LEDs
can light up one by one

148
00:08:19,870 --> 00:08:22,470
or altogether or a combination,

149
00:08:22,470 --> 00:08:24,030
but because they're so small,

150
00:08:24,030 --> 00:08:27,010
your eye actually sees them as one color.

151
00:08:27,010 --> 00:08:30,290
In this picture, the initial
picture they're all off.

152
00:08:31,610 --> 00:08:35,010
Here's a photo with just one LED on.

153
00:08:35,010 --> 00:08:36,990
This is the red LED.

154
00:08:36,990 --> 00:08:39,600
You can tell the color
that is gonna appear

155
00:08:39,600 --> 00:08:41,910
by the color of the outside ring.

156
00:08:41,910 --> 00:08:44,020
So in this case, it is red.

157
00:08:44,020 --> 00:08:48,040
Here is just the green LED that is lit

158
00:08:48,040 --> 00:08:51,760
and just the blue LED that's lit.

159
00:08:51,760 --> 00:08:53,720
When all of them are turned on,

160
00:08:53,720 --> 00:08:56,710
the LED is gonna look white to your eye.

161
00:08:56,710 --> 00:08:59,130
And depending on the
combinations of colors,

162
00:08:59,130 --> 00:09:02,680
it can look like all the
different colors in between.

163
00:09:02,680 --> 00:09:05,130
Know that Neo pixel is
the Adafruit brand name

164
00:09:05,130 --> 00:09:08,020
for an individually addressable LED

165
00:09:08,020 --> 00:09:10,970
that's commonly known as the WS2812.

166
00:09:12,100 --> 00:09:14,510
Now, how do we program it?

167
00:09:14,510 --> 00:09:18,790
This is a lot easier than working
with Arduino based platforms.

168
00:09:19,460 --> 00:09:21,860
If you've worked with Arduino in the past,

169
00:09:21,860 --> 00:09:24,080
you have to unplug and reset the board

170
00:09:24,080 --> 00:09:26,050
and it's kind of tedious.

171
00:09:28,140 --> 00:09:31,490
With CircuitPython, you
can just plug in the device

172
00:09:31,490 --> 00:09:34,500
with a data and charge USB cable,

173
00:09:34,500 --> 00:09:37,150
and you'll see a
CircuitPython drive on Mac.

174
00:09:37,150 --> 00:09:39,520
It will be in VOLUMES/CIRCUITPY.

175
00:09:40,360 --> 00:09:41,980
If you don't see it there,

176
00:09:41,980 --> 00:09:45,150
you can install
CircuitPython on the device.

177
00:09:45,150 --> 00:09:46,870
Once you have done that,

178
00:09:46,870 --> 00:09:51,590
you can create or edit a code.py
file in the root directory

179
00:09:51,590 --> 00:09:53,210
and every time you save it,

180
00:09:53,210 --> 00:09:56,380
it's gonna get automatically
reloaded to the device.

181
00:09:56,380 --> 00:09:58,500
So it's a really quick and easy workflow.

182
00:10:01,160 --> 00:10:05,320
I like programming with visual studio code
and the Python extension

183
00:10:05,780 --> 00:10:09,130
which is what I'm gonna
be showing you today.

184
00:10:09,130 --> 00:10:11,060
But what you really need to know

185
00:10:11,060 --> 00:10:13,650
is you can use any editor that you like,

186
00:10:13,650 --> 00:10:15,370
but you need to use an editor

187
00:10:15,370 --> 00:10:18,030
that writes up the file
completely when you save it.

188
00:10:20,030 --> 00:10:22,230
And there are other really good options

189
00:10:22,230 --> 00:10:24,900
available for programming
hardware in Python

190
00:10:24,900 --> 00:10:27,120
if you're more of a beginner

191
00:10:27,120 --> 00:10:28,910
or you're less familiar with Python.

192
00:10:28,910 --> 00:10:31,780
The Mu editor is a great option.

193
00:10:34,200 --> 00:10:37,220
What happens if you
don't have the hardware?

194
00:10:37,220 --> 00:10:38,890
Adafruit is based in New York

195
00:10:38,890 --> 00:10:43,880
for a while earlier this year,
they weren't shipping.

196
00:10:43,880 --> 00:10:46,830
Maybe this hardware is
difficult to get in Korea.

197
00:10:47,990 --> 00:10:51,500
Well, some interns at Microsoft
released a really cool project

198
00:10:51,500 --> 00:10:55,950
called the device simulator
express extension.

199
00:10:55,950 --> 00:10:59,300
So you can use this to
simulate a few platforms

200
00:10:59,300 --> 00:11:01,750
like the micro:bit, the
circuit playground express

201
00:11:01,750 --> 00:11:03,550
and even the Adafruit clipboard

202
00:11:03,550 --> 00:11:06,890
and I'm gonna be showing you
a short demo of this today.

203
00:11:06,890 --> 00:11:09,190
And there's a link in the slides

204
00:11:09,190 --> 00:11:12,610
to download the extension
that's available here.

205
00:11:12,610 --> 00:11:17,900
If you want to take a look at the slides
there at nina.to/pykr2020.

206
00:11:19,210 --> 00:11:21,960
One more option for
programming these boards.

207
00:11:21,960 --> 00:11:23,980
If you want to get start
at programming hardware

208
00:11:23,980 --> 00:11:27,820
with zero coding and
without the device itself,

209
00:11:28,710 --> 00:11:30,660
there's something called
Microsoft MakeCode.

210
00:11:30,660 --> 00:11:32,480
It's a block-based editor.

211
00:11:32,480 --> 00:11:35,090
You can export it as JavaScript.

212
00:11:35,090 --> 00:11:37,270
There's some really cool collaborations

213
00:11:37,270 --> 00:11:40,170
like with cartoon network

214
00:11:40,170 --> 00:11:43,090
and you don't need to have the hardware.

215
00:11:43,090 --> 00:11:44,000
It's an emulator.

216
00:11:44,000 --> 00:11:46,780
You can see what's happening right away.

217
00:11:46,780 --> 00:11:49,240
I think this drag and drop interface

218
00:11:49,240 --> 00:11:54,020
is really simple to understand for kids

219
00:11:54,020 --> 00:11:57,490
or for folks who might not necessarily
be familiar with programming.

220
00:11:57,660 --> 00:11:59,910
It can make them productive very quickly.

221
00:12:02,210 --> 00:12:04,870
Let's take a look at some simple code

222
00:12:04,870 --> 00:12:08,350
that's for the circuit playground express.

223
00:12:08,350 --> 00:12:13,100
First, we import the library as CPX.

224
00:12:13,100 --> 00:12:17,800
Next, we make a color variable for red,

225
00:12:17,800 --> 00:12:19,540
remember RGB.

226
00:12:19,540 --> 00:12:22,990
So I'm setting 255 for the red position,

227
00:12:22,990 --> 00:12:24,880
zero for the green position,

228
00:12:24,880 --> 00:12:26,630
zero for the blue position.

229
00:12:26,630 --> 00:12:29,100
And I'm also setting the brightness down

230
00:12:29,100 --> 00:12:31,680
because otherwise by
default, it's very bright.

231
00:12:32,580 --> 00:12:35,640
Now we want to keep looping forever,

232
00:12:35,640 --> 00:12:37,540
not just running our code once.

233
00:12:37,540 --> 00:12:40,890
You want to think of it as an animation.

234
00:12:40,890 --> 00:12:42,660
If you just run it once,

235
00:12:42,660 --> 00:12:44,330
your LED would blink red

236
00:12:44,330 --> 00:12:46,430
and then it would turn off right away.

237
00:12:46,430 --> 00:12:48,880
So if you want to keep the red color on,

238
00:12:48,880 --> 00:12:51,100
you need to loop forever.

239
00:12:51,100 --> 00:12:55,210
And we're using a
cpx.pixels.fill helper method

240
00:12:55,210 --> 00:12:57,820
to fill all the pixels on
the board with one color.

241
00:12:59,500 --> 00:13:01,880
Now this library also exposes

242
00:13:01,880 --> 00:13:04,700
some of the different
components on this board.

243
00:13:04,700 --> 00:13:05,770
So in this case,

244
00:13:05,770 --> 00:13:09,570
we have button A and button
B that's on the board.

245
00:13:09,570 --> 00:13:15,950
We can access them with
cpx.button_a and cpx.button_b.

246
00:13:16,420 --> 00:13:18,010
And those variables will be set to true

247
00:13:18,010 --> 00:13:20,760
when the button is pressed
and false when it's not.

248
00:13:24,380 --> 00:13:30,370
So let's take a look at this
code in the VS code emulator

249
00:13:31,630 --> 00:13:33,960
or VS code device simulator express.

250
00:13:41,760 --> 00:13:44,670
So I would need to open
my VS code command palette

251
00:13:44,670 --> 00:13:51,430
and since I already have the device
simulator express extension installed,

252
00:13:53,510 --> 00:13:56,980
you would have to go ahead
and install that first.

253
00:13:56,980 --> 00:13:59,140
And then when we go to our code,

254
00:13:59,140 --> 00:14:01,600
I can open my command palette and say,

255
00:14:01,600 --> 00:14:04,570
Device simulator express: Run simulator.

256
00:14:09,660 --> 00:14:14,660
And it'll show us a little diagram of

257
00:14:14,820 --> 00:14:18,060
the circuit playground express
here on the right hand side.

258
00:14:18,060 --> 00:14:19,470
So if we look at this code,

259
00:14:19,470 --> 00:14:22,840
we'll see that if we press button A,

260
00:14:22,840 --> 00:14:24,560
the pixel should fill with red.

261
00:14:24,560 --> 00:14:26,020
So let's try that.

262
00:14:26,020 --> 00:14:28,210
If we hover the mouse over here,

263
00:14:28,210 --> 00:14:30,290
we'll see that button A is highlighted.

264
00:14:30,290 --> 00:14:31,780
So when we press button A,

265
00:14:31,780 --> 00:14:34,460
the pixels are filled with red.

266
00:14:34,460 --> 00:14:36,490
Otherwise if we press button B,

267
00:14:36,490 --> 00:14:39,390
the pixels are filled with the color blue.

268
00:14:40,610 --> 00:14:43,100
If neither of the buttons are pressed,

269
00:14:43,100 --> 00:14:46,850
then we don't fill the LEDs with anything,

270
00:14:46,850 --> 00:14:48,140
we just keep them off,

271
00:14:51,760 --> 00:14:53,190
which is pretty cool.

272
00:15:06,450 --> 00:15:07,520
Let's look at some code

273
00:15:07,520 --> 00:15:09,650
that's a little bit more complicated.

274
00:15:09,650 --> 00:15:12,100
Here's a simple program
that's gonna cycle through

275
00:15:12,100 --> 00:15:15,310
red, green and blue with button presses

276
00:15:15,310 --> 00:15:17,640
and let's walk through this one by one.

277
00:15:17,640 --> 00:15:21,520
So first I'm importing the
two libraries that I'm using;

278
00:15:21,520 --> 00:15:24,980
the circuit playground
express library and time.

279
00:15:24,980 --> 00:15:27,710
And I'm setting up some
colors that I'm gonna be using

280
00:15:27,710 --> 00:15:30,520
in my code; red, green, and blue.

281
00:15:30,520 --> 00:15:34,770
Again, notice where the
zero and the 255s are,

282
00:15:34,770 --> 00:15:36,570
then I'm gonna make a
list of all the colors

283
00:15:36,570 --> 00:15:38,470
that I want to loop through,

284
00:15:38,470 --> 00:15:40,790
starting in a position of zero.

285
00:15:40,790 --> 00:15:43,700
Again, instead of running our code once,

286
00:15:43,700 --> 00:15:45,700
so it doesn't stop after the first time,

287
00:15:45,700 --> 00:15:47,460
we're gonna loop forever

288
00:15:47,460 --> 00:15:51,960
and we're gonna constantly
be checking for input.

289
00:15:51,960 --> 00:15:54,320
So I'm gonna be filling the LEDs

290
00:15:54,320 --> 00:15:57,580
on the circuit playground
express with the selected color.

291
00:15:57,580 --> 00:16:00,510
And then if button A
or button B is pressed,

292
00:16:00,510 --> 00:16:03,820
I'm going to flip over to the next color

293
00:16:03,820 --> 00:16:06,380
and then I'm gonna sleep
for just a fifth of a second

294
00:16:06,380 --> 00:16:09,520
to prevent multiple button presses.

295
00:16:09,520 --> 00:16:11,770
So let's take a look at
what this looks like.

296
00:16:13,600 --> 00:16:17,570
Now for this demo, I'm
gonna close the simulator

297
00:16:17,570 --> 00:16:19,890
because I'm gonna be showing you

298
00:16:23,140 --> 00:16:28,970
on the actual circuit playground express

299
00:16:29,320 --> 00:16:32,170
that is on my desktop right here.

300
00:16:33,690 --> 00:16:35,440
So taking a look at this,

301
00:16:35,440 --> 00:16:37,710
I'll see that I have a CIRCUITPY folder

302
00:16:37,710 --> 00:16:40,300
and I'm gonna open code.py

303
00:16:40,300 --> 00:16:43,440
which is what is currently
running on this device.

304
00:16:43,440 --> 00:16:46,400
So as you'll see, the LEDs are red.

305
00:16:46,400 --> 00:16:47,900
Now, if I press the button,

306
00:16:47,900 --> 00:16:51,290
it should switch to green and
then it should switch to blue.

307
00:16:52,140 --> 00:16:54,750
Red, green, blue
each time I press the button.

308
00:16:54,750 --> 00:16:57,100
It doesn't matter which button I press.

309
00:16:58,590 --> 00:17:00,480
Let's change our code a little bit.

310
00:17:01,850 --> 00:17:04,880
Let's take a look at our color chart

311
00:17:08,640 --> 00:17:11,560
and let's add a new color to this list.

312
00:17:12,600 --> 00:17:15,820
For this example, I want to pick yellow,

313
00:17:15,820 --> 00:17:18,800
which is a mix of red and green.

314
00:17:18,800 --> 00:17:21,520
So I'm gonna make a new variable, yellow.

315
00:17:21,520 --> 00:17:24,180
Remember I'm gonna set 255 for red,

316
00:17:24,180 --> 00:17:29,180
255 for green and zero
for blue to make yellow

317
00:17:29,190 --> 00:17:31,940
and then I'm gonna add yellow to my list.

318
00:17:35,210 --> 00:17:36,870
Now that I have saved,

319
00:17:36,870 --> 00:17:40,140
my code should be on this
device already, automatically.

320
00:17:40,140 --> 00:17:42,040
I don't have to do anything special.

321
00:17:42,040 --> 00:17:44,090
So let's test it out and see if it works.

322
00:17:45,380 --> 00:17:47,810
I'm switching over to green,
switching over to blue,

323
00:17:47,810 --> 00:17:52,810
and now one more button
press and now I have yellow.

324
00:17:53,130 --> 00:17:57,790
So the code to make this
was pretty straight forward.

325
00:18:04,530 --> 00:18:07,580
I'm not the only one that
thinks hardware is really cool.

326
00:18:07,580 --> 00:18:11,010
90% of students said that the micro:bit

327
00:18:11,010 --> 00:18:13,120
showed them that anyone can code.

328
00:18:14,610 --> 00:18:18,720
86% of surveyed students
said the micro:bit

329
00:18:18,720 --> 00:18:21,110
made computer science more interesting.

330
00:18:22,490 --> 00:18:25,440
But something that's near and dear to me

331
00:18:25,440 --> 00:18:28,120
is that 70% more girls surveyed

332
00:18:28,120 --> 00:18:31,010
said they would choose
computing as a school subject

333
00:18:31,010 --> 00:18:32,620
after using the micro:bit.

334
00:18:34,210 --> 00:18:37,610
There was a study called
unlocking the clubhouse

335
00:18:37,610 --> 00:18:40,790
that suggested that
traditional computing culture

336
00:18:40,790 --> 00:18:43,850
is a boys club and it's
unfriendly to women

337
00:18:43,850 --> 00:18:48,990
and we need to find ways to unlock
this clubhouse to make it accessible.

338
00:18:50,130 --> 00:18:55,130
There was a study on E-textiles
called LilyPad in the wild,

339
00:18:55,550 --> 00:18:57,440
which suggested a different approach

340
00:18:57,440 --> 00:19:00,550
called building new clubhouses.

341
00:19:00,550 --> 00:19:04,540
Instead of trying to fit people
into existing engineering cultures,

342
00:19:05,100 --> 00:19:07,570
it may be more constructive
to try to spark

343
00:19:07,570 --> 00:19:11,230
and support new cultures
to build new clubhouses

344
00:19:11,230 --> 00:19:15,280
and make room for more diverse
interests and passions.

345
00:19:15,280 --> 00:19:19,320
And remember that diversity
doesn't stop at gender.

346
00:19:19,320 --> 00:19:21,250
We want to use Python on hardware

347
00:19:21,250 --> 00:19:24,070
to encourage everyone to participate,

348
00:19:24,070 --> 00:19:25,860
people of different ethnicities

349
00:19:25,860 --> 00:19:29,830
and socio-economic status
identity is neurodiversity,

350
00:19:29,830 --> 00:19:32,270
age and many other factors.

351
00:19:32,270 --> 00:19:34,170
So let's make Python on hardware

352
00:19:34,170 --> 00:19:36,220
the most diverse community that we can.

353
00:19:43,020 --> 00:19:45,210
The hardware community is really awesome

354
00:19:45,210 --> 00:19:49,050
about sharing incredible projects
with step by step instructions.

355
00:19:49,080 --> 00:19:51,580
Some of the places that
you might find these is

356
00:19:51,580 --> 00:19:56,250
Adafruit guides, Microsoft
MakeCode or Instructables.

357
00:19:56,250 --> 00:19:59,640
On the left is a jack-o-lantern project

358
00:19:59,640 --> 00:20:02,410
where you only need the
circuit playground board

359
00:20:02,410 --> 00:20:06,000
and a Ziploc bag if you
opt to for a real pumpkin.

360
00:20:06,890 --> 00:20:08,830
Python on hardware is
still relatively new,

361
00:20:08,830 --> 00:20:11,280
so don't forget to
share your own projects.

362
00:20:16,420 --> 00:20:19,550
Angela Sheehan is a maker
that I really look up to.

363
00:20:19,550 --> 00:20:24,160
She created these incredible
LED high heel shoes and a lot more.

364
00:20:24,800 --> 00:20:29,170
So just one more example
of making new clubhouses.

365
00:20:30,320 --> 00:20:31,470
How cool are these?

366
00:20:33,690 --> 00:20:37,970
The nature of hardware is being able
to see these instantaneous results.

367
00:20:38,410 --> 00:20:41,390
More importantly, being able
to customize your projects

368
00:20:41,390 --> 00:20:43,690
helps you connect to them from the start.

369
00:20:43,690 --> 00:20:46,170
It helps make technology more accessible

370
00:20:46,170 --> 00:20:50,130
to those who are traditionally
underrepresented in it.

371
00:20:50,130 --> 00:20:54,490
This picture of girls with huge
beaming smiles is one of my favorites.

372
00:20:57,290 --> 00:21:01,670
They're made by girls participants
that made LEDs light up in masks.

373
00:21:01,920 --> 00:21:06,400
So E-textiles, Sobel
electronics, paper crafts,

374
00:21:06,400 --> 00:21:10,660
these all help to introduce technology
in new and unexpected ways.

375
00:21:12,350 --> 00:21:16,580
I'm wearing one of my
favorite projects on camera.

376
00:21:16,580 --> 00:21:19,650
This is based on a different
Adafruit Python board,

377
00:21:19,650 --> 00:21:22,170
the Gemma M0 and some LED rings.

378
00:21:23,720 --> 00:21:27,020
It's based on an original
design by Becky Stern.

379
00:21:27,020 --> 00:21:29,020
Let's see if I can get these to turn on.

380
00:21:36,060 --> 00:21:39,750
My earings that are on
right now, run Python,

381
00:21:39,750 --> 00:21:41,970
which I absolutely love.

382
00:21:41,970 --> 00:21:45,620
You can check out the code
on Github if you would like.

383
00:21:46,520 --> 00:21:51,210
And I wanted to say that
you've seen that Python

384
00:21:51,210 --> 00:21:54,450
opens up this whole new world
of working with hardware.

385
00:21:56,990 --> 00:21:58,520
Lawrence Durell said that,

386
00:21:58,520 --> 00:22:02,120
"Our inventions mirror our secret wishes."

387
00:22:02,120 --> 00:22:07,090
So hopefully this inspires
you to try it out on your own.

388
00:22:07,090 --> 00:22:10,430
Next steps for you if you have

389
00:22:10,430 --> 00:22:12,840
or have access to a
circuit playground express,

390
00:22:12,840 --> 00:22:14,590
that's a great first start.

391
00:22:14,590 --> 00:22:15,420
If you don't,

392
00:22:15,420 --> 00:22:18,240
you can still learn about
the concepts of hardware

393
00:22:18,240 --> 00:22:22,890
with Microsoft MakeCode with
the device simulator express.

394
00:22:24,010 --> 00:22:24,930
I hope that I've shown you

395
00:22:24,930 --> 00:22:27,410
that you don't necessarily
need to be an expert

396
00:22:27,410 --> 00:22:31,320
or know a lot about electronics
to just get started.

397
00:22:32,590 --> 00:22:34,980
And please write your code,

398
00:22:34,980 --> 00:22:36,840
but also share it with the community,

399
00:22:36,840 --> 00:22:38,730
follow our community guide

400
00:22:38,730 --> 00:22:42,090
and learn, make things,
create and teach others.

401
00:22:42,090 --> 00:22:44,300
It's a really fantastic cycle of that

402
00:22:44,300 --> 00:22:45,850
we can all participate in.

403
00:22:46,730 --> 00:22:48,640
If you want to share your projects,

404
00:22:48,640 --> 00:22:51,020
you can use the Python hardware hashtag

405
00:22:51,020 --> 00:22:52,670
on Twitter to get started.

406
00:22:53,630 --> 00:22:55,420
Thank you all so much.

407
00:22:55,420 --> 00:22:57,910
It's really been my pleasure

408
00:22:57,910 --> 00:23:02,120
being able to speak to PyCon
Korea remotely this year.

409
00:23:02,120 --> 00:23:04,660
I hope that I've left you inspired

410
00:23:04,660 --> 00:23:08,360
and that you've learned how
to program LEDs with Python

411
00:23:08,360 --> 00:23:11,480
to light up your own life
with code and creativity.

412
00:23:12,700 --> 00:23:18,200
The slides will be
posted at the link here:

413
00:23:18,290 --> 00:23:21,950
nina.to/pykr2020

414
00:23:21,950 --> 00:23:24,170
and thank you all so much.

